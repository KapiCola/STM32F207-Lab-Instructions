
Eksploracja_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002518  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800269c  0800269c  0000369c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026ec  080026ec  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080026ec  080026ec  000036ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026f4  080026f4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f4  080026f4  000036f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026f8  080026f8  000036f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080026fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000068  08002764  00004068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08002764  000041e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000401d  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001211  00000000  00000000  000080ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e0  00000000  00000000  000092c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000037c  00000000  00000000  000097a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4f8  00000000  00000000  00009b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f65  00000000  00000000  00029014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b98e0  00000000  00000000  0002ef79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001998  00000000  00000000  000e889c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000ea234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000068 	.word	0x20000068
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08002684 	.word	0x08002684

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000006c 	.word	0x2000006c
 80001c0:	08002684 	.word	0x08002684

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b98c 	b.w	80004f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	468e      	mov	lr, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14a      	bne.n	800029a <__udivmoddi4+0xa6>
 8000204:	428a      	cmp	r2, r1
 8000206:	4617      	mov	r7, r2
 8000208:	d962      	bls.n	80002d0 <__udivmoddi4+0xdc>
 800020a:	fab2 f682 	clz	r6, r2
 800020e:	b14e      	cbz	r6, 8000224 <__udivmoddi4+0x30>
 8000210:	f1c6 0320 	rsb	r3, r6, #32
 8000214:	fa01 f806 	lsl.w	r8, r1, r6
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	40b7      	lsls	r7, r6
 800021e:	ea43 0808 	orr.w	r8, r3, r8
 8000222:	40b4      	lsls	r4, r6
 8000224:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000228:	fbb8 f1fe 	udiv	r1, r8, lr
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fb0e 8811 	mls	r8, lr, r1, r8
 8000234:	fb01 f20c 	mul.w	r2, r1, ip
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	429a      	cmp	r2, r3
 8000240:	d909      	bls.n	8000256 <__udivmoddi4+0x62>
 8000242:	18fb      	adds	r3, r7, r3
 8000244:	f101 30ff 	add.w	r0, r1, #4294967295
 8000248:	f080 80eb 	bcs.w	8000422 <__udivmoddi4+0x22e>
 800024c:	429a      	cmp	r2, r3
 800024e:	f240 80e8 	bls.w	8000422 <__udivmoddi4+0x22e>
 8000252:	3902      	subs	r1, #2
 8000254:	443b      	add	r3, r7
 8000256:	1a9a      	subs	r2, r3, r2
 8000258:	fbb2 f0fe 	udiv	r0, r2, lr
 800025c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000260:	fb00 fc0c 	mul.w	ip, r0, ip
 8000264:	b2a3      	uxth	r3, r4
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	459c      	cmp	ip, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f100 32ff 	add.w	r2, r0, #4294967295
 8000274:	f080 80d7 	bcs.w	8000426 <__udivmoddi4+0x232>
 8000278:	459c      	cmp	ip, r3
 800027a:	f240 80d4 	bls.w	8000426 <__udivmoddi4+0x232>
 800027e:	443b      	add	r3, r7
 8000280:	3802      	subs	r0, #2
 8000282:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000286:	2100      	movs	r1, #0
 8000288:	eba3 030c 	sub.w	r3, r3, ip
 800028c:	b11d      	cbz	r5, 8000296 <__udivmoddi4+0xa2>
 800028e:	2200      	movs	r2, #0
 8000290:	40f3      	lsrs	r3, r6
 8000292:	e9c5 3200 	strd	r3, r2, [r5]
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d905      	bls.n	80002aa <__udivmoddi4+0xb6>
 800029e:	b10d      	cbz	r5, 80002a4 <__udivmoddi4+0xb0>
 80002a0:	e9c5 0100 	strd	r0, r1, [r5]
 80002a4:	2100      	movs	r1, #0
 80002a6:	4608      	mov	r0, r1
 80002a8:	e7f5      	b.n	8000296 <__udivmoddi4+0xa2>
 80002aa:	fab3 f183 	clz	r1, r3
 80002ae:	2900      	cmp	r1, #0
 80002b0:	d146      	bne.n	8000340 <__udivmoddi4+0x14c>
 80002b2:	4573      	cmp	r3, lr
 80002b4:	d302      	bcc.n	80002bc <__udivmoddi4+0xc8>
 80002b6:	4282      	cmp	r2, r0
 80002b8:	f200 8108 	bhi.w	80004cc <__udivmoddi4+0x2d8>
 80002bc:	1a84      	subs	r4, r0, r2
 80002be:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c2:	2001      	movs	r0, #1
 80002c4:	4690      	mov	r8, r2
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	d0e5      	beq.n	8000296 <__udivmoddi4+0xa2>
 80002ca:	e9c5 4800 	strd	r4, r8, [r5]
 80002ce:	e7e2      	b.n	8000296 <__udivmoddi4+0xa2>
 80002d0:	2a00      	cmp	r2, #0
 80002d2:	f000 8091 	beq.w	80003f8 <__udivmoddi4+0x204>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f040 80a5 	bne.w	800042a <__udivmoddi4+0x236>
 80002e0:	1a8a      	subs	r2, r1, r2
 80002e2:	2101      	movs	r1, #1
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ea:	b280      	uxth	r0, r0
 80002ec:	b2bc      	uxth	r4, r7
 80002ee:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f2:	fb0e 221c 	mls	r2, lr, ip, r2
 80002f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fa:	fb04 f20c 	mul.w	r2, r4, ip
 80002fe:	429a      	cmp	r2, r3
 8000300:	d907      	bls.n	8000312 <__udivmoddi4+0x11e>
 8000302:	18fb      	adds	r3, r7, r3
 8000304:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x11c>
 800030a:	429a      	cmp	r2, r3
 800030c:	f200 80e3 	bhi.w	80004d6 <__udivmoddi4+0x2e2>
 8000310:	46c4      	mov	ip, r8
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	fbb3 f2fe 	udiv	r2, r3, lr
 8000318:	fb0e 3312 	mls	r3, lr, r2, r3
 800031c:	fb02 f404 	mul.w	r4, r2, r4
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	429c      	cmp	r4, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x144>
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	f102 30ff 	add.w	r0, r2, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x142>
 8000330:	429c      	cmp	r4, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2dc>
 8000336:	4602      	mov	r2, r0
 8000338:	1b1b      	subs	r3, r3, r4
 800033a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800033e:	e7a5      	b.n	800028c <__udivmoddi4+0x98>
 8000340:	f1c1 0620 	rsb	r6, r1, #32
 8000344:	408b      	lsls	r3, r1
 8000346:	fa22 f706 	lsr.w	r7, r2, r6
 800034a:	431f      	orrs	r7, r3
 800034c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000350:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000354:	fbba f8f9 	udiv	r8, sl, r9
 8000358:	fa0e fe01 	lsl.w	lr, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fb09 aa18 	mls	sl, r9, r8, sl
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	ea43 030e 	orr.w	r3, r3, lr
 800036c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000370:	fb08 f00c 	mul.w	r0, r8, ip
 8000374:	0c1c      	lsrs	r4, r3, #16
 8000376:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800037a:	42a0      	cmp	r0, r4
 800037c:	fa02 f201 	lsl.w	r2, r2, r1
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x1a4>
 8000382:	193c      	adds	r4, r7, r4
 8000384:	f108 3aff 	add.w	sl, r8, #4294967295
 8000388:	f080 809e 	bcs.w	80004c8 <__udivmoddi4+0x2d4>
 800038c:	42a0      	cmp	r0, r4
 800038e:	f240 809b 	bls.w	80004c8 <__udivmoddi4+0x2d4>
 8000392:	f1a8 0802 	sub.w	r8, r8, #2
 8000396:	443c      	add	r4, r7
 8000398:	1a24      	subs	r4, r4, r0
 800039a:	b298      	uxth	r0, r3
 800039c:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a0:	fb09 4413 	mls	r4, r9, r3, r4
 80003a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003a8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ac:	45a4      	cmp	ip, r4
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003b6:	f080 8085 	bcs.w	80004c4 <__udivmoddi4+0x2d0>
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	f240 8082 	bls.w	80004c4 <__udivmoddi4+0x2d0>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	443c      	add	r4, r7
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	eba4 040c 	sub.w	r4, r4, ip
 80003cc:	fba0 8c02 	umull	r8, ip, r0, r2
 80003d0:	4564      	cmp	r4, ip
 80003d2:	4643      	mov	r3, r8
 80003d4:	46e1      	mov	r9, ip
 80003d6:	d364      	bcc.n	80004a2 <__udivmoddi4+0x2ae>
 80003d8:	d061      	beq.n	800049e <__udivmoddi4+0x2aa>
 80003da:	b15d      	cbz	r5, 80003f4 <__udivmoddi4+0x200>
 80003dc:	ebbe 0203 	subs.w	r2, lr, r3
 80003e0:	eb64 0409 	sbc.w	r4, r4, r9
 80003e4:	fa04 f606 	lsl.w	r6, r4, r6
 80003e8:	fa22 f301 	lsr.w	r3, r2, r1
 80003ec:	431e      	orrs	r6, r3
 80003ee:	40cc      	lsrs	r4, r1
 80003f0:	e9c5 6400 	strd	r6, r4, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	e74e      	b.n	8000296 <__udivmoddi4+0xa2>
 80003f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fc:	0c01      	lsrs	r1, r0, #16
 80003fe:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000402:	b280      	uxth	r0, r0
 8000404:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000408:	463b      	mov	r3, r7
 800040a:	fbb1 f1f7 	udiv	r1, r1, r7
 800040e:	4638      	mov	r0, r7
 8000410:	463c      	mov	r4, r7
 8000412:	46b8      	mov	r8, r7
 8000414:	46be      	mov	lr, r7
 8000416:	2620      	movs	r6, #32
 8000418:	eba2 0208 	sub.w	r2, r2, r8
 800041c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000420:	e765      	b.n	80002ee <__udivmoddi4+0xfa>
 8000422:	4601      	mov	r1, r0
 8000424:	e717      	b.n	8000256 <__udivmoddi4+0x62>
 8000426:	4610      	mov	r0, r2
 8000428:	e72b      	b.n	8000282 <__udivmoddi4+0x8e>
 800042a:	f1c6 0120 	rsb	r1, r6, #32
 800042e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000432:	40b7      	lsls	r7, r6
 8000434:	fa0e fe06 	lsl.w	lr, lr, r6
 8000438:	fa20 f101 	lsr.w	r1, r0, r1
 800043c:	ea41 010e 	orr.w	r1, r1, lr
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fbbc f8fe 	udiv	r8, ip, lr
 8000448:	b2bc      	uxth	r4, r7
 800044a:	fb0e cc18 	mls	ip, lr, r8, ip
 800044e:	fb08 f904 	mul.w	r9, r8, r4
 8000452:	0c0a      	lsrs	r2, r1, #16
 8000454:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000458:	40b0      	lsls	r0, r6
 800045a:	4591      	cmp	r9, r2
 800045c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000460:	b280      	uxth	r0, r0
 8000462:	d93e      	bls.n	80004e2 <__udivmoddi4+0x2ee>
 8000464:	18ba      	adds	r2, r7, r2
 8000466:	f108 3cff 	add.w	ip, r8, #4294967295
 800046a:	d201      	bcs.n	8000470 <__udivmoddi4+0x27c>
 800046c:	4591      	cmp	r9, r2
 800046e:	d81f      	bhi.n	80004b0 <__udivmoddi4+0x2bc>
 8000470:	eba2 0209 	sub.w	r2, r2, r9
 8000474:	fbb2 f9fe 	udiv	r9, r2, lr
 8000478:	fb09 f804 	mul.w	r8, r9, r4
 800047c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000480:	b28a      	uxth	r2, r1
 8000482:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000486:	4542      	cmp	r2, r8
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ea>
 800048a:	18ba      	adds	r2, r7, r2
 800048c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000490:	d2c2      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000492:	4542      	cmp	r2, r8
 8000494:	d2c0      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000496:	f1a9 0102 	sub.w	r1, r9, #2
 800049a:	443a      	add	r2, r7
 800049c:	e7bc      	b.n	8000418 <__udivmoddi4+0x224>
 800049e:	45c6      	cmp	lr, r8
 80004a0:	d29b      	bcs.n	80003da <__udivmoddi4+0x1e6>
 80004a2:	ebb8 0302 	subs.w	r3, r8, r2
 80004a6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	46e1      	mov	r9, ip
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e6>
 80004b0:	eba7 0909 	sub.w	r9, r7, r9
 80004b4:	444a      	add	r2, r9
 80004b6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ba:	f1a8 0c02 	sub.w	ip, r8, #2
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	e7db      	b.n	800047c <__udivmoddi4+0x288>
 80004c4:	4603      	mov	r3, r0
 80004c6:	e77d      	b.n	80003c4 <__udivmoddi4+0x1d0>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e765      	b.n	8000398 <__udivmoddi4+0x1a4>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e6fa      	b.n	80002c6 <__udivmoddi4+0xd2>
 80004d0:	443b      	add	r3, r7
 80004d2:	3a02      	subs	r2, #2
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x144>
 80004d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80004da:	443b      	add	r3, r7
 80004dc:	e719      	b.n	8000312 <__udivmoddi4+0x11e>
 80004de:	4649      	mov	r1, r9
 80004e0:	e79a      	b.n	8000418 <__udivmoddi4+0x224>
 80004e2:	eba2 0209 	sub.w	r2, r2, r9
 80004e6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ea:	46c4      	mov	ip, r8
 80004ec:	fb09 f804 	mul.w	r8, r9, r4
 80004f0:	e7c4      	b.n	800047c <__udivmoddi4+0x288>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000500:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000504:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d013      	beq.n	8000538 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000510:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000514:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000518:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00b      	beq.n	8000538 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	e000      	b.n	8000524 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000522:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000524:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f9      	beq.n	8000522 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <SysTick_Handler>:

//tick counter
uint64_t ticks;

/** SysTick Interruption Handler */
void SysTick_Handler(void){
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	ticks++;
 8000548:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <SysTick_Handler+0x20>)
 800054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800054e:	1c50      	adds	r0, r2, #1
 8000550:	f143 0100 	adc.w	r1, r3, #0
 8000554:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <SysTick_Handler+0x20>)
 8000556:	e9c3 0100 	strd	r0, r1, [r3]
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000088 	.word	0x20000088

08000568 <msDelay>:

/**
 * Delays execution for given number of milliseconds.
 */
void msDelay(uint64_t ms){
 8000568:	b4b0      	push	{r4, r5, r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	e9c7 0100 	strd	r0, r1, [r7]
	// Oblicz docelowy licznik
	uint64_t targetTick = ticks + ms;
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <msDelay+0x40>)
 8000574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800057c:	1884      	adds	r4, r0, r2
 800057e:	eb41 0503 	adc.w	r5, r1, r3
 8000582:	e9c7 4502 	strd	r4, r5, [r7, #8]
	// Czekaj, aż licznik osiągnie docelową wartość
	while(ticks < targetTick){
 8000586:	bf00      	nop
 8000588:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <msDelay+0x40>)
 800058a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800058e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000592:	4290      	cmp	r0, r2
 8000594:	eb71 0303 	sbcs.w	r3, r1, r3
 8000598:	d3f6      	bcc.n	8000588 <msDelay+0x20>
		;
	}

}
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bcb0      	pop	{r4, r5, r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000088 	.word	0x20000088

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 f9d4 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f81a 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f85e 	bl	8000678 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(Led_Green_GPIO_Port, Led_Green_Pin);
 80005bc:	2104      	movs	r1, #4
 80005be:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <main+0x38>)
 80005c0:	f000 fcc2 	bl	8000f48 <HAL_GPIO_TogglePin>
	  msDelay(500);
 80005c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c8:	f04f 0100 	mov.w	r1, #0
 80005cc:	f7ff ffcc 	bl	8000568 <msDelay>
	  printf("Tick: %lu\n", HAL_GetTick());
 80005d0:	f000 fa16 	bl	8000a00 <HAL_GetTick>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4619      	mov	r1, r3
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <main+0x3c>)
 80005da:	f001 f9dd 	bl	8001998 <iprintf>
	  HAL_GPIO_TogglePin(Led_Green_GPIO_Port, Led_Green_Pin);
 80005de:	bf00      	nop
 80005e0:	e7ec      	b.n	80005bc <main+0x10>
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000
 80005e8:	0800269c 	.word	0x0800269c

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b092      	sub	sp, #72	@ 0x48
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fa21 	bl	8001a42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000612:	2301      	movs	r3, #1
 8000614:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000624:	23c0      	movs	r3, #192	@ 0xc0
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000628:	2304      	movs	r3, #4
 800062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0318 	add.w	r3, r7, #24
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fca1 	bl	8000f7c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000640:	f000 f869 	bl	8000716 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000650:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2103      	movs	r1, #3
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fedf 	bl	8001424 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800066c:	f000 f853 	bl	8000716 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3748      	adds	r7, #72	@ 0x48
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_GPIO_Init+0x7c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a17      	ldr	r2, [pc, #92]	@ (80006f4 <MX_GPIO_Init+0x7c>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_GPIO_Init+0x7c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_GPIO_Init+0x7c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a10      	ldr	r2, [pc, #64]	@ (80006f4 <MX_GPIO_Init+0x7c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_GPIO_Init+0x7c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_Red_Pin|Led_Green_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2106      	movs	r1, #6
 80006ca:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <MX_GPIO_Init+0x80>)
 80006cc:	f000 fc24 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led_Red_Pin Led_Green_Pin */
  GPIO_InitStruct.Pin = Led_Red_Pin|Led_Green_Pin;
 80006d0:	2306      	movs	r3, #6
 80006d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_GPIO_Init+0x80>)
 80006e8:	f000 fa78 	bl	8000bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000

080006fc <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    return ITM_SendChar(ch);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fef6 	bl	80004f8 <ITM_SendChar>
 800070c:	4603      	mov	r3, r0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071a:	b672      	cpsid	i
}
 800071c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071e:	bf00      	nop
 8000720:	e7fd      	b.n	800071e <Error_Handler+0x8>
	...

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_MspInit+0x48>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000732:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <HAL_MspInit+0x48>)
 8000734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000738:	6453      	str	r3, [r2, #68]	@ 0x44
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_MspInit+0x48>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <HAL_MspInit+0x48>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	4a07      	ldr	r2, [pc, #28]	@ (800076c <HAL_MspInit+0x48>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000754:	6413      	str	r3, [r2, #64]	@ 0x40
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <HAL_MspInit+0x48>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	40023800 	.word	0x40023800

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00a      	b.n	80007e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ce:	f3af 8000 	nop.w
 80007d2:	4601      	mov	r1, r0
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	b2ca      	uxtb	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dbf0      	blt.n	80007ce <_read+0x12>
  }

  return len;
 80007ec:	687b      	ldr	r3, [r7, #4]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e009      	b.n	800081c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	60ba      	str	r2, [r7, #8]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff73 	bl	80006fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	dbf1      	blt.n	8000808 <_write+0x12>
  }
  return len;
 8000824:	687b      	ldr	r3, [r7, #4]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_close>:

int _close(int file)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000854:	605a      	str	r2, [r3, #4]
  return 0;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <_isatty>:

int _isatty(int file)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000876:	b480      	push	{r7}
 8000878:	b085      	sub	sp, #20
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
	...

08000890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000898:	4a14      	ldr	r2, [pc, #80]	@ (80008ec <_sbrk+0x5c>)
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <_sbrk+0x60>)
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <_sbrk+0x64>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <_sbrk+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d207      	bcs.n	80008d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c0:	f001 f90e 	bl	8001ae0 <__errno>
 80008c4:	4603      	mov	r3, r0
 80008c6:	220c      	movs	r2, #12
 80008c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	e009      	b.n	80008e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <_sbrk+0x64>)
 80008e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20020000 	.word	0x20020000
 80008f0:	00000400 	.word	0x00000400
 80008f4:	20000090 	.word	0x20000090
 80008f8:	200001e8 	.word	0x200001e8

080008fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000940 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 800090c:	f7ff fff6 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	@ (8000954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000936:	f001 f8d9 	bl	8001aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff fe37 	bl	80005ac <main>
  bx  lr
 800093e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800094c:	080026fc 	.word	0x080026fc
  ldr r2, =_sbss
 8000950:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000954:	200001e4 	.word	0x200001e4

08000958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <HAL_Init+0x40>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_Init+0x40>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	@ (800099c <HAL_Init+0x40>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f8f5 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	200f      	movs	r0, #15
 800098c:	f000 f808 	bl	80009a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff fec8 	bl	8000724 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f8ff 	bl	8000bc2 <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f8d5 	bl	8000b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b02      	ldr	r3, [pc, #8]	@ (8000a10 <HAL_GetTick+0x10>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000094 	.word	0x20000094

08000a14 <__NVIC_SetPriorityGrouping>:
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_SetPriority>:
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	@ (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	@ (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	@ 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Config>:
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff90 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff49 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9c:	f7ff ff5e 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f7ff ff90 	bl	8000acc <NVIC_EncodePriority>
 8000bac:	4602      	mov	r2, r0
 8000bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff5f 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ffb0 	bl	8000b30 <SysTick_Config>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bea:	e16f      	b.n	8000ecc <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8161 	beq.w	8000ec6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d005      	beq.n	8000c1c <HAL_GPIO_Init+0x40>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d130      	bne.n	8000c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	f003 0201 	and.w	r2, r3, #1
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d017      	beq.n	8000cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d123      	bne.n	8000d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	6939      	ldr	r1, [r7, #16]
 8000d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0203 	and.w	r2, r3, #3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 80bb 	beq.w	8000ec6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	4b64      	ldr	r3, [pc, #400]	@ (8000ee8 <HAL_GPIO_Init+0x30c>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d58:	4a63      	ldr	r2, [pc, #396]	@ (8000ee8 <HAL_GPIO_Init+0x30c>)
 8000d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d60:	4b61      	ldr	r3, [pc, #388]	@ (8000ee8 <HAL_GPIO_Init+0x30c>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d6c:	4a5f      	ldr	r2, [pc, #380]	@ (8000eec <HAL_GPIO_Init+0x310>)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a57      	ldr	r2, [pc, #348]	@ (8000ef0 <HAL_GPIO_Init+0x314>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d031      	beq.n	8000dfc <HAL_GPIO_Init+0x220>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a56      	ldr	r2, [pc, #344]	@ (8000ef4 <HAL_GPIO_Init+0x318>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d02b      	beq.n	8000df8 <HAL_GPIO_Init+0x21c>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a55      	ldr	r2, [pc, #340]	@ (8000ef8 <HAL_GPIO_Init+0x31c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d025      	beq.n	8000df4 <HAL_GPIO_Init+0x218>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a54      	ldr	r2, [pc, #336]	@ (8000efc <HAL_GPIO_Init+0x320>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d01f      	beq.n	8000df0 <HAL_GPIO_Init+0x214>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a53      	ldr	r2, [pc, #332]	@ (8000f00 <HAL_GPIO_Init+0x324>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d019      	beq.n	8000dec <HAL_GPIO_Init+0x210>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a52      	ldr	r2, [pc, #328]	@ (8000f04 <HAL_GPIO_Init+0x328>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d013      	beq.n	8000de8 <HAL_GPIO_Init+0x20c>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a51      	ldr	r2, [pc, #324]	@ (8000f08 <HAL_GPIO_Init+0x32c>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d00d      	beq.n	8000de4 <HAL_GPIO_Init+0x208>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a50      	ldr	r2, [pc, #320]	@ (8000f0c <HAL_GPIO_Init+0x330>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d007      	beq.n	8000de0 <HAL_GPIO_Init+0x204>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a4f      	ldr	r2, [pc, #316]	@ (8000f10 <HAL_GPIO_Init+0x334>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d101      	bne.n	8000ddc <HAL_GPIO_Init+0x200>
 8000dd8:	2308      	movs	r3, #8
 8000dda:	e010      	b.n	8000dfe <HAL_GPIO_Init+0x222>
 8000ddc:	2309      	movs	r3, #9
 8000dde:	e00e      	b.n	8000dfe <HAL_GPIO_Init+0x222>
 8000de0:	2307      	movs	r3, #7
 8000de2:	e00c      	b.n	8000dfe <HAL_GPIO_Init+0x222>
 8000de4:	2306      	movs	r3, #6
 8000de6:	e00a      	b.n	8000dfe <HAL_GPIO_Init+0x222>
 8000de8:	2305      	movs	r3, #5
 8000dea:	e008      	b.n	8000dfe <HAL_GPIO_Init+0x222>
 8000dec:	2304      	movs	r3, #4
 8000dee:	e006      	b.n	8000dfe <HAL_GPIO_Init+0x222>
 8000df0:	2303      	movs	r3, #3
 8000df2:	e004      	b.n	8000dfe <HAL_GPIO_Init+0x222>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e002      	b.n	8000dfe <HAL_GPIO_Init+0x222>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <HAL_GPIO_Init+0x222>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	f002 0203 	and.w	r2, r2, #3
 8000e04:	0092      	lsls	r2, r2, #2
 8000e06:	4093      	lsls	r3, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e10:	4936      	ldr	r1, [pc, #216]	@ (8000eec <HAL_GPIO_Init+0x310>)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f14 <HAL_GPIO_Init+0x338>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e42:	4a34      	ldr	r2, [pc, #208]	@ (8000f14 <HAL_GPIO_Init+0x338>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e48:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <HAL_GPIO_Init+0x338>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e6c:	4a29      	ldr	r2, [pc, #164]	@ (8000f14 <HAL_GPIO_Init+0x338>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e72:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <HAL_GPIO_Init+0x338>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e96:	4a1f      	ldr	r2, [pc, #124]	@ (8000f14 <HAL_GPIO_Init+0x338>)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_GPIO_Init+0x338>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <HAL_GPIO_Init+0x338>)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f47f ae88 	bne.w	8000bec <HAL_GPIO_Init+0x10>
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40021400 	.word	0x40021400
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40021c00 	.word	0x40021c00
 8000f10:	40022000 	.word	0x40022000
 8000f14:	40013c00 	.word	0x40013c00

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f34:	e003      	b.n	8000f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	619a      	str	r2, [r3, #24]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	041a      	lsls	r2, r3, #16
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43d9      	mvns	r1, r3
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	400b      	ands	r3, r1
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
	...

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e23b      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d050      	beq.n	800103c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f9a:	4b9e      	ldr	r3, [pc, #632]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d00c      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa6:	4b9b      	ldr	r3, [pc, #620]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d112      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fb2:	4b98      	ldr	r3, [pc, #608]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	4b94      	ldr	r3, [pc, #592]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d036      	beq.n	800103a <HAL_RCC_OscConfig+0xbe>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d132      	bne.n	800103a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e216      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8001218 <HAL_RCC_OscConfig+0x29c>)
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d013      	beq.n	8001012 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fd09 	bl	8000a00 <HAL_GetTick>
 8000fee:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fd05 	bl	8000a00 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	@ 0x64
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e200      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001004:	4b83      	ldr	r3, [pc, #524]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x76>
 8001010:	e014      	b.n	800103c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fcf5 	bl	8000a00 <HAL_GetTick>
 8001016:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101a:	f7ff fcf1 	bl	8000a00 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b64      	cmp	r3, #100	@ 0x64
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e1ec      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102c:	4b79      	ldr	r3, [pc, #484]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f0      	bne.n	800101a <HAL_RCC_OscConfig+0x9e>
 8001038:	e000      	b.n	800103c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d077      	beq.n	8001138 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001048:	4b72      	ldr	r3, [pc, #456]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00b      	beq.n	800106c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001054:	4b6f      	ldr	r3, [pc, #444]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800105c:	2b08      	cmp	r3, #8
 800105e:	d126      	bne.n	80010ae <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001060:	4b6c      	ldr	r3, [pc, #432]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d120      	bne.n	80010ae <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106c:	4b69      	ldr	r3, [pc, #420]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_OscConfig+0x108>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d001      	beq.n	8001084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e1c0      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001084:	4b63      	ldr	r3, [pc, #396]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	21f8      	movs	r1, #248	@ 0xf8
 8001092:	60f9      	str	r1, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001094:	68f9      	ldr	r1, [r7, #12]
 8001096:	fa91 f1a1 	rbit	r1, r1
 800109a:	6139      	str	r1, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800109c:	6939      	ldr	r1, [r7, #16]
 800109e:	fab1 f181 	clz	r1, r1
 80010a2:	b2c9      	uxtb	r1, r1
 80010a4:	408b      	lsls	r3, r1
 80010a6:	495b      	ldr	r1, [pc, #364]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ac:	e044      	b.n	8001138 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d02a      	beq.n	800110c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b6:	4b59      	ldr	r3, [pc, #356]	@ (800121c <HAL_RCC_OscConfig+0x2a0>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fca0 	bl	8000a00 <HAL_GetTick>
 80010c0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc9c 	bl	8000a00 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e197      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	21f8      	movs	r1, #248	@ 0xf8
 80010f0:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f2:	6979      	ldr	r1, [r7, #20]
 80010f4:	fa91 f1a1 	rbit	r1, r1
 80010f8:	61b9      	str	r1, [r7, #24]
  return result;
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	fab1 f181 	clz	r1, r1
 8001100:	b2c9      	uxtb	r1, r1
 8001102:	408b      	lsls	r3, r1
 8001104:	4943      	ldr	r1, [pc, #268]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
 800110a:	e015      	b.n	8001138 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110c:	4b43      	ldr	r3, [pc, #268]	@ (800121c <HAL_RCC_OscConfig+0x2a0>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fc75 	bl	8000a00 <HAL_GetTick>
 8001116:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800111a:	f7ff fc71 	bl	8000a00 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e16c      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112c:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f0      	bne.n	800111a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d030      	beq.n	80011a6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d016      	beq.n	800117a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114c:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff fc55 	bl	8000a00 <HAL_GetTick>
 8001156:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115a:	f7ff fc51 	bl	8000a00 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e14c      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 800116e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x1de>
 8001178:	e015      	b.n	80011a6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117a:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <HAL_RCC_OscConfig+0x2a4>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fc3e 	bl	8000a00 <HAL_GetTick>
 8001184:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc3a 	bl	8000a00 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e135      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 800119c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8087 	beq.w	80012c2 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ba:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d110      	bne.n	80011e8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a11      	ldr	r2, [pc, #68]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_RCC_OscConfig+0x298>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_RCC_OscConfig+0x2a8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <HAL_RCC_OscConfig+0x2a8>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_RCC_OscConfig+0x2a8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d122      	bne.n	8001246 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <HAL_RCC_OscConfig+0x2a8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <HAL_RCC_OscConfig+0x2a8>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120c:	f7ff fbf8 	bl	8000a00 <HAL_GetTick>
 8001210:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001212:	e012      	b.n	800123a <HAL_RCC_OscConfig+0x2be>
 8001214:	40023800 	.word	0x40023800
 8001218:	40023802 	.word	0x40023802
 800121c:	42470000 	.word	0x42470000
 8001220:	42470e80 	.word	0x42470e80
 8001224:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001228:	f7ff fbea 	bl	8000a00 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e0e5      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123a:	4b75      	ldr	r3, [pc, #468]	@ (8001410 <HAL_RCC_OscConfig+0x494>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	4b72      	ldr	r3, [pc, #456]	@ (8001414 <HAL_RCC_OscConfig+0x498>)
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d015      	beq.n	8001284 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fbd2 	bl	8000a00 <HAL_GetTick>
 800125c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125e:	e00a      	b.n	8001276 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001260:	f7ff fbce 	bl	8000a00 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e0c7      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001276:	4b68      	ldr	r3, [pc, #416]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 8001278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0ee      	beq.n	8001260 <HAL_RCC_OscConfig+0x2e4>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001284:	f7ff fbbc 	bl	8000a00 <HAL_GetTick>
 8001288:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	f7ff fbb8 	bl	8000a00 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e0b1      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ee      	bne.n	800128c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d105      	bne.n	80012c2 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b6:	4b58      	ldr	r3, [pc, #352]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	4a57      	ldr	r2, [pc, #348]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 80012bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 809c 	beq.w	8001404 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012cc:	4b52      	ldr	r3, [pc, #328]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d061      	beq.n	800139c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d146      	bne.n	800136e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e0:	4b4e      	ldr	r3, [pc, #312]	@ (800141c <HAL_RCC_OscConfig+0x4a0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb8b 	bl	8000a00 <HAL_GetTick>
 80012ea:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff fb87 	bl	8000a00 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b64      	cmp	r3, #100	@ 0x64
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e082      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001300:	4b45      	ldr	r3, [pc, #276]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130c:	4b42      	ldr	r3, [pc, #264]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <HAL_RCC_OscConfig+0x4a4>)
 8001312:	4013      	ands	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	69d1      	ldr	r1, [r2, #28]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6a12      	ldr	r2, [r2, #32]
 800131c:	4311      	orrs	r1, r2
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001322:	0192      	lsls	r2, r2, #6
 8001324:	4311      	orrs	r1, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800132a:	0612      	lsls	r2, r2, #24
 800132c:	4311      	orrs	r1, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001332:	0852      	lsrs	r2, r2, #1
 8001334:	3a01      	subs	r2, #1
 8001336:	0412      	lsls	r2, r2, #16
 8001338:	430a      	orrs	r2, r1
 800133a:	4937      	ldr	r1, [pc, #220]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001340:	4b36      	ldr	r3, [pc, #216]	@ (800141c <HAL_RCC_OscConfig+0x4a0>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fb5b 	bl	8000a00 <HAL_GetTick>
 800134a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fb57 	bl	8000a00 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b64      	cmp	r3, #100	@ 0x64
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e052      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001360:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x3d2>
 800136c:	e04a      	b.n	8001404 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <HAL_RCC_OscConfig+0x4a0>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fb44 	bl	8000a00 <HAL_GetTick>
 8001378:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff fb40 	bl	8000a00 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e03b      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138e:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x400>
 800139a:	e033      	b.n	8001404 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e02e      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_RCC_OscConfig+0x49c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d121      	bne.n	8001400 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d11a      	bne.n	8001400 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013d0:	4013      	ands	r3, r2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013d6:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013d8:	4293      	cmp	r3, r2
 80013da:	d111      	bne.n	8001400 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e6:	085b      	lsrs	r3, r3, #1
 80013e8:	3b01      	subs	r3, #1
 80013ea:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d107      	bne.n	8001400 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fa:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000
 8001414:	40023870 	.word	0x40023870
 8001418:	40023800 	.word	0x40023800
 800141c:	42470060 	.word	0x42470060
 8001420:	f0bc8000 	.word	0xf0bc8000

08001424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0d2      	b.n	80015de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4b6b      	ldr	r3, [pc, #428]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d90c      	bls.n	8001460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b68      	ldr	r3, [pc, #416]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b66      	ldr	r3, [pc, #408]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0be      	b.n	80015de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b5c      	ldr	r3, [pc, #368]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a5b      	ldr	r2, [pc, #364]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 800147e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001490:	4b56      	ldr	r3, [pc, #344]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a55      	ldr	r2, [pc, #340]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 8001496:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800149a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b53      	ldr	r3, [pc, #332]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4950      	ldr	r1, [pc, #320]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d040      	beq.n	800153c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b4a      	ldr	r3, [pc, #296]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e085      	b.n	80015de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b44      	ldr	r3, [pc, #272]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e079      	b.n	80015de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b40      	ldr	r3, [pc, #256]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e071      	b.n	80015de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4939      	ldr	r1, [pc, #228]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff fa78 	bl	8000a00 <HAL_GetTick>
 8001510:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff fa74 	bl	8000a00 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e059      	b.n	80015de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d20c      	bcs.n	8001564 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e03c      	b.n	80015de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001570:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	491b      	ldr	r1, [pc, #108]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4913      	ldr	r1, [pc, #76]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80015a2:	f000 f82b 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 80015a6:	4601      	mov	r1, r0
 80015a8:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015b0:	22f0      	movs	r2, #240	@ 0xf0
 80015b2:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	fa92 f2a2 	rbit	r2, r2
 80015ba:	613a      	str	r2, [r7, #16]
  return result;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	fab2 f282 	clz	r2, r2
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	40d3      	lsrs	r3, r2
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <HAL_RCC_ClockConfig+0x1cc>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	fa21 f303 	lsr.w	r3, r1, r3
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <HAL_RCC_ClockConfig+0x1d0>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_ClockConfig+0x1d4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f9e2 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00
 80015ec:	40023800 	.word	0x40023800
 80015f0:	080026a8 	.word	0x080026a8
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001600:	b094      	sub	sp, #80	@ 0x50
 8001602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	647b      	str	r3, [r7, #68]	@ 0x44
 8001608:	2300      	movs	r3, #0
 800160a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800160c:	2300      	movs	r3, #0
 800160e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001614:	4b7c      	ldr	r3, [pc, #496]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b08      	cmp	r3, #8
 800161e:	d00d      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x40>
 8001620:	2b08      	cmp	r3, #8
 8001622:	f200 80e7 	bhi.w	80017f4 <HAL_RCC_GetSysClockFreq+0x1f8>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x34>
 800162a:	2b04      	cmp	r3, #4
 800162c:	d003      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x3a>
 800162e:	e0e1      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b76      	ldr	r3, [pc, #472]	@ (800180c <HAL_RCC_GetSysClockFreq+0x210>)
 8001632:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001634:	e0e1      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001636:	4b76      	ldr	r3, [pc, #472]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x214>)
 8001638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800163a:	e0de      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163c:	4b72      	ldr	r3, [pc, #456]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x20c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001644:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001646:	4b70      	ldr	r3, [pc, #448]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d065      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001652:	4b6d      	ldr	r3, [pc, #436]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	099b      	lsrs	r3, r3, #6
 8001658:	2200      	movs	r2, #0
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800165c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800165e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001664:	633b      	str	r3, [r7, #48]	@ 0x30
 8001666:	2300      	movs	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	@ 0x34
 800166a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800166e:	4622      	mov	r2, r4
 8001670:	462b      	mov	r3, r5
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	0159      	lsls	r1, r3, #5
 800167c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001680:	0150      	lsls	r0, r2, #5
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4621      	mov	r1, r4
 8001688:	1a51      	subs	r1, r2, r1
 800168a:	6139      	str	r1, [r7, #16]
 800168c:	4629      	mov	r1, r5
 800168e:	eb63 0301 	sbc.w	r3, r3, r1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016a0:	4659      	mov	r1, fp
 80016a2:	018b      	lsls	r3, r1, #6
 80016a4:	4651      	mov	r1, sl
 80016a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016aa:	4651      	mov	r1, sl
 80016ac:	018a      	lsls	r2, r1, #6
 80016ae:	46d4      	mov	ip, sl
 80016b0:	ebb2 080c 	subs.w	r8, r2, ip
 80016b4:	4659      	mov	r1, fp
 80016b6:	eb63 0901 	sbc.w	r9, r3, r1
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ce:	4690      	mov	r8, r2
 80016d0:	4699      	mov	r9, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	eb18 0303 	adds.w	r3, r8, r3
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	462b      	mov	r3, r5
 80016dc:	eb49 0303 	adc.w	r3, r9, r3
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016ee:	4629      	mov	r1, r5
 80016f0:	024b      	lsls	r3, r1, #9
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	4604      	mov	r4, r0
 80016f8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80016fc:	4601      	mov	r1, r0
 80016fe:	024a      	lsls	r2, r1, #9
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001706:	2200      	movs	r2, #0
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800170a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800170c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001710:	f7fe fd58 	bl	80001c4 <__aeabi_uldivmod>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4613      	mov	r3, r2
 800171a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800171c:	e05c      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171e:	4b3a      	ldr	r3, [pc, #232]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	099b      	lsrs	r3, r3, #6
 8001724:	2200      	movs	r2, #0
 8001726:	4618      	mov	r0, r3
 8001728:	4611      	mov	r1, r2
 800172a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
 8001734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001738:	4642      	mov	r2, r8
 800173a:	464b      	mov	r3, r9
 800173c:	f04f 0000 	mov.w	r0, #0
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	0159      	lsls	r1, r3, #5
 8001746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800174a:	0150      	lsls	r0, r2, #5
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	46c4      	mov	ip, r8
 8001752:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001756:	4640      	mov	r0, r8
 8001758:	4649      	mov	r1, r9
 800175a:	468c      	mov	ip, r1
 800175c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800176c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001774:	ebb2 040a 	subs.w	r4, r2, sl
 8001778:	eb63 050b 	sbc.w	r5, r3, fp
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	00eb      	lsls	r3, r5, #3
 8001786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800178a:	00e2      	lsls	r2, r4, #3
 800178c:	4614      	mov	r4, r2
 800178e:	461d      	mov	r5, r3
 8001790:	4603      	mov	r3, r0
 8001792:	18e3      	adds	r3, r4, r3
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	460b      	mov	r3, r1
 8001798:	eb45 0303 	adc.w	r3, r5, r3
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017aa:	4629      	mov	r1, r5
 80017ac:	028b      	lsls	r3, r1, #10
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	4604      	mov	r4, r0
 80017b4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80017b8:	4601      	mov	r1, r0
 80017ba:	028a      	lsls	r2, r1, #10
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017c2:	2200      	movs	r2, #0
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	61fa      	str	r2, [r7, #28]
 80017c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017cc:	f7fe fcfa 	bl	80001c4 <__aeabi_uldivmod>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4613      	mov	r3, r2
 80017d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x20c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	3301      	adds	r3, #1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80017e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017f2:	e002      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_RCC_GetSysClockFreq+0x210>)
 80017f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3750      	adds	r7, #80	@ 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	00f42400 	.word	0x00f42400
 8001810:	007a1200 	.word	0x007a1200

08001814 <std>:
 8001814:	2300      	movs	r3, #0
 8001816:	b510      	push	{r4, lr}
 8001818:	4604      	mov	r4, r0
 800181a:	e9c0 3300 	strd	r3, r3, [r0]
 800181e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001822:	6083      	str	r3, [r0, #8]
 8001824:	8181      	strh	r1, [r0, #12]
 8001826:	6643      	str	r3, [r0, #100]	@ 0x64
 8001828:	81c2      	strh	r2, [r0, #14]
 800182a:	6183      	str	r3, [r0, #24]
 800182c:	4619      	mov	r1, r3
 800182e:	2208      	movs	r2, #8
 8001830:	305c      	adds	r0, #92	@ 0x5c
 8001832:	f000 f906 	bl	8001a42 <memset>
 8001836:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <std+0x58>)
 8001838:	6224      	str	r4, [r4, #32]
 800183a:	6263      	str	r3, [r4, #36]	@ 0x24
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <std+0x5c>)
 800183e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <std+0x60>)
 8001842:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <std+0x64>)
 8001846:	6323      	str	r3, [r4, #48]	@ 0x30
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <std+0x68>)
 800184a:	429c      	cmp	r4, r3
 800184c:	d006      	beq.n	800185c <std+0x48>
 800184e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001852:	4294      	cmp	r4, r2
 8001854:	d002      	beq.n	800185c <std+0x48>
 8001856:	33d0      	adds	r3, #208	@ 0xd0
 8001858:	429c      	cmp	r4, r3
 800185a:	d105      	bne.n	8001868 <std+0x54>
 800185c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001864:	f000 b966 	b.w	8001b34 <__retarget_lock_init_recursive>
 8001868:	bd10      	pop	{r4, pc}
 800186a:	bf00      	nop
 800186c:	080019bd 	.word	0x080019bd
 8001870:	080019df 	.word	0x080019df
 8001874:	08001a17 	.word	0x08001a17
 8001878:	08001a3b 	.word	0x08001a3b
 800187c:	20000098 	.word	0x20000098

08001880 <stdio_exit_handler>:
 8001880:	4a02      	ldr	r2, [pc, #8]	@ (800188c <stdio_exit_handler+0xc>)
 8001882:	4903      	ldr	r1, [pc, #12]	@ (8001890 <stdio_exit_handler+0x10>)
 8001884:	4803      	ldr	r0, [pc, #12]	@ (8001894 <stdio_exit_handler+0x14>)
 8001886:	f000 b869 	b.w	800195c <_fwalk_sglue>
 800188a:	bf00      	nop
 800188c:	2000000c 	.word	0x2000000c
 8001890:	080023c9 	.word	0x080023c9
 8001894:	2000001c 	.word	0x2000001c

08001898 <cleanup_stdio>:
 8001898:	6841      	ldr	r1, [r0, #4]
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <cleanup_stdio+0x34>)
 800189c:	b510      	push	{r4, lr}
 800189e:	4299      	cmp	r1, r3
 80018a0:	4604      	mov	r4, r0
 80018a2:	d001      	beq.n	80018a8 <cleanup_stdio+0x10>
 80018a4:	f000 fd90 	bl	80023c8 <_fflush_r>
 80018a8:	68a1      	ldr	r1, [r4, #8]
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <cleanup_stdio+0x38>)
 80018ac:	4299      	cmp	r1, r3
 80018ae:	d002      	beq.n	80018b6 <cleanup_stdio+0x1e>
 80018b0:	4620      	mov	r0, r4
 80018b2:	f000 fd89 	bl	80023c8 <_fflush_r>
 80018b6:	68e1      	ldr	r1, [r4, #12]
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <cleanup_stdio+0x3c>)
 80018ba:	4299      	cmp	r1, r3
 80018bc:	d004      	beq.n	80018c8 <cleanup_stdio+0x30>
 80018be:	4620      	mov	r0, r4
 80018c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018c4:	f000 bd80 	b.w	80023c8 <_fflush_r>
 80018c8:	bd10      	pop	{r4, pc}
 80018ca:	bf00      	nop
 80018cc:	20000098 	.word	0x20000098
 80018d0:	20000100 	.word	0x20000100
 80018d4:	20000168 	.word	0x20000168

080018d8 <global_stdio_init.part.0>:
 80018d8:	b510      	push	{r4, lr}
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <global_stdio_init.part.0+0x30>)
 80018dc:	4c0b      	ldr	r4, [pc, #44]	@ (800190c <global_stdio_init.part.0+0x34>)
 80018de:	4a0c      	ldr	r2, [pc, #48]	@ (8001910 <global_stdio_init.part.0+0x38>)
 80018e0:	4620      	mov	r0, r4
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	2104      	movs	r1, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	f7ff ff94 	bl	8001814 <std>
 80018ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80018f0:	2201      	movs	r2, #1
 80018f2:	2109      	movs	r1, #9
 80018f4:	f7ff ff8e 	bl	8001814 <std>
 80018f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80018fc:	2202      	movs	r2, #2
 80018fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001902:	2112      	movs	r1, #18
 8001904:	f7ff bf86 	b.w	8001814 <std>
 8001908:	200001d0 	.word	0x200001d0
 800190c:	20000098 	.word	0x20000098
 8001910:	08001881 	.word	0x08001881

08001914 <__sfp_lock_acquire>:
 8001914:	4801      	ldr	r0, [pc, #4]	@ (800191c <__sfp_lock_acquire+0x8>)
 8001916:	f000 b90e 	b.w	8001b36 <__retarget_lock_acquire_recursive>
 800191a:	bf00      	nop
 800191c:	200001d9 	.word	0x200001d9

08001920 <__sfp_lock_release>:
 8001920:	4801      	ldr	r0, [pc, #4]	@ (8001928 <__sfp_lock_release+0x8>)
 8001922:	f000 b909 	b.w	8001b38 <__retarget_lock_release_recursive>
 8001926:	bf00      	nop
 8001928:	200001d9 	.word	0x200001d9

0800192c <__sinit>:
 800192c:	b510      	push	{r4, lr}
 800192e:	4604      	mov	r4, r0
 8001930:	f7ff fff0 	bl	8001914 <__sfp_lock_acquire>
 8001934:	6a23      	ldr	r3, [r4, #32]
 8001936:	b11b      	cbz	r3, 8001940 <__sinit+0x14>
 8001938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800193c:	f7ff bff0 	b.w	8001920 <__sfp_lock_release>
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <__sinit+0x28>)
 8001942:	6223      	str	r3, [r4, #32]
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <__sinit+0x2c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f5      	bne.n	8001938 <__sinit+0xc>
 800194c:	f7ff ffc4 	bl	80018d8 <global_stdio_init.part.0>
 8001950:	e7f2      	b.n	8001938 <__sinit+0xc>
 8001952:	bf00      	nop
 8001954:	08001899 	.word	0x08001899
 8001958:	200001d0 	.word	0x200001d0

0800195c <_fwalk_sglue>:
 800195c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001960:	4607      	mov	r7, r0
 8001962:	4688      	mov	r8, r1
 8001964:	4614      	mov	r4, r2
 8001966:	2600      	movs	r6, #0
 8001968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800196c:	f1b9 0901 	subs.w	r9, r9, #1
 8001970:	d505      	bpl.n	800197e <_fwalk_sglue+0x22>
 8001972:	6824      	ldr	r4, [r4, #0]
 8001974:	2c00      	cmp	r4, #0
 8001976:	d1f7      	bne.n	8001968 <_fwalk_sglue+0xc>
 8001978:	4630      	mov	r0, r6
 800197a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800197e:	89ab      	ldrh	r3, [r5, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d907      	bls.n	8001994 <_fwalk_sglue+0x38>
 8001984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001988:	3301      	adds	r3, #1
 800198a:	d003      	beq.n	8001994 <_fwalk_sglue+0x38>
 800198c:	4629      	mov	r1, r5
 800198e:	4638      	mov	r0, r7
 8001990:	47c0      	blx	r8
 8001992:	4306      	orrs	r6, r0
 8001994:	3568      	adds	r5, #104	@ 0x68
 8001996:	e7e9      	b.n	800196c <_fwalk_sglue+0x10>

08001998 <iprintf>:
 8001998:	b40f      	push	{r0, r1, r2, r3}
 800199a:	b507      	push	{r0, r1, r2, lr}
 800199c:	4906      	ldr	r1, [pc, #24]	@ (80019b8 <iprintf+0x20>)
 800199e:	ab04      	add	r3, sp, #16
 80019a0:	6808      	ldr	r0, [r1, #0]
 80019a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80019a6:	6881      	ldr	r1, [r0, #8]
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	f000 f9e5 	bl	8001d78 <_vfiprintf_r>
 80019ae:	b003      	add	sp, #12
 80019b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80019b4:	b004      	add	sp, #16
 80019b6:	4770      	bx	lr
 80019b8:	20000018 	.word	0x20000018

080019bc <__sread>:
 80019bc:	b510      	push	{r4, lr}
 80019be:	460c      	mov	r4, r1
 80019c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c4:	f000 f868 	bl	8001a98 <_read_r>
 80019c8:	2800      	cmp	r0, #0
 80019ca:	bfab      	itete	ge
 80019cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80019ce:	89a3      	ldrhlt	r3, [r4, #12]
 80019d0:	181b      	addge	r3, r3, r0
 80019d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80019d6:	bfac      	ite	ge
 80019d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80019da:	81a3      	strhlt	r3, [r4, #12]
 80019dc:	bd10      	pop	{r4, pc}

080019de <__swrite>:
 80019de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e2:	461f      	mov	r7, r3
 80019e4:	898b      	ldrh	r3, [r1, #12]
 80019e6:	4605      	mov	r5, r0
 80019e8:	05db      	lsls	r3, r3, #23
 80019ea:	460c      	mov	r4, r1
 80019ec:	4616      	mov	r6, r2
 80019ee:	d505      	bpl.n	80019fc <__swrite+0x1e>
 80019f0:	2302      	movs	r3, #2
 80019f2:	2200      	movs	r2, #0
 80019f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019f8:	f000 f83c 	bl	8001a74 <_lseek_r>
 80019fc:	89a3      	ldrh	r3, [r4, #12]
 80019fe:	4632      	mov	r2, r6
 8001a00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a04:	81a3      	strh	r3, [r4, #12]
 8001a06:	4628      	mov	r0, r5
 8001a08:	463b      	mov	r3, r7
 8001a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a12:	f000 b853 	b.w	8001abc <_write_r>

08001a16 <__sseek>:
 8001a16:	b510      	push	{r4, lr}
 8001a18:	460c      	mov	r4, r1
 8001a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a1e:	f000 f829 	bl	8001a74 <_lseek_r>
 8001a22:	1c43      	adds	r3, r0, #1
 8001a24:	89a3      	ldrh	r3, [r4, #12]
 8001a26:	bf15      	itete	ne
 8001a28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a32:	81a3      	strheq	r3, [r4, #12]
 8001a34:	bf18      	it	ne
 8001a36:	81a3      	strhne	r3, [r4, #12]
 8001a38:	bd10      	pop	{r4, pc}

08001a3a <__sclose>:
 8001a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a3e:	f000 b809 	b.w	8001a54 <_close_r>

08001a42 <memset>:
 8001a42:	4603      	mov	r3, r0
 8001a44:	4402      	add	r2, r0
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d100      	bne.n	8001a4c <memset+0xa>
 8001a4a:	4770      	bx	lr
 8001a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8001a50:	e7f9      	b.n	8001a46 <memset+0x4>
	...

08001a54 <_close_r>:
 8001a54:	b538      	push	{r3, r4, r5, lr}
 8001a56:	2300      	movs	r3, #0
 8001a58:	4d05      	ldr	r5, [pc, #20]	@ (8001a70 <_close_r+0x1c>)
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	602b      	str	r3, [r5, #0]
 8001a60:	f7fe fee5 	bl	800082e <_close>
 8001a64:	1c43      	adds	r3, r0, #1
 8001a66:	d102      	bne.n	8001a6e <_close_r+0x1a>
 8001a68:	682b      	ldr	r3, [r5, #0]
 8001a6a:	b103      	cbz	r3, 8001a6e <_close_r+0x1a>
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	bd38      	pop	{r3, r4, r5, pc}
 8001a70:	200001d4 	.word	0x200001d4

08001a74 <_lseek_r>:
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	4604      	mov	r4, r0
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4d05      	ldr	r5, [pc, #20]	@ (8001a94 <_lseek_r+0x20>)
 8001a80:	602a      	str	r2, [r5, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f7fe fef7 	bl	8000876 <_lseek>
 8001a88:	1c43      	adds	r3, r0, #1
 8001a8a:	d102      	bne.n	8001a92 <_lseek_r+0x1e>
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	b103      	cbz	r3, 8001a92 <_lseek_r+0x1e>
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	200001d4 	.word	0x200001d4

08001a98 <_read_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4d05      	ldr	r5, [pc, #20]	@ (8001ab8 <_read_r+0x20>)
 8001aa4:	602a      	str	r2, [r5, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f7fe fe88 	bl	80007bc <_read>
 8001aac:	1c43      	adds	r3, r0, #1
 8001aae:	d102      	bne.n	8001ab6 <_read_r+0x1e>
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	b103      	cbz	r3, 8001ab6 <_read_r+0x1e>
 8001ab4:	6023      	str	r3, [r4, #0]
 8001ab6:	bd38      	pop	{r3, r4, r5, pc}
 8001ab8:	200001d4 	.word	0x200001d4

08001abc <_write_r>:
 8001abc:	b538      	push	{r3, r4, r5, lr}
 8001abe:	4604      	mov	r4, r0
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4d05      	ldr	r5, [pc, #20]	@ (8001adc <_write_r+0x20>)
 8001ac8:	602a      	str	r2, [r5, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f7fe fe93 	bl	80007f6 <_write>
 8001ad0:	1c43      	adds	r3, r0, #1
 8001ad2:	d102      	bne.n	8001ada <_write_r+0x1e>
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	b103      	cbz	r3, 8001ada <_write_r+0x1e>
 8001ad8:	6023      	str	r3, [r4, #0]
 8001ada:	bd38      	pop	{r3, r4, r5, pc}
 8001adc:	200001d4 	.word	0x200001d4

08001ae0 <__errno>:
 8001ae0:	4b01      	ldr	r3, [pc, #4]	@ (8001ae8 <__errno+0x8>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000018 	.word	0x20000018

08001aec <__libc_init_array>:
 8001aec:	b570      	push	{r4, r5, r6, lr}
 8001aee:	2600      	movs	r6, #0
 8001af0:	4d0c      	ldr	r5, [pc, #48]	@ (8001b24 <__libc_init_array+0x38>)
 8001af2:	4c0d      	ldr	r4, [pc, #52]	@ (8001b28 <__libc_init_array+0x3c>)
 8001af4:	1b64      	subs	r4, r4, r5
 8001af6:	10a4      	asrs	r4, r4, #2
 8001af8:	42a6      	cmp	r6, r4
 8001afa:	d109      	bne.n	8001b10 <__libc_init_array+0x24>
 8001afc:	f000 fdc2 	bl	8002684 <_init>
 8001b00:	2600      	movs	r6, #0
 8001b02:	4d0a      	ldr	r5, [pc, #40]	@ (8001b2c <__libc_init_array+0x40>)
 8001b04:	4c0a      	ldr	r4, [pc, #40]	@ (8001b30 <__libc_init_array+0x44>)
 8001b06:	1b64      	subs	r4, r4, r5
 8001b08:	10a4      	asrs	r4, r4, #2
 8001b0a:	42a6      	cmp	r6, r4
 8001b0c:	d105      	bne.n	8001b1a <__libc_init_array+0x2e>
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}
 8001b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b14:	4798      	blx	r3
 8001b16:	3601      	adds	r6, #1
 8001b18:	e7ee      	b.n	8001af8 <__libc_init_array+0xc>
 8001b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b1e:	4798      	blx	r3
 8001b20:	3601      	adds	r6, #1
 8001b22:	e7f2      	b.n	8001b0a <__libc_init_array+0x1e>
 8001b24:	080026f4 	.word	0x080026f4
 8001b28:	080026f4 	.word	0x080026f4
 8001b2c:	080026f4 	.word	0x080026f4
 8001b30:	080026f8 	.word	0x080026f8

08001b34 <__retarget_lock_init_recursive>:
 8001b34:	4770      	bx	lr

08001b36 <__retarget_lock_acquire_recursive>:
 8001b36:	4770      	bx	lr

08001b38 <__retarget_lock_release_recursive>:
 8001b38:	4770      	bx	lr
	...

08001b3c <_free_r>:
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	4605      	mov	r5, r0
 8001b40:	2900      	cmp	r1, #0
 8001b42:	d040      	beq.n	8001bc6 <_free_r+0x8a>
 8001b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b48:	1f0c      	subs	r4, r1, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bfb8      	it	lt
 8001b4e:	18e4      	addlt	r4, r4, r3
 8001b50:	f000 f8de 	bl	8001d10 <__malloc_lock>
 8001b54:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc8 <_free_r+0x8c>)
 8001b56:	6813      	ldr	r3, [r2, #0]
 8001b58:	b933      	cbnz	r3, 8001b68 <_free_r+0x2c>
 8001b5a:	6063      	str	r3, [r4, #4]
 8001b5c:	6014      	str	r4, [r2, #0]
 8001b5e:	4628      	mov	r0, r5
 8001b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b64:	f000 b8da 	b.w	8001d1c <__malloc_unlock>
 8001b68:	42a3      	cmp	r3, r4
 8001b6a:	d908      	bls.n	8001b7e <_free_r+0x42>
 8001b6c:	6820      	ldr	r0, [r4, #0]
 8001b6e:	1821      	adds	r1, r4, r0
 8001b70:	428b      	cmp	r3, r1
 8001b72:	bf01      	itttt	eq
 8001b74:	6819      	ldreq	r1, [r3, #0]
 8001b76:	685b      	ldreq	r3, [r3, #4]
 8001b78:	1809      	addeq	r1, r1, r0
 8001b7a:	6021      	streq	r1, [r4, #0]
 8001b7c:	e7ed      	b.n	8001b5a <_free_r+0x1e>
 8001b7e:	461a      	mov	r2, r3
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	b10b      	cbz	r3, 8001b88 <_free_r+0x4c>
 8001b84:	42a3      	cmp	r3, r4
 8001b86:	d9fa      	bls.n	8001b7e <_free_r+0x42>
 8001b88:	6811      	ldr	r1, [r2, #0]
 8001b8a:	1850      	adds	r0, r2, r1
 8001b8c:	42a0      	cmp	r0, r4
 8001b8e:	d10b      	bne.n	8001ba8 <_free_r+0x6c>
 8001b90:	6820      	ldr	r0, [r4, #0]
 8001b92:	4401      	add	r1, r0
 8001b94:	1850      	adds	r0, r2, r1
 8001b96:	4283      	cmp	r3, r0
 8001b98:	6011      	str	r1, [r2, #0]
 8001b9a:	d1e0      	bne.n	8001b5e <_free_r+0x22>
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4408      	add	r0, r1
 8001ba2:	6010      	str	r0, [r2, #0]
 8001ba4:	6053      	str	r3, [r2, #4]
 8001ba6:	e7da      	b.n	8001b5e <_free_r+0x22>
 8001ba8:	d902      	bls.n	8001bb0 <_free_r+0x74>
 8001baa:	230c      	movs	r3, #12
 8001bac:	602b      	str	r3, [r5, #0]
 8001bae:	e7d6      	b.n	8001b5e <_free_r+0x22>
 8001bb0:	6820      	ldr	r0, [r4, #0]
 8001bb2:	1821      	adds	r1, r4, r0
 8001bb4:	428b      	cmp	r3, r1
 8001bb6:	bf01      	itttt	eq
 8001bb8:	6819      	ldreq	r1, [r3, #0]
 8001bba:	685b      	ldreq	r3, [r3, #4]
 8001bbc:	1809      	addeq	r1, r1, r0
 8001bbe:	6021      	streq	r1, [r4, #0]
 8001bc0:	6063      	str	r3, [r4, #4]
 8001bc2:	6054      	str	r4, [r2, #4]
 8001bc4:	e7cb      	b.n	8001b5e <_free_r+0x22>
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	200001e0 	.word	0x200001e0

08001bcc <sbrk_aligned>:
 8001bcc:	b570      	push	{r4, r5, r6, lr}
 8001bce:	4e0f      	ldr	r6, [pc, #60]	@ (8001c0c <sbrk_aligned+0x40>)
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	6831      	ldr	r1, [r6, #0]
 8001bd4:	4605      	mov	r5, r0
 8001bd6:	b911      	cbnz	r1, 8001bde <sbrk_aligned+0x12>
 8001bd8:	f000 fcb2 	bl	8002540 <_sbrk_r>
 8001bdc:	6030      	str	r0, [r6, #0]
 8001bde:	4621      	mov	r1, r4
 8001be0:	4628      	mov	r0, r5
 8001be2:	f000 fcad 	bl	8002540 <_sbrk_r>
 8001be6:	1c43      	adds	r3, r0, #1
 8001be8:	d103      	bne.n	8001bf2 <sbrk_aligned+0x26>
 8001bea:	f04f 34ff 	mov.w	r4, #4294967295
 8001bee:	4620      	mov	r0, r4
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
 8001bf2:	1cc4      	adds	r4, r0, #3
 8001bf4:	f024 0403 	bic.w	r4, r4, #3
 8001bf8:	42a0      	cmp	r0, r4
 8001bfa:	d0f8      	beq.n	8001bee <sbrk_aligned+0x22>
 8001bfc:	1a21      	subs	r1, r4, r0
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f000 fc9e 	bl	8002540 <_sbrk_r>
 8001c04:	3001      	adds	r0, #1
 8001c06:	d1f2      	bne.n	8001bee <sbrk_aligned+0x22>
 8001c08:	e7ef      	b.n	8001bea <sbrk_aligned+0x1e>
 8001c0a:	bf00      	nop
 8001c0c:	200001dc 	.word	0x200001dc

08001c10 <_malloc_r>:
 8001c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c14:	1ccd      	adds	r5, r1, #3
 8001c16:	f025 0503 	bic.w	r5, r5, #3
 8001c1a:	3508      	adds	r5, #8
 8001c1c:	2d0c      	cmp	r5, #12
 8001c1e:	bf38      	it	cc
 8001c20:	250c      	movcc	r5, #12
 8001c22:	2d00      	cmp	r5, #0
 8001c24:	4606      	mov	r6, r0
 8001c26:	db01      	blt.n	8001c2c <_malloc_r+0x1c>
 8001c28:	42a9      	cmp	r1, r5
 8001c2a:	d904      	bls.n	8001c36 <_malloc_r+0x26>
 8001c2c:	230c      	movs	r3, #12
 8001c2e:	6033      	str	r3, [r6, #0]
 8001c30:	2000      	movs	r0, #0
 8001c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d0c <_malloc_r+0xfc>
 8001c3a:	f000 f869 	bl	8001d10 <__malloc_lock>
 8001c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8001c42:	461c      	mov	r4, r3
 8001c44:	bb44      	cbnz	r4, 8001c98 <_malloc_r+0x88>
 8001c46:	4629      	mov	r1, r5
 8001c48:	4630      	mov	r0, r6
 8001c4a:	f7ff ffbf 	bl	8001bcc <sbrk_aligned>
 8001c4e:	1c43      	adds	r3, r0, #1
 8001c50:	4604      	mov	r4, r0
 8001c52:	d158      	bne.n	8001d06 <_malloc_r+0xf6>
 8001c54:	f8d8 4000 	ldr.w	r4, [r8]
 8001c58:	4627      	mov	r7, r4
 8001c5a:	2f00      	cmp	r7, #0
 8001c5c:	d143      	bne.n	8001ce6 <_malloc_r+0xd6>
 8001c5e:	2c00      	cmp	r4, #0
 8001c60:	d04b      	beq.n	8001cfa <_malloc_r+0xea>
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	4639      	mov	r1, r7
 8001c66:	4630      	mov	r0, r6
 8001c68:	eb04 0903 	add.w	r9, r4, r3
 8001c6c:	f000 fc68 	bl	8002540 <_sbrk_r>
 8001c70:	4581      	cmp	r9, r0
 8001c72:	d142      	bne.n	8001cfa <_malloc_r+0xea>
 8001c74:	6821      	ldr	r1, [r4, #0]
 8001c76:	4630      	mov	r0, r6
 8001c78:	1a6d      	subs	r5, r5, r1
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7ff ffa6 	bl	8001bcc <sbrk_aligned>
 8001c80:	3001      	adds	r0, #1
 8001c82:	d03a      	beq.n	8001cfa <_malloc_r+0xea>
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	442b      	add	r3, r5
 8001c88:	6023      	str	r3, [r4, #0]
 8001c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	bb62      	cbnz	r2, 8001cec <_malloc_r+0xdc>
 8001c92:	f8c8 7000 	str.w	r7, [r8]
 8001c96:	e00f      	b.n	8001cb8 <_malloc_r+0xa8>
 8001c98:	6822      	ldr	r2, [r4, #0]
 8001c9a:	1b52      	subs	r2, r2, r5
 8001c9c:	d420      	bmi.n	8001ce0 <_malloc_r+0xd0>
 8001c9e:	2a0b      	cmp	r2, #11
 8001ca0:	d917      	bls.n	8001cd2 <_malloc_r+0xc2>
 8001ca2:	1961      	adds	r1, r4, r5
 8001ca4:	42a3      	cmp	r3, r4
 8001ca6:	6025      	str	r5, [r4, #0]
 8001ca8:	bf18      	it	ne
 8001caa:	6059      	strne	r1, [r3, #4]
 8001cac:	6863      	ldr	r3, [r4, #4]
 8001cae:	bf08      	it	eq
 8001cb0:	f8c8 1000 	streq.w	r1, [r8]
 8001cb4:	5162      	str	r2, [r4, r5]
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f000 f82f 	bl	8001d1c <__malloc_unlock>
 8001cbe:	f104 000b 	add.w	r0, r4, #11
 8001cc2:	1d23      	adds	r3, r4, #4
 8001cc4:	f020 0007 	bic.w	r0, r0, #7
 8001cc8:	1ac2      	subs	r2, r0, r3
 8001cca:	bf1c      	itt	ne
 8001ccc:	1a1b      	subne	r3, r3, r0
 8001cce:	50a3      	strne	r3, [r4, r2]
 8001cd0:	e7af      	b.n	8001c32 <_malloc_r+0x22>
 8001cd2:	6862      	ldr	r2, [r4, #4]
 8001cd4:	42a3      	cmp	r3, r4
 8001cd6:	bf0c      	ite	eq
 8001cd8:	f8c8 2000 	streq.w	r2, [r8]
 8001cdc:	605a      	strne	r2, [r3, #4]
 8001cde:	e7eb      	b.n	8001cb8 <_malloc_r+0xa8>
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	6864      	ldr	r4, [r4, #4]
 8001ce4:	e7ae      	b.n	8001c44 <_malloc_r+0x34>
 8001ce6:	463c      	mov	r4, r7
 8001ce8:	687f      	ldr	r7, [r7, #4]
 8001cea:	e7b6      	b.n	8001c5a <_malloc_r+0x4a>
 8001cec:	461a      	mov	r2, r3
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	42a3      	cmp	r3, r4
 8001cf2:	d1fb      	bne.n	8001cec <_malloc_r+0xdc>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6053      	str	r3, [r2, #4]
 8001cf8:	e7de      	b.n	8001cb8 <_malloc_r+0xa8>
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	6033      	str	r3, [r6, #0]
 8001d00:	f000 f80c 	bl	8001d1c <__malloc_unlock>
 8001d04:	e794      	b.n	8001c30 <_malloc_r+0x20>
 8001d06:	6005      	str	r5, [r0, #0]
 8001d08:	e7d6      	b.n	8001cb8 <_malloc_r+0xa8>
 8001d0a:	bf00      	nop
 8001d0c:	200001e0 	.word	0x200001e0

08001d10 <__malloc_lock>:
 8001d10:	4801      	ldr	r0, [pc, #4]	@ (8001d18 <__malloc_lock+0x8>)
 8001d12:	f7ff bf10 	b.w	8001b36 <__retarget_lock_acquire_recursive>
 8001d16:	bf00      	nop
 8001d18:	200001d8 	.word	0x200001d8

08001d1c <__malloc_unlock>:
 8001d1c:	4801      	ldr	r0, [pc, #4]	@ (8001d24 <__malloc_unlock+0x8>)
 8001d1e:	f7ff bf0b 	b.w	8001b38 <__retarget_lock_release_recursive>
 8001d22:	bf00      	nop
 8001d24:	200001d8 	.word	0x200001d8

08001d28 <__sfputc_r>:
 8001d28:	6893      	ldr	r3, [r2, #8]
 8001d2a:	b410      	push	{r4}
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	6093      	str	r3, [r2, #8]
 8001d32:	da07      	bge.n	8001d44 <__sfputc_r+0x1c>
 8001d34:	6994      	ldr	r4, [r2, #24]
 8001d36:	42a3      	cmp	r3, r4
 8001d38:	db01      	blt.n	8001d3e <__sfputc_r+0x16>
 8001d3a:	290a      	cmp	r1, #10
 8001d3c:	d102      	bne.n	8001d44 <__sfputc_r+0x1c>
 8001d3e:	bc10      	pop	{r4}
 8001d40:	f000 bb6a 	b.w	8002418 <__swbuf_r>
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	1c58      	adds	r0, r3, #1
 8001d48:	6010      	str	r0, [r2, #0]
 8001d4a:	7019      	strb	r1, [r3, #0]
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	bc10      	pop	{r4}
 8001d50:	4770      	bx	lr

08001d52 <__sfputs_r>:
 8001d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d54:	4606      	mov	r6, r0
 8001d56:	460f      	mov	r7, r1
 8001d58:	4614      	mov	r4, r2
 8001d5a:	18d5      	adds	r5, r2, r3
 8001d5c:	42ac      	cmp	r4, r5
 8001d5e:	d101      	bne.n	8001d64 <__sfputs_r+0x12>
 8001d60:	2000      	movs	r0, #0
 8001d62:	e007      	b.n	8001d74 <__sfputs_r+0x22>
 8001d64:	463a      	mov	r2, r7
 8001d66:	4630      	mov	r0, r6
 8001d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d6c:	f7ff ffdc 	bl	8001d28 <__sfputc_r>
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	d1f3      	bne.n	8001d5c <__sfputs_r+0xa>
 8001d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d78 <_vfiprintf_r>:
 8001d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d7c:	460d      	mov	r5, r1
 8001d7e:	4614      	mov	r4, r2
 8001d80:	4698      	mov	r8, r3
 8001d82:	4606      	mov	r6, r0
 8001d84:	b09d      	sub	sp, #116	@ 0x74
 8001d86:	b118      	cbz	r0, 8001d90 <_vfiprintf_r+0x18>
 8001d88:	6a03      	ldr	r3, [r0, #32]
 8001d8a:	b90b      	cbnz	r3, 8001d90 <_vfiprintf_r+0x18>
 8001d8c:	f7ff fdce 	bl	800192c <__sinit>
 8001d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d92:	07d9      	lsls	r1, r3, #31
 8001d94:	d405      	bmi.n	8001da2 <_vfiprintf_r+0x2a>
 8001d96:	89ab      	ldrh	r3, [r5, #12]
 8001d98:	059a      	lsls	r2, r3, #22
 8001d9a:	d402      	bmi.n	8001da2 <_vfiprintf_r+0x2a>
 8001d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d9e:	f7ff feca 	bl	8001b36 <__retarget_lock_acquire_recursive>
 8001da2:	89ab      	ldrh	r3, [r5, #12]
 8001da4:	071b      	lsls	r3, r3, #28
 8001da6:	d501      	bpl.n	8001dac <_vfiprintf_r+0x34>
 8001da8:	692b      	ldr	r3, [r5, #16]
 8001daa:	b99b      	cbnz	r3, 8001dd4 <_vfiprintf_r+0x5c>
 8001dac:	4629      	mov	r1, r5
 8001dae:	4630      	mov	r0, r6
 8001db0:	f000 fb70 	bl	8002494 <__swsetup_r>
 8001db4:	b170      	cbz	r0, 8001dd4 <_vfiprintf_r+0x5c>
 8001db6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001db8:	07dc      	lsls	r4, r3, #31
 8001dba:	d504      	bpl.n	8001dc6 <_vfiprintf_r+0x4e>
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	b01d      	add	sp, #116	@ 0x74
 8001dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dc6:	89ab      	ldrh	r3, [r5, #12]
 8001dc8:	0598      	lsls	r0, r3, #22
 8001dca:	d4f7      	bmi.n	8001dbc <_vfiprintf_r+0x44>
 8001dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001dce:	f7ff feb3 	bl	8001b38 <__retarget_lock_release_recursive>
 8001dd2:	e7f3      	b.n	8001dbc <_vfiprintf_r+0x44>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001dd8:	2320      	movs	r3, #32
 8001dda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001dde:	2330      	movs	r3, #48	@ 0x30
 8001de0:	f04f 0901 	mov.w	r9, #1
 8001de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8001de8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8001f94 <_vfiprintf_r+0x21c>
 8001dec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001df0:	4623      	mov	r3, r4
 8001df2:	469a      	mov	sl, r3
 8001df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001df8:	b10a      	cbz	r2, 8001dfe <_vfiprintf_r+0x86>
 8001dfa:	2a25      	cmp	r2, #37	@ 0x25
 8001dfc:	d1f9      	bne.n	8001df2 <_vfiprintf_r+0x7a>
 8001dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8001e02:	d00b      	beq.n	8001e1c <_vfiprintf_r+0xa4>
 8001e04:	465b      	mov	r3, fp
 8001e06:	4622      	mov	r2, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f7ff ffa1 	bl	8001d52 <__sfputs_r>
 8001e10:	3001      	adds	r0, #1
 8001e12:	f000 80a7 	beq.w	8001f64 <_vfiprintf_r+0x1ec>
 8001e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001e18:	445a      	add	r2, fp
 8001e1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 809f 	beq.w	8001f64 <_vfiprintf_r+0x1ec>
 8001e26:	2300      	movs	r3, #0
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e30:	f10a 0a01 	add.w	sl, sl, #1
 8001e34:	9304      	str	r3, [sp, #16]
 8001e36:	9307      	str	r3, [sp, #28]
 8001e38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001e3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8001e3e:	4654      	mov	r4, sl
 8001e40:	2205      	movs	r2, #5
 8001e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e46:	4853      	ldr	r0, [pc, #332]	@ (8001f94 <_vfiprintf_r+0x21c>)
 8001e48:	f000 fb8a 	bl	8002560 <memchr>
 8001e4c:	9a04      	ldr	r2, [sp, #16]
 8001e4e:	b9d8      	cbnz	r0, 8001e88 <_vfiprintf_r+0x110>
 8001e50:	06d1      	lsls	r1, r2, #27
 8001e52:	bf44      	itt	mi
 8001e54:	2320      	movmi	r3, #32
 8001e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e5a:	0713      	lsls	r3, r2, #28
 8001e5c:	bf44      	itt	mi
 8001e5e:	232b      	movmi	r3, #43	@ 0x2b
 8001e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e64:	f89a 3000 	ldrb.w	r3, [sl]
 8001e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e6a:	d015      	beq.n	8001e98 <_vfiprintf_r+0x120>
 8001e6c:	4654      	mov	r4, sl
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f04f 0c0a 	mov.w	ip, #10
 8001e74:	9a07      	ldr	r2, [sp, #28]
 8001e76:	4621      	mov	r1, r4
 8001e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e7c:	3b30      	subs	r3, #48	@ 0x30
 8001e7e:	2b09      	cmp	r3, #9
 8001e80:	d94b      	bls.n	8001f1a <_vfiprintf_r+0x1a2>
 8001e82:	b1b0      	cbz	r0, 8001eb2 <_vfiprintf_r+0x13a>
 8001e84:	9207      	str	r2, [sp, #28]
 8001e86:	e014      	b.n	8001eb2 <_vfiprintf_r+0x13a>
 8001e88:	eba0 0308 	sub.w	r3, r0, r8
 8001e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8001e90:	4313      	orrs	r3, r2
 8001e92:	46a2      	mov	sl, r4
 8001e94:	9304      	str	r3, [sp, #16]
 8001e96:	e7d2      	b.n	8001e3e <_vfiprintf_r+0xc6>
 8001e98:	9b03      	ldr	r3, [sp, #12]
 8001e9a:	1d19      	adds	r1, r3, #4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	9103      	str	r1, [sp, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bfbb      	ittet	lt
 8001ea4:	425b      	neglt	r3, r3
 8001ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8001eaa:	9307      	strge	r3, [sp, #28]
 8001eac:	9307      	strlt	r3, [sp, #28]
 8001eae:	bfb8      	it	lt
 8001eb0:	9204      	strlt	r2, [sp, #16]
 8001eb2:	7823      	ldrb	r3, [r4, #0]
 8001eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001eb6:	d10a      	bne.n	8001ece <_vfiprintf_r+0x156>
 8001eb8:	7863      	ldrb	r3, [r4, #1]
 8001eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ebc:	d132      	bne.n	8001f24 <_vfiprintf_r+0x1ac>
 8001ebe:	9b03      	ldr	r3, [sp, #12]
 8001ec0:	3402      	adds	r4, #2
 8001ec2:	1d1a      	adds	r2, r3, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	9203      	str	r2, [sp, #12]
 8001ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001ecc:	9305      	str	r3, [sp, #20]
 8001ece:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001f98 <_vfiprintf_r+0x220>
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	4650      	mov	r0, sl
 8001ed6:	7821      	ldrb	r1, [r4, #0]
 8001ed8:	f000 fb42 	bl	8002560 <memchr>
 8001edc:	b138      	cbz	r0, 8001eee <_vfiprintf_r+0x176>
 8001ede:	2240      	movs	r2, #64	@ 0x40
 8001ee0:	9b04      	ldr	r3, [sp, #16]
 8001ee2:	eba0 000a 	sub.w	r0, r0, sl
 8001ee6:	4082      	lsls	r2, r0
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	3401      	adds	r4, #1
 8001eec:	9304      	str	r3, [sp, #16]
 8001eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ef2:	2206      	movs	r2, #6
 8001ef4:	4829      	ldr	r0, [pc, #164]	@ (8001f9c <_vfiprintf_r+0x224>)
 8001ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001efa:	f000 fb31 	bl	8002560 <memchr>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d03f      	beq.n	8001f82 <_vfiprintf_r+0x20a>
 8001f02:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <_vfiprintf_r+0x228>)
 8001f04:	bb1b      	cbnz	r3, 8001f4e <_vfiprintf_r+0x1d6>
 8001f06:	9b03      	ldr	r3, [sp, #12]
 8001f08:	3307      	adds	r3, #7
 8001f0a:	f023 0307 	bic.w	r3, r3, #7
 8001f0e:	3308      	adds	r3, #8
 8001f10:	9303      	str	r3, [sp, #12]
 8001f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f14:	443b      	add	r3, r7
 8001f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f18:	e76a      	b.n	8001df0 <_vfiprintf_r+0x78>
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f22:	e7a8      	b.n	8001e76 <_vfiprintf_r+0xfe>
 8001f24:	2300      	movs	r3, #0
 8001f26:	f04f 0c0a 	mov.w	ip, #10
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	3401      	adds	r4, #1
 8001f2e:	9305      	str	r3, [sp, #20]
 8001f30:	4620      	mov	r0, r4
 8001f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f36:	3a30      	subs	r2, #48	@ 0x30
 8001f38:	2a09      	cmp	r2, #9
 8001f3a:	d903      	bls.n	8001f44 <_vfiprintf_r+0x1cc>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0c6      	beq.n	8001ece <_vfiprintf_r+0x156>
 8001f40:	9105      	str	r1, [sp, #20]
 8001f42:	e7c4      	b.n	8001ece <_vfiprintf_r+0x156>
 8001f44:	4604      	mov	r4, r0
 8001f46:	2301      	movs	r3, #1
 8001f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f4c:	e7f0      	b.n	8001f30 <_vfiprintf_r+0x1b8>
 8001f4e:	ab03      	add	r3, sp, #12
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	462a      	mov	r2, r5
 8001f54:	4630      	mov	r0, r6
 8001f56:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <_vfiprintf_r+0x22c>)
 8001f58:	a904      	add	r1, sp, #16
 8001f5a:	f3af 8000 	nop.w
 8001f5e:	4607      	mov	r7, r0
 8001f60:	1c78      	adds	r0, r7, #1
 8001f62:	d1d6      	bne.n	8001f12 <_vfiprintf_r+0x19a>
 8001f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f66:	07d9      	lsls	r1, r3, #31
 8001f68:	d405      	bmi.n	8001f76 <_vfiprintf_r+0x1fe>
 8001f6a:	89ab      	ldrh	r3, [r5, #12]
 8001f6c:	059a      	lsls	r2, r3, #22
 8001f6e:	d402      	bmi.n	8001f76 <_vfiprintf_r+0x1fe>
 8001f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f72:	f7ff fde1 	bl	8001b38 <__retarget_lock_release_recursive>
 8001f76:	89ab      	ldrh	r3, [r5, #12]
 8001f78:	065b      	lsls	r3, r3, #25
 8001f7a:	f53f af1f 	bmi.w	8001dbc <_vfiprintf_r+0x44>
 8001f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f80:	e71e      	b.n	8001dc0 <_vfiprintf_r+0x48>
 8001f82:	ab03      	add	r3, sp, #12
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	462a      	mov	r2, r5
 8001f88:	4630      	mov	r0, r6
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <_vfiprintf_r+0x22c>)
 8001f8c:	a904      	add	r1, sp, #16
 8001f8e:	f000 f87d 	bl	800208c <_printf_i>
 8001f92:	e7e4      	b.n	8001f5e <_vfiprintf_r+0x1e6>
 8001f94:	080026b8 	.word	0x080026b8
 8001f98:	080026be 	.word	0x080026be
 8001f9c:	080026c2 	.word	0x080026c2
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	08001d53 	.word	0x08001d53

08001fa8 <_printf_common>:
 8001fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fac:	4616      	mov	r6, r2
 8001fae:	4698      	mov	r8, r3
 8001fb0:	688a      	ldr	r2, [r1, #8]
 8001fb2:	690b      	ldr	r3, [r1, #16]
 8001fb4:	4607      	mov	r7, r0
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	bfb8      	it	lt
 8001fba:	4613      	movlt	r3, r2
 8001fbc:	6033      	str	r3, [r6, #0]
 8001fbe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001fc8:	b10a      	cbz	r2, 8001fce <_printf_common+0x26>
 8001fca:	3301      	adds	r3, #1
 8001fcc:	6033      	str	r3, [r6, #0]
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	0699      	lsls	r1, r3, #26
 8001fd2:	bf42      	ittt	mi
 8001fd4:	6833      	ldrmi	r3, [r6, #0]
 8001fd6:	3302      	addmi	r3, #2
 8001fd8:	6033      	strmi	r3, [r6, #0]
 8001fda:	6825      	ldr	r5, [r4, #0]
 8001fdc:	f015 0506 	ands.w	r5, r5, #6
 8001fe0:	d106      	bne.n	8001ff0 <_printf_common+0x48>
 8001fe2:	f104 0a19 	add.w	sl, r4, #25
 8001fe6:	68e3      	ldr	r3, [r4, #12]
 8001fe8:	6832      	ldr	r2, [r6, #0]
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	42ab      	cmp	r3, r5
 8001fee:	dc2b      	bgt.n	8002048 <_printf_common+0xa0>
 8001ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ff4:	6822      	ldr	r2, [r4, #0]
 8001ff6:	3b00      	subs	r3, #0
 8001ff8:	bf18      	it	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	0692      	lsls	r2, r2, #26
 8001ffe:	d430      	bmi.n	8002062 <_printf_common+0xba>
 8002000:	4641      	mov	r1, r8
 8002002:	4638      	mov	r0, r7
 8002004:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002008:	47c8      	blx	r9
 800200a:	3001      	adds	r0, #1
 800200c:	d023      	beq.n	8002056 <_printf_common+0xae>
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	6922      	ldr	r2, [r4, #16]
 8002012:	f003 0306 	and.w	r3, r3, #6
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf14      	ite	ne
 800201a:	2500      	movne	r5, #0
 800201c:	6833      	ldreq	r3, [r6, #0]
 800201e:	f04f 0600 	mov.w	r6, #0
 8002022:	bf08      	it	eq
 8002024:	68e5      	ldreq	r5, [r4, #12]
 8002026:	f104 041a 	add.w	r4, r4, #26
 800202a:	bf08      	it	eq
 800202c:	1aed      	subeq	r5, r5, r3
 800202e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002032:	bf08      	it	eq
 8002034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002038:	4293      	cmp	r3, r2
 800203a:	bfc4      	itt	gt
 800203c:	1a9b      	subgt	r3, r3, r2
 800203e:	18ed      	addgt	r5, r5, r3
 8002040:	42b5      	cmp	r5, r6
 8002042:	d11a      	bne.n	800207a <_printf_common+0xd2>
 8002044:	2000      	movs	r0, #0
 8002046:	e008      	b.n	800205a <_printf_common+0xb2>
 8002048:	2301      	movs	r3, #1
 800204a:	4652      	mov	r2, sl
 800204c:	4641      	mov	r1, r8
 800204e:	4638      	mov	r0, r7
 8002050:	47c8      	blx	r9
 8002052:	3001      	adds	r0, #1
 8002054:	d103      	bne.n	800205e <_printf_common+0xb6>
 8002056:	f04f 30ff 	mov.w	r0, #4294967295
 800205a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800205e:	3501      	adds	r5, #1
 8002060:	e7c1      	b.n	8001fe6 <_printf_common+0x3e>
 8002062:	2030      	movs	r0, #48	@ 0x30
 8002064:	18e1      	adds	r1, r4, r3
 8002066:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002070:	4422      	add	r2, r4
 8002072:	3302      	adds	r3, #2
 8002074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002078:	e7c2      	b.n	8002000 <_printf_common+0x58>
 800207a:	2301      	movs	r3, #1
 800207c:	4622      	mov	r2, r4
 800207e:	4641      	mov	r1, r8
 8002080:	4638      	mov	r0, r7
 8002082:	47c8      	blx	r9
 8002084:	3001      	adds	r0, #1
 8002086:	d0e6      	beq.n	8002056 <_printf_common+0xae>
 8002088:	3601      	adds	r6, #1
 800208a:	e7d9      	b.n	8002040 <_printf_common+0x98>

0800208c <_printf_i>:
 800208c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002090:	7e0f      	ldrb	r7, [r1, #24]
 8002092:	4691      	mov	r9, r2
 8002094:	2f78      	cmp	r7, #120	@ 0x78
 8002096:	4680      	mov	r8, r0
 8002098:	460c      	mov	r4, r1
 800209a:	469a      	mov	sl, r3
 800209c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800209e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80020a2:	d807      	bhi.n	80020b4 <_printf_i+0x28>
 80020a4:	2f62      	cmp	r7, #98	@ 0x62
 80020a6:	d80a      	bhi.n	80020be <_printf_i+0x32>
 80020a8:	2f00      	cmp	r7, #0
 80020aa:	f000 80d1 	beq.w	8002250 <_printf_i+0x1c4>
 80020ae:	2f58      	cmp	r7, #88	@ 0x58
 80020b0:	f000 80b8 	beq.w	8002224 <_printf_i+0x198>
 80020b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80020bc:	e03a      	b.n	8002134 <_printf_i+0xa8>
 80020be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80020c2:	2b15      	cmp	r3, #21
 80020c4:	d8f6      	bhi.n	80020b4 <_printf_i+0x28>
 80020c6:	a101      	add	r1, pc, #4	@ (adr r1, 80020cc <_printf_i+0x40>)
 80020c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80020cc:	08002125 	.word	0x08002125
 80020d0:	08002139 	.word	0x08002139
 80020d4:	080020b5 	.word	0x080020b5
 80020d8:	080020b5 	.word	0x080020b5
 80020dc:	080020b5 	.word	0x080020b5
 80020e0:	080020b5 	.word	0x080020b5
 80020e4:	08002139 	.word	0x08002139
 80020e8:	080020b5 	.word	0x080020b5
 80020ec:	080020b5 	.word	0x080020b5
 80020f0:	080020b5 	.word	0x080020b5
 80020f4:	080020b5 	.word	0x080020b5
 80020f8:	08002237 	.word	0x08002237
 80020fc:	08002163 	.word	0x08002163
 8002100:	080021f1 	.word	0x080021f1
 8002104:	080020b5 	.word	0x080020b5
 8002108:	080020b5 	.word	0x080020b5
 800210c:	08002259 	.word	0x08002259
 8002110:	080020b5 	.word	0x080020b5
 8002114:	08002163 	.word	0x08002163
 8002118:	080020b5 	.word	0x080020b5
 800211c:	080020b5 	.word	0x080020b5
 8002120:	080021f9 	.word	0x080021f9
 8002124:	6833      	ldr	r3, [r6, #0]
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6032      	str	r2, [r6, #0]
 800212c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002130:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002134:	2301      	movs	r3, #1
 8002136:	e09c      	b.n	8002272 <_printf_i+0x1e6>
 8002138:	6833      	ldr	r3, [r6, #0]
 800213a:	6820      	ldr	r0, [r4, #0]
 800213c:	1d19      	adds	r1, r3, #4
 800213e:	6031      	str	r1, [r6, #0]
 8002140:	0606      	lsls	r6, r0, #24
 8002142:	d501      	bpl.n	8002148 <_printf_i+0xbc>
 8002144:	681d      	ldr	r5, [r3, #0]
 8002146:	e003      	b.n	8002150 <_printf_i+0xc4>
 8002148:	0645      	lsls	r5, r0, #25
 800214a:	d5fb      	bpl.n	8002144 <_printf_i+0xb8>
 800214c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002150:	2d00      	cmp	r5, #0
 8002152:	da03      	bge.n	800215c <_printf_i+0xd0>
 8002154:	232d      	movs	r3, #45	@ 0x2d
 8002156:	426d      	negs	r5, r5
 8002158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800215c:	230a      	movs	r3, #10
 800215e:	4858      	ldr	r0, [pc, #352]	@ (80022c0 <_printf_i+0x234>)
 8002160:	e011      	b.n	8002186 <_printf_i+0xfa>
 8002162:	6821      	ldr	r1, [r4, #0]
 8002164:	6833      	ldr	r3, [r6, #0]
 8002166:	0608      	lsls	r0, r1, #24
 8002168:	f853 5b04 	ldr.w	r5, [r3], #4
 800216c:	d402      	bmi.n	8002174 <_printf_i+0xe8>
 800216e:	0649      	lsls	r1, r1, #25
 8002170:	bf48      	it	mi
 8002172:	b2ad      	uxthmi	r5, r5
 8002174:	2f6f      	cmp	r7, #111	@ 0x6f
 8002176:	6033      	str	r3, [r6, #0]
 8002178:	bf14      	ite	ne
 800217a:	230a      	movne	r3, #10
 800217c:	2308      	moveq	r3, #8
 800217e:	4850      	ldr	r0, [pc, #320]	@ (80022c0 <_printf_i+0x234>)
 8002180:	2100      	movs	r1, #0
 8002182:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002186:	6866      	ldr	r6, [r4, #4]
 8002188:	2e00      	cmp	r6, #0
 800218a:	60a6      	str	r6, [r4, #8]
 800218c:	db05      	blt.n	800219a <_printf_i+0x10e>
 800218e:	6821      	ldr	r1, [r4, #0]
 8002190:	432e      	orrs	r6, r5
 8002192:	f021 0104 	bic.w	r1, r1, #4
 8002196:	6021      	str	r1, [r4, #0]
 8002198:	d04b      	beq.n	8002232 <_printf_i+0x1a6>
 800219a:	4616      	mov	r6, r2
 800219c:	fbb5 f1f3 	udiv	r1, r5, r3
 80021a0:	fb03 5711 	mls	r7, r3, r1, r5
 80021a4:	5dc7      	ldrb	r7, [r0, r7]
 80021a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80021aa:	462f      	mov	r7, r5
 80021ac:	42bb      	cmp	r3, r7
 80021ae:	460d      	mov	r5, r1
 80021b0:	d9f4      	bls.n	800219c <_printf_i+0x110>
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d10b      	bne.n	80021ce <_printf_i+0x142>
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	07df      	lsls	r7, r3, #31
 80021ba:	d508      	bpl.n	80021ce <_printf_i+0x142>
 80021bc:	6923      	ldr	r3, [r4, #16]
 80021be:	6861      	ldr	r1, [r4, #4]
 80021c0:	4299      	cmp	r1, r3
 80021c2:	bfde      	ittt	le
 80021c4:	2330      	movle	r3, #48	@ 0x30
 80021c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80021ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80021ce:	1b92      	subs	r2, r2, r6
 80021d0:	6122      	str	r2, [r4, #16]
 80021d2:	464b      	mov	r3, r9
 80021d4:	4621      	mov	r1, r4
 80021d6:	4640      	mov	r0, r8
 80021d8:	f8cd a000 	str.w	sl, [sp]
 80021dc:	aa03      	add	r2, sp, #12
 80021de:	f7ff fee3 	bl	8001fa8 <_printf_common>
 80021e2:	3001      	adds	r0, #1
 80021e4:	d14a      	bne.n	800227c <_printf_i+0x1f0>
 80021e6:	f04f 30ff 	mov.w	r0, #4294967295
 80021ea:	b004      	add	sp, #16
 80021ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	f043 0320 	orr.w	r3, r3, #32
 80021f6:	6023      	str	r3, [r4, #0]
 80021f8:	2778      	movs	r7, #120	@ 0x78
 80021fa:	4832      	ldr	r0, [pc, #200]	@ (80022c4 <_printf_i+0x238>)
 80021fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	6831      	ldr	r1, [r6, #0]
 8002204:	061f      	lsls	r7, r3, #24
 8002206:	f851 5b04 	ldr.w	r5, [r1], #4
 800220a:	d402      	bmi.n	8002212 <_printf_i+0x186>
 800220c:	065f      	lsls	r7, r3, #25
 800220e:	bf48      	it	mi
 8002210:	b2ad      	uxthmi	r5, r5
 8002212:	6031      	str	r1, [r6, #0]
 8002214:	07d9      	lsls	r1, r3, #31
 8002216:	bf44      	itt	mi
 8002218:	f043 0320 	orrmi.w	r3, r3, #32
 800221c:	6023      	strmi	r3, [r4, #0]
 800221e:	b11d      	cbz	r5, 8002228 <_printf_i+0x19c>
 8002220:	2310      	movs	r3, #16
 8002222:	e7ad      	b.n	8002180 <_printf_i+0xf4>
 8002224:	4826      	ldr	r0, [pc, #152]	@ (80022c0 <_printf_i+0x234>)
 8002226:	e7e9      	b.n	80021fc <_printf_i+0x170>
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	f023 0320 	bic.w	r3, r3, #32
 800222e:	6023      	str	r3, [r4, #0]
 8002230:	e7f6      	b.n	8002220 <_printf_i+0x194>
 8002232:	4616      	mov	r6, r2
 8002234:	e7bd      	b.n	80021b2 <_printf_i+0x126>
 8002236:	6833      	ldr	r3, [r6, #0]
 8002238:	6825      	ldr	r5, [r4, #0]
 800223a:	1d18      	adds	r0, r3, #4
 800223c:	6961      	ldr	r1, [r4, #20]
 800223e:	6030      	str	r0, [r6, #0]
 8002240:	062e      	lsls	r6, r5, #24
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	d501      	bpl.n	800224a <_printf_i+0x1be>
 8002246:	6019      	str	r1, [r3, #0]
 8002248:	e002      	b.n	8002250 <_printf_i+0x1c4>
 800224a:	0668      	lsls	r0, r5, #25
 800224c:	d5fb      	bpl.n	8002246 <_printf_i+0x1ba>
 800224e:	8019      	strh	r1, [r3, #0]
 8002250:	2300      	movs	r3, #0
 8002252:	4616      	mov	r6, r2
 8002254:	6123      	str	r3, [r4, #16]
 8002256:	e7bc      	b.n	80021d2 <_printf_i+0x146>
 8002258:	6833      	ldr	r3, [r6, #0]
 800225a:	2100      	movs	r1, #0
 800225c:	1d1a      	adds	r2, r3, #4
 800225e:	6032      	str	r2, [r6, #0]
 8002260:	681e      	ldr	r6, [r3, #0]
 8002262:	6862      	ldr	r2, [r4, #4]
 8002264:	4630      	mov	r0, r6
 8002266:	f000 f97b 	bl	8002560 <memchr>
 800226a:	b108      	cbz	r0, 8002270 <_printf_i+0x1e4>
 800226c:	1b80      	subs	r0, r0, r6
 800226e:	6060      	str	r0, [r4, #4]
 8002270:	6863      	ldr	r3, [r4, #4]
 8002272:	6123      	str	r3, [r4, #16]
 8002274:	2300      	movs	r3, #0
 8002276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800227a:	e7aa      	b.n	80021d2 <_printf_i+0x146>
 800227c:	4632      	mov	r2, r6
 800227e:	4649      	mov	r1, r9
 8002280:	4640      	mov	r0, r8
 8002282:	6923      	ldr	r3, [r4, #16]
 8002284:	47d0      	blx	sl
 8002286:	3001      	adds	r0, #1
 8002288:	d0ad      	beq.n	80021e6 <_printf_i+0x15a>
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	079b      	lsls	r3, r3, #30
 800228e:	d413      	bmi.n	80022b8 <_printf_i+0x22c>
 8002290:	68e0      	ldr	r0, [r4, #12]
 8002292:	9b03      	ldr	r3, [sp, #12]
 8002294:	4298      	cmp	r0, r3
 8002296:	bfb8      	it	lt
 8002298:	4618      	movlt	r0, r3
 800229a:	e7a6      	b.n	80021ea <_printf_i+0x15e>
 800229c:	2301      	movs	r3, #1
 800229e:	4632      	mov	r2, r6
 80022a0:	4649      	mov	r1, r9
 80022a2:	4640      	mov	r0, r8
 80022a4:	47d0      	blx	sl
 80022a6:	3001      	adds	r0, #1
 80022a8:	d09d      	beq.n	80021e6 <_printf_i+0x15a>
 80022aa:	3501      	adds	r5, #1
 80022ac:	68e3      	ldr	r3, [r4, #12]
 80022ae:	9903      	ldr	r1, [sp, #12]
 80022b0:	1a5b      	subs	r3, r3, r1
 80022b2:	42ab      	cmp	r3, r5
 80022b4:	dcf2      	bgt.n	800229c <_printf_i+0x210>
 80022b6:	e7eb      	b.n	8002290 <_printf_i+0x204>
 80022b8:	2500      	movs	r5, #0
 80022ba:	f104 0619 	add.w	r6, r4, #25
 80022be:	e7f5      	b.n	80022ac <_printf_i+0x220>
 80022c0:	080026c9 	.word	0x080026c9
 80022c4:	080026da 	.word	0x080026da

080022c8 <__sflush_r>:
 80022c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	0716      	lsls	r6, r2, #28
 80022d0:	4605      	mov	r5, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	d454      	bmi.n	8002380 <__sflush_r+0xb8>
 80022d6:	684b      	ldr	r3, [r1, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	dc02      	bgt.n	80022e2 <__sflush_r+0x1a>
 80022dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	dd48      	ble.n	8002374 <__sflush_r+0xac>
 80022e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022e4:	2e00      	cmp	r6, #0
 80022e6:	d045      	beq.n	8002374 <__sflush_r+0xac>
 80022e8:	2300      	movs	r3, #0
 80022ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80022ee:	682f      	ldr	r7, [r5, #0]
 80022f0:	6a21      	ldr	r1, [r4, #32]
 80022f2:	602b      	str	r3, [r5, #0]
 80022f4:	d030      	beq.n	8002358 <__sflush_r+0x90>
 80022f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80022f8:	89a3      	ldrh	r3, [r4, #12]
 80022fa:	0759      	lsls	r1, r3, #29
 80022fc:	d505      	bpl.n	800230a <__sflush_r+0x42>
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	1ad2      	subs	r2, r2, r3
 8002302:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002304:	b10b      	cbz	r3, 800230a <__sflush_r+0x42>
 8002306:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	2300      	movs	r3, #0
 800230c:	4628      	mov	r0, r5
 800230e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002310:	6a21      	ldr	r1, [r4, #32]
 8002312:	47b0      	blx	r6
 8002314:	1c43      	adds	r3, r0, #1
 8002316:	89a3      	ldrh	r3, [r4, #12]
 8002318:	d106      	bne.n	8002328 <__sflush_r+0x60>
 800231a:	6829      	ldr	r1, [r5, #0]
 800231c:	291d      	cmp	r1, #29
 800231e:	d82b      	bhi.n	8002378 <__sflush_r+0xb0>
 8002320:	4a28      	ldr	r2, [pc, #160]	@ (80023c4 <__sflush_r+0xfc>)
 8002322:	40ca      	lsrs	r2, r1
 8002324:	07d6      	lsls	r6, r2, #31
 8002326:	d527      	bpl.n	8002378 <__sflush_r+0xb0>
 8002328:	2200      	movs	r2, #0
 800232a:	6062      	str	r2, [r4, #4]
 800232c:	6922      	ldr	r2, [r4, #16]
 800232e:	04d9      	lsls	r1, r3, #19
 8002330:	6022      	str	r2, [r4, #0]
 8002332:	d504      	bpl.n	800233e <__sflush_r+0x76>
 8002334:	1c42      	adds	r2, r0, #1
 8002336:	d101      	bne.n	800233c <__sflush_r+0x74>
 8002338:	682b      	ldr	r3, [r5, #0]
 800233a:	b903      	cbnz	r3, 800233e <__sflush_r+0x76>
 800233c:	6560      	str	r0, [r4, #84]	@ 0x54
 800233e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002340:	602f      	str	r7, [r5, #0]
 8002342:	b1b9      	cbz	r1, 8002374 <__sflush_r+0xac>
 8002344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002348:	4299      	cmp	r1, r3
 800234a:	d002      	beq.n	8002352 <__sflush_r+0x8a>
 800234c:	4628      	mov	r0, r5
 800234e:	f7ff fbf5 	bl	8001b3c <_free_r>
 8002352:	2300      	movs	r3, #0
 8002354:	6363      	str	r3, [r4, #52]	@ 0x34
 8002356:	e00d      	b.n	8002374 <__sflush_r+0xac>
 8002358:	2301      	movs	r3, #1
 800235a:	4628      	mov	r0, r5
 800235c:	47b0      	blx	r6
 800235e:	4602      	mov	r2, r0
 8002360:	1c50      	adds	r0, r2, #1
 8002362:	d1c9      	bne.n	80022f8 <__sflush_r+0x30>
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0c6      	beq.n	80022f8 <__sflush_r+0x30>
 800236a:	2b1d      	cmp	r3, #29
 800236c:	d001      	beq.n	8002372 <__sflush_r+0xaa>
 800236e:	2b16      	cmp	r3, #22
 8002370:	d11d      	bne.n	80023ae <__sflush_r+0xe6>
 8002372:	602f      	str	r7, [r5, #0]
 8002374:	2000      	movs	r0, #0
 8002376:	e021      	b.n	80023bc <__sflush_r+0xf4>
 8002378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800237c:	b21b      	sxth	r3, r3
 800237e:	e01a      	b.n	80023b6 <__sflush_r+0xee>
 8002380:	690f      	ldr	r7, [r1, #16]
 8002382:	2f00      	cmp	r7, #0
 8002384:	d0f6      	beq.n	8002374 <__sflush_r+0xac>
 8002386:	0793      	lsls	r3, r2, #30
 8002388:	bf18      	it	ne
 800238a:	2300      	movne	r3, #0
 800238c:	680e      	ldr	r6, [r1, #0]
 800238e:	bf08      	it	eq
 8002390:	694b      	ldreq	r3, [r1, #20]
 8002392:	1bf6      	subs	r6, r6, r7
 8002394:	600f      	str	r7, [r1, #0]
 8002396:	608b      	str	r3, [r1, #8]
 8002398:	2e00      	cmp	r6, #0
 800239a:	ddeb      	ble.n	8002374 <__sflush_r+0xac>
 800239c:	4633      	mov	r3, r6
 800239e:	463a      	mov	r2, r7
 80023a0:	4628      	mov	r0, r5
 80023a2:	6a21      	ldr	r1, [r4, #32]
 80023a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80023a8:	47e0      	blx	ip
 80023aa:	2800      	cmp	r0, #0
 80023ac:	dc07      	bgt.n	80023be <__sflush_r+0xf6>
 80023ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ba:	81a3      	strh	r3, [r4, #12]
 80023bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023be:	4407      	add	r7, r0
 80023c0:	1a36      	subs	r6, r6, r0
 80023c2:	e7e9      	b.n	8002398 <__sflush_r+0xd0>
 80023c4:	20400001 	.word	0x20400001

080023c8 <_fflush_r>:
 80023c8:	b538      	push	{r3, r4, r5, lr}
 80023ca:	690b      	ldr	r3, [r1, #16]
 80023cc:	4605      	mov	r5, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	b913      	cbnz	r3, 80023d8 <_fflush_r+0x10>
 80023d2:	2500      	movs	r5, #0
 80023d4:	4628      	mov	r0, r5
 80023d6:	bd38      	pop	{r3, r4, r5, pc}
 80023d8:	b118      	cbz	r0, 80023e2 <_fflush_r+0x1a>
 80023da:	6a03      	ldr	r3, [r0, #32]
 80023dc:	b90b      	cbnz	r3, 80023e2 <_fflush_r+0x1a>
 80023de:	f7ff faa5 	bl	800192c <__sinit>
 80023e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f3      	beq.n	80023d2 <_fflush_r+0xa>
 80023ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80023ec:	07d0      	lsls	r0, r2, #31
 80023ee:	d404      	bmi.n	80023fa <_fflush_r+0x32>
 80023f0:	0599      	lsls	r1, r3, #22
 80023f2:	d402      	bmi.n	80023fa <_fflush_r+0x32>
 80023f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023f6:	f7ff fb9e 	bl	8001b36 <__retarget_lock_acquire_recursive>
 80023fa:	4628      	mov	r0, r5
 80023fc:	4621      	mov	r1, r4
 80023fe:	f7ff ff63 	bl	80022c8 <__sflush_r>
 8002402:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002404:	4605      	mov	r5, r0
 8002406:	07da      	lsls	r2, r3, #31
 8002408:	d4e4      	bmi.n	80023d4 <_fflush_r+0xc>
 800240a:	89a3      	ldrh	r3, [r4, #12]
 800240c:	059b      	lsls	r3, r3, #22
 800240e:	d4e1      	bmi.n	80023d4 <_fflush_r+0xc>
 8002410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002412:	f7ff fb91 	bl	8001b38 <__retarget_lock_release_recursive>
 8002416:	e7dd      	b.n	80023d4 <_fflush_r+0xc>

08002418 <__swbuf_r>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	460e      	mov	r6, r1
 800241c:	4614      	mov	r4, r2
 800241e:	4605      	mov	r5, r0
 8002420:	b118      	cbz	r0, 800242a <__swbuf_r+0x12>
 8002422:	6a03      	ldr	r3, [r0, #32]
 8002424:	b90b      	cbnz	r3, 800242a <__swbuf_r+0x12>
 8002426:	f7ff fa81 	bl	800192c <__sinit>
 800242a:	69a3      	ldr	r3, [r4, #24]
 800242c:	60a3      	str	r3, [r4, #8]
 800242e:	89a3      	ldrh	r3, [r4, #12]
 8002430:	071a      	lsls	r2, r3, #28
 8002432:	d501      	bpl.n	8002438 <__swbuf_r+0x20>
 8002434:	6923      	ldr	r3, [r4, #16]
 8002436:	b943      	cbnz	r3, 800244a <__swbuf_r+0x32>
 8002438:	4621      	mov	r1, r4
 800243a:	4628      	mov	r0, r5
 800243c:	f000 f82a 	bl	8002494 <__swsetup_r>
 8002440:	b118      	cbz	r0, 800244a <__swbuf_r+0x32>
 8002442:	f04f 37ff 	mov.w	r7, #4294967295
 8002446:	4638      	mov	r0, r7
 8002448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	6922      	ldr	r2, [r4, #16]
 800244e:	b2f6      	uxtb	r6, r6
 8002450:	1a98      	subs	r0, r3, r2
 8002452:	6963      	ldr	r3, [r4, #20]
 8002454:	4637      	mov	r7, r6
 8002456:	4283      	cmp	r3, r0
 8002458:	dc05      	bgt.n	8002466 <__swbuf_r+0x4e>
 800245a:	4621      	mov	r1, r4
 800245c:	4628      	mov	r0, r5
 800245e:	f7ff ffb3 	bl	80023c8 <_fflush_r>
 8002462:	2800      	cmp	r0, #0
 8002464:	d1ed      	bne.n	8002442 <__swbuf_r+0x2a>
 8002466:	68a3      	ldr	r3, [r4, #8]
 8002468:	3b01      	subs	r3, #1
 800246a:	60a3      	str	r3, [r4, #8]
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	6022      	str	r2, [r4, #0]
 8002472:	701e      	strb	r6, [r3, #0]
 8002474:	6962      	ldr	r2, [r4, #20]
 8002476:	1c43      	adds	r3, r0, #1
 8002478:	429a      	cmp	r2, r3
 800247a:	d004      	beq.n	8002486 <__swbuf_r+0x6e>
 800247c:	89a3      	ldrh	r3, [r4, #12]
 800247e:	07db      	lsls	r3, r3, #31
 8002480:	d5e1      	bpl.n	8002446 <__swbuf_r+0x2e>
 8002482:	2e0a      	cmp	r6, #10
 8002484:	d1df      	bne.n	8002446 <__swbuf_r+0x2e>
 8002486:	4621      	mov	r1, r4
 8002488:	4628      	mov	r0, r5
 800248a:	f7ff ff9d 	bl	80023c8 <_fflush_r>
 800248e:	2800      	cmp	r0, #0
 8002490:	d0d9      	beq.n	8002446 <__swbuf_r+0x2e>
 8002492:	e7d6      	b.n	8002442 <__swbuf_r+0x2a>

08002494 <__swsetup_r>:
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	4b29      	ldr	r3, [pc, #164]	@ (800253c <__swsetup_r+0xa8>)
 8002498:	4605      	mov	r5, r0
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	460c      	mov	r4, r1
 800249e:	b118      	cbz	r0, 80024a8 <__swsetup_r+0x14>
 80024a0:	6a03      	ldr	r3, [r0, #32]
 80024a2:	b90b      	cbnz	r3, 80024a8 <__swsetup_r+0x14>
 80024a4:	f7ff fa42 	bl	800192c <__sinit>
 80024a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024ac:	0719      	lsls	r1, r3, #28
 80024ae:	d422      	bmi.n	80024f6 <__swsetup_r+0x62>
 80024b0:	06da      	lsls	r2, r3, #27
 80024b2:	d407      	bmi.n	80024c4 <__swsetup_r+0x30>
 80024b4:	2209      	movs	r2, #9
 80024b6:	602a      	str	r2, [r5, #0]
 80024b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	81a3      	strh	r3, [r4, #12]
 80024c2:	e033      	b.n	800252c <__swsetup_r+0x98>
 80024c4:	0758      	lsls	r0, r3, #29
 80024c6:	d512      	bpl.n	80024ee <__swsetup_r+0x5a>
 80024c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024ca:	b141      	cbz	r1, 80024de <__swsetup_r+0x4a>
 80024cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80024d0:	4299      	cmp	r1, r3
 80024d2:	d002      	beq.n	80024da <__swsetup_r+0x46>
 80024d4:	4628      	mov	r0, r5
 80024d6:	f7ff fb31 	bl	8001b3c <_free_r>
 80024da:	2300      	movs	r3, #0
 80024dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80024e4:	81a3      	strh	r3, [r4, #12]
 80024e6:	2300      	movs	r3, #0
 80024e8:	6063      	str	r3, [r4, #4]
 80024ea:	6923      	ldr	r3, [r4, #16]
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	89a3      	ldrh	r3, [r4, #12]
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	81a3      	strh	r3, [r4, #12]
 80024f6:	6923      	ldr	r3, [r4, #16]
 80024f8:	b94b      	cbnz	r3, 800250e <__swsetup_r+0x7a>
 80024fa:	89a3      	ldrh	r3, [r4, #12]
 80024fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002504:	d003      	beq.n	800250e <__swsetup_r+0x7a>
 8002506:	4621      	mov	r1, r4
 8002508:	4628      	mov	r0, r5
 800250a:	f000 f85c 	bl	80025c6 <__smakebuf_r>
 800250e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002512:	f013 0201 	ands.w	r2, r3, #1
 8002516:	d00a      	beq.n	800252e <__swsetup_r+0x9a>
 8002518:	2200      	movs	r2, #0
 800251a:	60a2      	str	r2, [r4, #8]
 800251c:	6962      	ldr	r2, [r4, #20]
 800251e:	4252      	negs	r2, r2
 8002520:	61a2      	str	r2, [r4, #24]
 8002522:	6922      	ldr	r2, [r4, #16]
 8002524:	b942      	cbnz	r2, 8002538 <__swsetup_r+0xa4>
 8002526:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800252a:	d1c5      	bne.n	80024b8 <__swsetup_r+0x24>
 800252c:	bd38      	pop	{r3, r4, r5, pc}
 800252e:	0799      	lsls	r1, r3, #30
 8002530:	bf58      	it	pl
 8002532:	6962      	ldrpl	r2, [r4, #20]
 8002534:	60a2      	str	r2, [r4, #8]
 8002536:	e7f4      	b.n	8002522 <__swsetup_r+0x8e>
 8002538:	2000      	movs	r0, #0
 800253a:	e7f7      	b.n	800252c <__swsetup_r+0x98>
 800253c:	20000018 	.word	0x20000018

08002540 <_sbrk_r>:
 8002540:	b538      	push	{r3, r4, r5, lr}
 8002542:	2300      	movs	r3, #0
 8002544:	4d05      	ldr	r5, [pc, #20]	@ (800255c <_sbrk_r+0x1c>)
 8002546:	4604      	mov	r4, r0
 8002548:	4608      	mov	r0, r1
 800254a:	602b      	str	r3, [r5, #0]
 800254c:	f7fe f9a0 	bl	8000890 <_sbrk>
 8002550:	1c43      	adds	r3, r0, #1
 8002552:	d102      	bne.n	800255a <_sbrk_r+0x1a>
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	b103      	cbz	r3, 800255a <_sbrk_r+0x1a>
 8002558:	6023      	str	r3, [r4, #0]
 800255a:	bd38      	pop	{r3, r4, r5, pc}
 800255c:	200001d4 	.word	0x200001d4

08002560 <memchr>:
 8002560:	4603      	mov	r3, r0
 8002562:	b510      	push	{r4, lr}
 8002564:	b2c9      	uxtb	r1, r1
 8002566:	4402      	add	r2, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	4618      	mov	r0, r3
 800256c:	d101      	bne.n	8002572 <memchr+0x12>
 800256e:	2000      	movs	r0, #0
 8002570:	e003      	b.n	800257a <memchr+0x1a>
 8002572:	7804      	ldrb	r4, [r0, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	428c      	cmp	r4, r1
 8002578:	d1f6      	bne.n	8002568 <memchr+0x8>
 800257a:	bd10      	pop	{r4, pc}

0800257c <__swhatbuf_r>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	460c      	mov	r4, r1
 8002580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002584:	4615      	mov	r5, r2
 8002586:	2900      	cmp	r1, #0
 8002588:	461e      	mov	r6, r3
 800258a:	b096      	sub	sp, #88	@ 0x58
 800258c:	da0c      	bge.n	80025a8 <__swhatbuf_r+0x2c>
 800258e:	89a3      	ldrh	r3, [r4, #12]
 8002590:	2100      	movs	r1, #0
 8002592:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002596:	bf14      	ite	ne
 8002598:	2340      	movne	r3, #64	@ 0x40
 800259a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800259e:	2000      	movs	r0, #0
 80025a0:	6031      	str	r1, [r6, #0]
 80025a2:	602b      	str	r3, [r5, #0]
 80025a4:	b016      	add	sp, #88	@ 0x58
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	466a      	mov	r2, sp
 80025aa:	f000 f849 	bl	8002640 <_fstat_r>
 80025ae:	2800      	cmp	r0, #0
 80025b0:	dbed      	blt.n	800258e <__swhatbuf_r+0x12>
 80025b2:	9901      	ldr	r1, [sp, #4]
 80025b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80025b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80025bc:	4259      	negs	r1, r3
 80025be:	4159      	adcs	r1, r3
 80025c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025c4:	e7eb      	b.n	800259e <__swhatbuf_r+0x22>

080025c6 <__smakebuf_r>:
 80025c6:	898b      	ldrh	r3, [r1, #12]
 80025c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ca:	079d      	lsls	r5, r3, #30
 80025cc:	4606      	mov	r6, r0
 80025ce:	460c      	mov	r4, r1
 80025d0:	d507      	bpl.n	80025e2 <__smakebuf_r+0x1c>
 80025d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80025d6:	6023      	str	r3, [r4, #0]
 80025d8:	6123      	str	r3, [r4, #16]
 80025da:	2301      	movs	r3, #1
 80025dc:	6163      	str	r3, [r4, #20]
 80025de:	b003      	add	sp, #12
 80025e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e2:	466a      	mov	r2, sp
 80025e4:	ab01      	add	r3, sp, #4
 80025e6:	f7ff ffc9 	bl	800257c <__swhatbuf_r>
 80025ea:	9f00      	ldr	r7, [sp, #0]
 80025ec:	4605      	mov	r5, r0
 80025ee:	4639      	mov	r1, r7
 80025f0:	4630      	mov	r0, r6
 80025f2:	f7ff fb0d 	bl	8001c10 <_malloc_r>
 80025f6:	b948      	cbnz	r0, 800260c <__smakebuf_r+0x46>
 80025f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025fc:	059a      	lsls	r2, r3, #22
 80025fe:	d4ee      	bmi.n	80025de <__smakebuf_r+0x18>
 8002600:	f023 0303 	bic.w	r3, r3, #3
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	81a3      	strh	r3, [r4, #12]
 800260a:	e7e2      	b.n	80025d2 <__smakebuf_r+0xc>
 800260c:	89a3      	ldrh	r3, [r4, #12]
 800260e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002616:	81a3      	strh	r3, [r4, #12]
 8002618:	9b01      	ldr	r3, [sp, #4]
 800261a:	6020      	str	r0, [r4, #0]
 800261c:	b15b      	cbz	r3, 8002636 <__smakebuf_r+0x70>
 800261e:	4630      	mov	r0, r6
 8002620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002624:	f000 f81e 	bl	8002664 <_isatty_r>
 8002628:	b128      	cbz	r0, 8002636 <__smakebuf_r+0x70>
 800262a:	89a3      	ldrh	r3, [r4, #12]
 800262c:	f023 0303 	bic.w	r3, r3, #3
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	81a3      	strh	r3, [r4, #12]
 8002636:	89a3      	ldrh	r3, [r4, #12]
 8002638:	431d      	orrs	r5, r3
 800263a:	81a5      	strh	r5, [r4, #12]
 800263c:	e7cf      	b.n	80025de <__smakebuf_r+0x18>
	...

08002640 <_fstat_r>:
 8002640:	b538      	push	{r3, r4, r5, lr}
 8002642:	2300      	movs	r3, #0
 8002644:	4d06      	ldr	r5, [pc, #24]	@ (8002660 <_fstat_r+0x20>)
 8002646:	4604      	mov	r4, r0
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	602b      	str	r3, [r5, #0]
 800264e:	f7fe f8f9 	bl	8000844 <_fstat>
 8002652:	1c43      	adds	r3, r0, #1
 8002654:	d102      	bne.n	800265c <_fstat_r+0x1c>
 8002656:	682b      	ldr	r3, [r5, #0]
 8002658:	b103      	cbz	r3, 800265c <_fstat_r+0x1c>
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	bd38      	pop	{r3, r4, r5, pc}
 800265e:	bf00      	nop
 8002660:	200001d4 	.word	0x200001d4

08002664 <_isatty_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	2300      	movs	r3, #0
 8002668:	4d05      	ldr	r5, [pc, #20]	@ (8002680 <_isatty_r+0x1c>)
 800266a:	4604      	mov	r4, r0
 800266c:	4608      	mov	r0, r1
 800266e:	602b      	str	r3, [r5, #0]
 8002670:	f7fe f8f7 	bl	8000862 <_isatty>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d102      	bne.n	800267e <_isatty_r+0x1a>
 8002678:	682b      	ldr	r3, [r5, #0]
 800267a:	b103      	cbz	r3, 800267e <_isatty_r+0x1a>
 800267c:	6023      	str	r3, [r4, #0]
 800267e:	bd38      	pop	{r3, r4, r5, pc}
 8002680:	200001d4 	.word	0x200001d4

08002684 <_init>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	bf00      	nop
 8002688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268a:	bc08      	pop	{r3}
 800268c:	469e      	mov	lr, r3
 800268e:	4770      	bx	lr

08002690 <_fini>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr
