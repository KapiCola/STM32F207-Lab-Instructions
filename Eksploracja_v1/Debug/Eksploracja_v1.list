
Eksploracja_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f64  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080020e8  080020e8  000030e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002138  08002138  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002138  08002138  00003138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002140  08002140  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002140  08002140  00003140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002144  08002144  00003144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002148  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000068  080021b0  00004068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080021b0  000041e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a6a  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f3  00000000  00000000  00008afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000015d9  00000000  00000000  00009fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000460  00000000  00000000  0000b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ee  00000000  00000000  0000ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f4f8  00000000  00000000  0000bf16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006dd9  00000000  00000000  0002b40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b98f0  00000000  00000000  000321e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ebad7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011ac  00000000  00000000  000ebb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  000eccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000068 	.word	0x20000068
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080020d0 	.word	0x080020d0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000006c 	.word	0x2000006c
 80001c0:	080020d0 	.word	0x080020d0

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b98c 	b.w	80004f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	468e      	mov	lr, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14a      	bne.n	800029a <__udivmoddi4+0xa6>
 8000204:	428a      	cmp	r2, r1
 8000206:	4617      	mov	r7, r2
 8000208:	d962      	bls.n	80002d0 <__udivmoddi4+0xdc>
 800020a:	fab2 f682 	clz	r6, r2
 800020e:	b14e      	cbz	r6, 8000224 <__udivmoddi4+0x30>
 8000210:	f1c6 0320 	rsb	r3, r6, #32
 8000214:	fa01 f806 	lsl.w	r8, r1, r6
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	40b7      	lsls	r7, r6
 800021e:	ea43 0808 	orr.w	r8, r3, r8
 8000222:	40b4      	lsls	r4, r6
 8000224:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000228:	fbb8 f1fe 	udiv	r1, r8, lr
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fb0e 8811 	mls	r8, lr, r1, r8
 8000234:	fb01 f20c 	mul.w	r2, r1, ip
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	429a      	cmp	r2, r3
 8000240:	d909      	bls.n	8000256 <__udivmoddi4+0x62>
 8000242:	18fb      	adds	r3, r7, r3
 8000244:	f101 30ff 	add.w	r0, r1, #4294967295
 8000248:	f080 80eb 	bcs.w	8000422 <__udivmoddi4+0x22e>
 800024c:	429a      	cmp	r2, r3
 800024e:	f240 80e8 	bls.w	8000422 <__udivmoddi4+0x22e>
 8000252:	3902      	subs	r1, #2
 8000254:	443b      	add	r3, r7
 8000256:	1a9a      	subs	r2, r3, r2
 8000258:	fbb2 f0fe 	udiv	r0, r2, lr
 800025c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000260:	fb00 fc0c 	mul.w	ip, r0, ip
 8000264:	b2a3      	uxth	r3, r4
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	459c      	cmp	ip, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f100 32ff 	add.w	r2, r0, #4294967295
 8000274:	f080 80d7 	bcs.w	8000426 <__udivmoddi4+0x232>
 8000278:	459c      	cmp	ip, r3
 800027a:	f240 80d4 	bls.w	8000426 <__udivmoddi4+0x232>
 800027e:	443b      	add	r3, r7
 8000280:	3802      	subs	r0, #2
 8000282:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000286:	2100      	movs	r1, #0
 8000288:	eba3 030c 	sub.w	r3, r3, ip
 800028c:	b11d      	cbz	r5, 8000296 <__udivmoddi4+0xa2>
 800028e:	2200      	movs	r2, #0
 8000290:	40f3      	lsrs	r3, r6
 8000292:	e9c5 3200 	strd	r3, r2, [r5]
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d905      	bls.n	80002aa <__udivmoddi4+0xb6>
 800029e:	b10d      	cbz	r5, 80002a4 <__udivmoddi4+0xb0>
 80002a0:	e9c5 0100 	strd	r0, r1, [r5]
 80002a4:	2100      	movs	r1, #0
 80002a6:	4608      	mov	r0, r1
 80002a8:	e7f5      	b.n	8000296 <__udivmoddi4+0xa2>
 80002aa:	fab3 f183 	clz	r1, r3
 80002ae:	2900      	cmp	r1, #0
 80002b0:	d146      	bne.n	8000340 <__udivmoddi4+0x14c>
 80002b2:	4573      	cmp	r3, lr
 80002b4:	d302      	bcc.n	80002bc <__udivmoddi4+0xc8>
 80002b6:	4282      	cmp	r2, r0
 80002b8:	f200 8108 	bhi.w	80004cc <__udivmoddi4+0x2d8>
 80002bc:	1a84      	subs	r4, r0, r2
 80002be:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c2:	2001      	movs	r0, #1
 80002c4:	4690      	mov	r8, r2
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	d0e5      	beq.n	8000296 <__udivmoddi4+0xa2>
 80002ca:	e9c5 4800 	strd	r4, r8, [r5]
 80002ce:	e7e2      	b.n	8000296 <__udivmoddi4+0xa2>
 80002d0:	2a00      	cmp	r2, #0
 80002d2:	f000 8091 	beq.w	80003f8 <__udivmoddi4+0x204>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f040 80a5 	bne.w	800042a <__udivmoddi4+0x236>
 80002e0:	1a8a      	subs	r2, r1, r2
 80002e2:	2101      	movs	r1, #1
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ea:	b280      	uxth	r0, r0
 80002ec:	b2bc      	uxth	r4, r7
 80002ee:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f2:	fb0e 221c 	mls	r2, lr, ip, r2
 80002f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fa:	fb04 f20c 	mul.w	r2, r4, ip
 80002fe:	429a      	cmp	r2, r3
 8000300:	d907      	bls.n	8000312 <__udivmoddi4+0x11e>
 8000302:	18fb      	adds	r3, r7, r3
 8000304:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x11c>
 800030a:	429a      	cmp	r2, r3
 800030c:	f200 80e3 	bhi.w	80004d6 <__udivmoddi4+0x2e2>
 8000310:	46c4      	mov	ip, r8
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	fbb3 f2fe 	udiv	r2, r3, lr
 8000318:	fb0e 3312 	mls	r3, lr, r2, r3
 800031c:	fb02 f404 	mul.w	r4, r2, r4
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	429c      	cmp	r4, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x144>
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	f102 30ff 	add.w	r0, r2, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x142>
 8000330:	429c      	cmp	r4, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2dc>
 8000336:	4602      	mov	r2, r0
 8000338:	1b1b      	subs	r3, r3, r4
 800033a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800033e:	e7a5      	b.n	800028c <__udivmoddi4+0x98>
 8000340:	f1c1 0620 	rsb	r6, r1, #32
 8000344:	408b      	lsls	r3, r1
 8000346:	fa22 f706 	lsr.w	r7, r2, r6
 800034a:	431f      	orrs	r7, r3
 800034c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000350:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000354:	fbba f8f9 	udiv	r8, sl, r9
 8000358:	fa0e fe01 	lsl.w	lr, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fb09 aa18 	mls	sl, r9, r8, sl
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	ea43 030e 	orr.w	r3, r3, lr
 800036c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000370:	fb08 f00c 	mul.w	r0, r8, ip
 8000374:	0c1c      	lsrs	r4, r3, #16
 8000376:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800037a:	42a0      	cmp	r0, r4
 800037c:	fa02 f201 	lsl.w	r2, r2, r1
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x1a4>
 8000382:	193c      	adds	r4, r7, r4
 8000384:	f108 3aff 	add.w	sl, r8, #4294967295
 8000388:	f080 809e 	bcs.w	80004c8 <__udivmoddi4+0x2d4>
 800038c:	42a0      	cmp	r0, r4
 800038e:	f240 809b 	bls.w	80004c8 <__udivmoddi4+0x2d4>
 8000392:	f1a8 0802 	sub.w	r8, r8, #2
 8000396:	443c      	add	r4, r7
 8000398:	1a24      	subs	r4, r4, r0
 800039a:	b298      	uxth	r0, r3
 800039c:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a0:	fb09 4413 	mls	r4, r9, r3, r4
 80003a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003a8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ac:	45a4      	cmp	ip, r4
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003b6:	f080 8085 	bcs.w	80004c4 <__udivmoddi4+0x2d0>
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	f240 8082 	bls.w	80004c4 <__udivmoddi4+0x2d0>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	443c      	add	r4, r7
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	eba4 040c 	sub.w	r4, r4, ip
 80003cc:	fba0 8c02 	umull	r8, ip, r0, r2
 80003d0:	4564      	cmp	r4, ip
 80003d2:	4643      	mov	r3, r8
 80003d4:	46e1      	mov	r9, ip
 80003d6:	d364      	bcc.n	80004a2 <__udivmoddi4+0x2ae>
 80003d8:	d061      	beq.n	800049e <__udivmoddi4+0x2aa>
 80003da:	b15d      	cbz	r5, 80003f4 <__udivmoddi4+0x200>
 80003dc:	ebbe 0203 	subs.w	r2, lr, r3
 80003e0:	eb64 0409 	sbc.w	r4, r4, r9
 80003e4:	fa04 f606 	lsl.w	r6, r4, r6
 80003e8:	fa22 f301 	lsr.w	r3, r2, r1
 80003ec:	431e      	orrs	r6, r3
 80003ee:	40cc      	lsrs	r4, r1
 80003f0:	e9c5 6400 	strd	r6, r4, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	e74e      	b.n	8000296 <__udivmoddi4+0xa2>
 80003f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fc:	0c01      	lsrs	r1, r0, #16
 80003fe:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000402:	b280      	uxth	r0, r0
 8000404:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000408:	463b      	mov	r3, r7
 800040a:	fbb1 f1f7 	udiv	r1, r1, r7
 800040e:	4638      	mov	r0, r7
 8000410:	463c      	mov	r4, r7
 8000412:	46b8      	mov	r8, r7
 8000414:	46be      	mov	lr, r7
 8000416:	2620      	movs	r6, #32
 8000418:	eba2 0208 	sub.w	r2, r2, r8
 800041c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000420:	e765      	b.n	80002ee <__udivmoddi4+0xfa>
 8000422:	4601      	mov	r1, r0
 8000424:	e717      	b.n	8000256 <__udivmoddi4+0x62>
 8000426:	4610      	mov	r0, r2
 8000428:	e72b      	b.n	8000282 <__udivmoddi4+0x8e>
 800042a:	f1c6 0120 	rsb	r1, r6, #32
 800042e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000432:	40b7      	lsls	r7, r6
 8000434:	fa0e fe06 	lsl.w	lr, lr, r6
 8000438:	fa20 f101 	lsr.w	r1, r0, r1
 800043c:	ea41 010e 	orr.w	r1, r1, lr
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fbbc f8fe 	udiv	r8, ip, lr
 8000448:	b2bc      	uxth	r4, r7
 800044a:	fb0e cc18 	mls	ip, lr, r8, ip
 800044e:	fb08 f904 	mul.w	r9, r8, r4
 8000452:	0c0a      	lsrs	r2, r1, #16
 8000454:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000458:	40b0      	lsls	r0, r6
 800045a:	4591      	cmp	r9, r2
 800045c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000460:	b280      	uxth	r0, r0
 8000462:	d93e      	bls.n	80004e2 <__udivmoddi4+0x2ee>
 8000464:	18ba      	adds	r2, r7, r2
 8000466:	f108 3cff 	add.w	ip, r8, #4294967295
 800046a:	d201      	bcs.n	8000470 <__udivmoddi4+0x27c>
 800046c:	4591      	cmp	r9, r2
 800046e:	d81f      	bhi.n	80004b0 <__udivmoddi4+0x2bc>
 8000470:	eba2 0209 	sub.w	r2, r2, r9
 8000474:	fbb2 f9fe 	udiv	r9, r2, lr
 8000478:	fb09 f804 	mul.w	r8, r9, r4
 800047c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000480:	b28a      	uxth	r2, r1
 8000482:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000486:	4542      	cmp	r2, r8
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ea>
 800048a:	18ba      	adds	r2, r7, r2
 800048c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000490:	d2c2      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000492:	4542      	cmp	r2, r8
 8000494:	d2c0      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000496:	f1a9 0102 	sub.w	r1, r9, #2
 800049a:	443a      	add	r2, r7
 800049c:	e7bc      	b.n	8000418 <__udivmoddi4+0x224>
 800049e:	45c6      	cmp	lr, r8
 80004a0:	d29b      	bcs.n	80003da <__udivmoddi4+0x1e6>
 80004a2:	ebb8 0302 	subs.w	r3, r8, r2
 80004a6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	46e1      	mov	r9, ip
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e6>
 80004b0:	eba7 0909 	sub.w	r9, r7, r9
 80004b4:	444a      	add	r2, r9
 80004b6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ba:	f1a8 0c02 	sub.w	ip, r8, #2
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	e7db      	b.n	800047c <__udivmoddi4+0x288>
 80004c4:	4603      	mov	r3, r0
 80004c6:	e77d      	b.n	80003c4 <__udivmoddi4+0x1d0>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e765      	b.n	8000398 <__udivmoddi4+0x1a4>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e6fa      	b.n	80002c6 <__udivmoddi4+0xd2>
 80004d0:	443b      	add	r3, r7
 80004d2:	3a02      	subs	r2, #2
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x144>
 80004d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80004da:	443b      	add	r3, r7
 80004dc:	e719      	b.n	8000312 <__udivmoddi4+0x11e>
 80004de:	4649      	mov	r1, r9
 80004e0:	e79a      	b.n	8000418 <__udivmoddi4+0x224>
 80004e2:	eba2 0209 	sub.w	r2, r2, r9
 80004e6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ea:	46c4      	mov	ip, r8
 80004ec:	fb09 f804 	mul.w	r8, r9, r4
 80004f0:	e7c4      	b.n	800047c <__udivmoddi4+0x288>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <SysTick_Handler>:

//tick counter
volatile uint64_t ticks;

/** SysTick Interruption Handler */
void SysTick_Handler(void){
 80004f8:	b410      	push	{r4}
	ticks++;
 80004fa:	4c05      	ldr	r4, [pc, #20]	@ (8000510 <SysTick_Handler+0x18>)
 80004fc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000500:	1c50      	adds	r0, r2, #1
 8000502:	f143 0100 	adc.w	r1, r3, #0
 8000506:	e9c4 0100 	strd	r0, r1, [r4]
}
 800050a:	bc10      	pop	{r4}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000088 	.word	0x20000088

08000514 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000514:	2001      	movs	r0, #1
 8000516:	2101      	movs	r1, #1
{
 8000518:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000520:	2402      	movs	r4, #2
{
 8000522:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000524:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000528:	2004      	movs	r0, #4
 800052a:	2104      	movs	r1, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052c:	e9cd 420c 	strd	r4, r2, [sp, #48]	@ 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000530:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000534:	2204      	movs	r2, #4
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000536:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800053a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000544:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000546:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 192;
 800054c:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f000 fbf4 	bl	8000d3c <HAL_RCC_OscConfig>
 8000554:	b108      	cbz	r0, 800055a <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000556:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	4603      	mov	r3, r0
 800055c:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800055e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800056a:	2103      	movs	r1, #3
 800056c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800056e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000574:	f000 fd9e 	bl	80010b4 <HAL_RCC_ClockConfig>
 8000578:	b108      	cbz	r0, 800057e <SystemClock_Config+0x6a>
 800057a:	b672      	cpsid	i
  while (1)
 800057c:	e7fe      	b.n	800057c <SystemClock_Config+0x68>
}
 800057e:	b013      	add	sp, #76	@ 0x4c
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <main>:
{
 8000584:	b500      	push	{lr}
 8000586:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 8000588:	f000 f92c 	bl	80007e4 <HAL_Init>
  SystemClock_Config();
 800058c:	f7ff ffc2 	bl	8000514 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	2200      	movs	r2, #0
 8000592:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8000596:	e9cd 2204 	strd	r2, r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <main+0x94>)
 800059c:	9200      	str	r2, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	9206      	str	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a0:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOA, Led_Red_Pin|Led_Green_Pin, GPIO_PIN_RESET);
 80005a2:	2106      	movs	r1, #6
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a4:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 80005a8:	631c      	str	r4, [r3, #48]	@ 0x30
 80005aa:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOA, Led_Red_Pin|Led_Green_Pin, GPIO_PIN_RESET);
 80005ac:	481b      	ldr	r0, [pc, #108]	@ (800061c <main+0x98>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	f004 0480 	and.w	r4, r4, #128	@ 0x80
 80005b2:	9400      	str	r4, [sp, #0]
 80005b4:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
  GPIO_InitStruct.Pin = Led_Red_Pin|Led_Green_Pin;
 80005ba:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	f044 0401 	orr.w	r4, r4, #1
 80005c0:	631c      	str	r4, [r3, #48]	@ 0x30
 80005c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  GPIO_InitStruct.Pin = Led_Red_Pin|Led_Green_Pin;
 80005c4:	2406      	movs	r4, #6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, Led_Red_Pin|Led_Green_Pin, GPIO_PIN_RESET);
 80005ce:	f000 fba7 	bl	8000d20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Led_Red_Pin|Led_Green_Pin;
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	4811      	ldr	r0, [pc, #68]	@ (800061c <main+0x98>)
 80005d8:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = Led_Red_Pin|Led_Green_Pin;
 80005da:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80005de:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f000 f985 	bl	80008f0 <HAL_GPIO_Init>
 80005e6:	4c0e      	ldr	r4, [pc, #56]	@ (8000620 <main+0x9c>)
	  HAL_GPIO_TogglePin(Led_Green_GPIO_Port, Led_Green_Pin);
 80005e8:	4e0c      	ldr	r6, [pc, #48]	@ (800061c <main+0x98>)
	  printf("Tick: %lu\n", HAL_GetTick());
 80005ea:	4d0e      	ldr	r5, [pc, #56]	@ (8000624 <main+0xa0>)
	  HAL_GPIO_TogglePin(Led_Green_GPIO_Port, Led_Green_Pin);
 80005ec:	2104      	movs	r1, #4
 80005ee:	4630      	mov	r0, r6
 80005f0:	f000 fb9a 	bl	8000d28 <HAL_GPIO_TogglePin>
	uint64_t targetTick = ticks + ms;
 80005f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80005f8:	f512 70fa 	adds.w	r0, r2, #500	@ 0x1f4
 80005fc:	f143 0100 	adc.w	r1, r3, #0
	while(ticks < targetTick){
 8000600:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000604:	4282      	cmp	r2, r0
 8000606:	418b      	sbcs	r3, r1
 8000608:	d3fa      	bcc.n	8000600 <main+0x7c>
	  printf("Tick: %lu\n", HAL_GetTick());
 800060a:	f000 f905 	bl	8000818 <HAL_GetTick>
 800060e:	4601      	mov	r1, r0
 8000610:	4628      	mov	r0, r5
 8000612:	f000 fee7 	bl	80013e4 <iprintf>
	  HAL_GPIO_TogglePin(Led_Green_GPIO_Port, Led_Green_Pin);
 8000616:	e7e9      	b.n	80005ec <main+0x68>
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	20000088 	.word	0x20000088
 8000624:	080020e8 	.word	0x080020e8

08000628 <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000628:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800062c:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
 8000630:	07d1      	lsls	r1, r2, #31
 8000632:	d503      	bpl.n	800063c <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000634:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000638:	07d2      	lsls	r2, r2, #31
 800063a:	d401      	bmi.n	8000640 <__io_putchar+0x18>
}
 800063c:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800063e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	2a00      	cmp	r2, #0
 8000644:	d0fb      	beq.n	800063e <__io_putchar+0x16>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000646:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800064a:	b2c2      	uxtb	r2, r0
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	4770      	bx	lr

08000650 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000650:	2100      	movs	r1, #0
{
 8000652:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000654:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <HAL_MspInit+0x34>)
 8000656:	9100      	str	r1, [sp, #0]
 8000658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800065a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800065e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000662:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000666:	9200      	str	r2, [sp, #0]
 8000668:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	9101      	str	r1, [sp, #4]
 800066c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800066e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000672:	641a      	str	r2, [r3, #64]	@ 0x40
 8000674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	b002      	add	sp, #8
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800

08000688 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler>
 800068a:	bf00      	nop

0800068c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <HardFault_Handler>
 800068e:	bf00      	nop

08000690 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler>
 8000692:	bf00      	nop

08000694 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <BusFault_Handler>
 8000696:	bf00      	nop

08000698 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <UsageFault_Handler>
 800069a:	bf00      	nop

0800069c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	1e16      	subs	r6, r2, #0
 80006ac:	dd07      	ble.n	80006be <_read+0x16>
 80006ae:	460c      	mov	r4, r1
 80006b0:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80006b2:	f3af 8000 	nop.w
 80006b6:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ba:	42a5      	cmp	r5, r4
 80006bc:	d1f9      	bne.n	80006b2 <_read+0xa>
  }

  return len;
}
 80006be:	4630      	mov	r0, r6
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	bf00      	nop

080006c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006c4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	1e16      	subs	r6, r2, #0
 80006c8:	dd07      	ble.n	80006da <_write+0x16>
 80006ca:	460c      	mov	r4, r1
 80006cc:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80006ce:	f814 0b01 	ldrb.w	r0, [r4], #1
 80006d2:	f7ff ffa9 	bl	8000628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	42a5      	cmp	r5, r4
 80006d8:	d1f9      	bne.n	80006ce <_write+0xa>
  }
  return len;
}
 80006da:	4630      	mov	r0, r6
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	bf00      	nop

080006e0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80006e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80006ec:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80006ee:	604b      	str	r3, [r1, #4]
}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80006f4:	2001      	movs	r0, #1
 80006f6:	4770      	bx	lr

080006f8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80006f8:	2000      	movs	r0, #0
 80006fa:	4770      	bx	lr

080006fc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006fc:	490d      	ldr	r1, [pc, #52]	@ (8000734 <_sbrk+0x38>)
{
 80006fe:	4603      	mov	r3, r0
 8000700:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <_sbrk+0x3c>)
 8000704:	4c0d      	ldr	r4, [pc, #52]	@ (800073c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000706:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000708:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800070a:	b120      	cbz	r0, 8000716 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070c:	4403      	add	r3, r0
 800070e:	4293      	cmp	r3, r2
 8000710:	d807      	bhi.n	8000722 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000712:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000714:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000716:	4c0a      	ldr	r4, [pc, #40]	@ (8000740 <_sbrk+0x44>)
 8000718:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800071a:	4403      	add	r3, r0
 800071c:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800071e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000720:	d9f7      	bls.n	8000712 <_sbrk+0x16>
    errno = ENOMEM;
 8000722:	f000 ff03 	bl	800152c <__errno>
 8000726:	220c      	movs	r2, #12
 8000728:	4603      	mov	r3, r0
    return (void *)-1;
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bd10      	pop	{r4, pc}
 8000732:	bf00      	nop
 8000734:	20000090 	.word	0x20000090
 8000738:	20020000 	.word	0x20020000
 800073c:	00000400 	.word	0x00000400
 8000740:	200001e8 	.word	0x200001e8

08000744 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000780 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 800074c:	f7ff fffa 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	@ (8000784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	@ (8000788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	@ (8000794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000776:	f000 fedf 	bl	8001538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077a:	f7ff ff03 	bl	8000584 <main>
  bx  lr
 800077e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800078c:	08002148 	.word	0x08002148
  ldr r2, =_sbss
 8000790:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000794:	200001e4 	.word	0x200001e4

08000798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC_IRQHandler>
	...

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a2:	4a0d      	ldr	r2, [pc, #52]	@ (80007d8 <HAL_InitTick+0x3c>)
{
 80007a4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a6:	7811      	ldrb	r1, [r2, #0]
 80007a8:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <HAL_InitTick+0x40>)
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	fbb2 f0f3 	udiv	r0, r2, r3
 80007b4:	f000 f884 	bl	80008c0 <HAL_SYSTICK_Config>
 80007b8:	b908      	cbnz	r0, 80007be <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ba:	2d0f      	cmp	r5, #15
 80007bc:	d901      	bls.n	80007c2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80007be:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80007c0:	bd38      	pop	{r3, r4, r5, pc}
 80007c2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	4602      	mov	r2, r0
 80007c6:	4629      	mov	r1, r5
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f83c 	bl	8000848 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4b03      	ldr	r3, [pc, #12]	@ (80007e0 <HAL_InitTick+0x44>)
 80007d2:	4620      	mov	r0, r4
 80007d4:	601d      	str	r5, [r3, #0]
}
 80007d6:	bd38      	pop	{r3, r4, r5, pc}
 80007d8:	20000004 	.word	0x20000004
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000008 	.word	0x20000008

080007e4 <HAL_Init>:
{
 80007e4:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <HAL_Init+0x30>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80007f0:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80007f8:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000800:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000802:	f000 f80f 	bl	8000824 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000806:	200f      	movs	r0, #15
 8000808:	f7ff ffc8 	bl	800079c <HAL_InitTick>
  HAL_MspInit();
 800080c:	f7ff ff20 	bl	8000650 <HAL_MspInit>
}
 8000810:	2000      	movs	r0, #0
 8000812:	bd08      	pop	{r3, pc}
 8000814:	40023c00 	.word	0x40023c00

08000818 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000818:	4b01      	ldr	r3, [pc, #4]	@ (8000820 <HAL_GetTick+0x8>)
 800081a:	6818      	ldr	r0, [r3, #0]
}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000094 	.word	0x20000094

08000824 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000824:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4906      	ldr	r1, [pc, #24]	@ (8000844 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800082a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800082e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000840:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084a:	b500      	push	{lr}
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000852:	f1c3 0e07 	rsb	lr, r3, #7
 8000856:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085e:	bf28      	it	cs
 8000860:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000864:	f1bc 0f06 	cmp.w	ip, #6
 8000868:	d91c      	bls.n	80008a4 <HAL_NVIC_SetPriority+0x5c>
 800086a:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	fa03 f30c 	lsl.w	r3, r3, ip
 8000876:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	fa03 f30e 	lsl.w	r3, r3, lr
 8000882:	ea21 0303 	bic.w	r3, r1, r3
 8000886:	fa03 f30c 	lsl.w	r3, r3, ip
 800088a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800088e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000892:	db0a      	blt.n	80008aa <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000898:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800089c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80008a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	4694      	mov	ip, r2
 80008a8:	e7e7      	b.n	800087a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <HAL_NVIC_SetPriority+0x74>)
 80008ac:	f000 000f 	and.w	r0, r0, #15
 80008b0:	4402      	add	r2, r0
 80008b2:	7613      	strb	r3, [r2, #24]
 80008b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008b8:	e000ed00 	.word	0xe000ed00
 80008bc:	e000ecfc 	.word	0xe000ecfc

080008c0 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c0:	3801      	subs	r0, #1
 80008c2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80008c6:	d301      	bcc.n	80008cc <HAL_SYSTICK_Config+0xc>
    return (1UL);                                                   /* Reload value impossible */
 80008c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008ca:	4770      	bx	lr
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	2107      	movs	r1, #7
{
 80008d8:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	4c04      	ldr	r4, [pc, #16]	@ (80008ec <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008dc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  return (0UL);                                                     /* Function successful */
 80008e2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	619a      	str	r2, [r3, #24]
}
 80008e6:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e8:	6119      	str	r1, [r3, #16]
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f0:	680b      	ldr	r3, [r1, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 81e3 	beq.w	8000cbe <HAL_GPIO_Init+0x3ce>
{
 80008f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008fc:	4ad4      	ldr	r2, [pc, #848]	@ (8000c50 <HAL_GPIO_Init+0x360>)
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008fe:	f04f 0b01 	mov.w	fp, #1
 8000902:	4290      	cmp	r0, r2
{
 8000904:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8000906:	f04f 0200 	mov.w	r2, #0
 800090a:	f000 80f0 	beq.w	8000aee <HAL_GPIO_Init+0x1fe>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800090e:	f8df e344 	ldr.w	lr, [pc, #836]	@ 8000c54 <HAL_GPIO_Init+0x364>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000912:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8000916:	ea1c 0a03 	ands.w	sl, ip, r3
 800091a:	f000 8092 	beq.w	8000a42 <HAL_GPIO_Init+0x152>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800091e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000920:	684d      	ldr	r5, [r1, #4]
 8000922:	0054      	lsls	r4, r2, #1
 8000924:	f005 0703 	and.w	r7, r5, #3
 8000928:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800092c:	40a6      	lsls	r6, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800092e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000932:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000936:	f240 808c 	bls.w	8000a52 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800093a:	2f03      	cmp	r7, #3
 800093c:	f040 81d2 	bne.w	8000ce4 <HAL_GPIO_Init+0x3f4>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000940:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8000944:	6807      	ldr	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000946:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800094a:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800094e:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8000952:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000954:	d075      	beq.n	8000a42 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2400      	movs	r4, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000958:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095c:	4ebe      	ldr	r6, [pc, #760]	@ (8000c58 <HAL_GPIO_Init+0x368>)
 800095e:	9403      	str	r4, [sp, #12]
 8000960:	6c74      	ldr	r4, [r6, #68]	@ 0x44
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000962:	f002 0703 	and.w	r7, r2, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800096a:	6474      	str	r4, [r6, #68]	@ 0x44
 800096c:	6c74      	ldr	r4, [r6, #68]	@ 0x44
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800096e:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000970:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000974:	9403      	str	r4, [sp, #12]
 8000976:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000978:	f022 0403 	bic.w	r4, r2, #3
 800097c:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8000980:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
 8000984:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000986:	fa0c fc07 	lsl.w	ip, ip, r7
 800098a:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800098e:	f8df c2cc 	ldr.w	ip, [pc, #716]	@ 8000c5c <HAL_GPIO_Init+0x36c>
 8000992:	4560      	cmp	r0, ip
 8000994:	f000 80a5 	beq.w	8000ae2 <HAL_GPIO_Init+0x1f2>
 8000998:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8000c60 <HAL_GPIO_Init+0x370>
 800099c:	4560      	cmp	r0, ip
 800099e:	d024      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 80009a0:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8000c64 <HAL_GPIO_Init+0x374>
 80009a4:	4560      	cmp	r0, ip
 80009a6:	f000 8184 	beq.w	8000cb2 <HAL_GPIO_Init+0x3c2>
 80009aa:	f8df c2bc 	ldr.w	ip, [pc, #700]	@ 8000c68 <HAL_GPIO_Init+0x378>
 80009ae:	4560      	cmp	r0, ip
 80009b0:	f000 8186 	beq.w	8000cc0 <HAL_GPIO_Init+0x3d0>
 80009b4:	f8df c2b4 	ldr.w	ip, [pc, #692]	@ 8000c6c <HAL_GPIO_Init+0x37c>
 80009b8:	4560      	cmp	r0, ip
 80009ba:	f000 8174 	beq.w	8000ca6 <HAL_GPIO_Init+0x3b6>
 80009be:	f8df c2b0 	ldr.w	ip, [pc, #688]	@ 8000c70 <HAL_GPIO_Init+0x380>
 80009c2:	4560      	cmp	r0, ip
 80009c4:	f000 8182 	beq.w	8000ccc <HAL_GPIO_Init+0x3dc>
 80009c8:	f8df c2a8 	ldr.w	ip, [pc, #680]	@ 8000c74 <HAL_GPIO_Init+0x384>
 80009cc:	4560      	cmp	r0, ip
 80009ce:	f000 8183 	beq.w	8000cd8 <HAL_GPIO_Init+0x3e8>
 80009d2:	f8df c2a4 	ldr.w	ip, [pc, #676]	@ 8000c78 <HAL_GPIO_Init+0x388>
 80009d6:	4560      	cmp	r0, ip
 80009d8:	bf0c      	ite	eq
 80009da:	f04f 0c08 	moveq.w	ip, #8
 80009de:	f04f 0c09 	movne.w	ip, #9
 80009e2:	fa0c f707 	lsl.w	r7, ip, r7
 80009e6:	433e      	orrs	r6, r7
 80009e8:	e004      	b.n	80009f4 <HAL_GPIO_Init+0x104>
 80009ea:	f04f 0c02 	mov.w	ip, #2
 80009ee:	fa0c f707 	lsl.w	r7, ip, r7
 80009f2:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009f4:	60a6      	str	r6, [r4, #8]
        temp &= ~(iocurrent);
 80009f6:	ea6f 060a 	mvn.w	r6, sl
        temp = EXTI->RTSR;
 80009fa:	f8de 4008 	ldr.w	r4, [lr, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009fe:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 8000a00:	bf54      	ite	pl
 8000a02:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000a04:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR = temp;
 8000a08:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR;
 8000a0c:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a10:	02af      	lsls	r7, r5, #10
        temp &= ~(iocurrent);
 8000a12:	bf54      	ite	pl
 8000a14:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000a16:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR = temp;
 8000a1a:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR;
 8000a1e:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a22:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8000a24:	bf54      	ite	pl
 8000a26:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000a28:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR = temp;
 8000a2c:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a30:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a34:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8000a36:	bf54      	ite	pl
 8000a38:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000a3a:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR = temp;
 8000a3e:	f8ce 4000 	str.w	r4, [lr]
      }
    }

    position++;
 8000a42:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a44:	fa33 f402 	lsrs.w	r4, r3, r2
 8000a48:	f47f af63 	bne.w	8000912 <HAL_GPIO_Init+0x22>
  }
}
 8000a4c:	b005      	add	sp, #20
 8000a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8000a52:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a56:	f8d1 800c 	ldr.w	r8, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a5a:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a5e:	fa08 f804 	lsl.w	r8, r8, r4
 8000a62:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8000a66:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a6a:	f8d0 8004 	ldr.w	r8, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6e:	2f02      	cmp	r7, #2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a70:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a74:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 8000a78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7c:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8000a80:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8000a84:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a88:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a8c:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a90:	fa0c fc04 	lsl.w	ip, ip, r4
 8000a94:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8000a98:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a9c:	f47f af50 	bne.w	8000940 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8000aa0:	ea4f 08d2 	mov.w	r8, r2, lsr #3
 8000aa4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8000aa8:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aac:	f002 0c07 	and.w	ip, r2, #7
        temp = GPIOx->AFR[position >> 3u];
 8000ab0:	f8cd 9000 	str.w	r9, [sp]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab4:	f8d1 9010 	ldr.w	r9, [r1, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ab8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000abc:	fa09 f90c 	lsl.w	r9, r9, ip
 8000ac0:	f8cd 9004 	str.w	r9, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ac4:	f04f 090f 	mov.w	r9, #15
 8000ac8:	fa09 fc0c 	lsl.w	ip, r9, ip
 8000acc:	f8dd 9000 	ldr.w	r9, [sp]
 8000ad0:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ad4:	f8dd c004 	ldr.w	ip, [sp, #4]
 8000ad8:	ea4c 0c09 	orr.w	ip, ip, r9
        GPIOx->AFR[position >> 3u] = temp;
 8000adc:	f8c8 c020 	str.w	ip, [r8, #32]
 8000ae0:	e72e      	b.n	8000940 <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae2:	f04f 0c01 	mov.w	ip, #1
 8000ae6:	fa0c f707 	lsl.w	r7, ip, r7
 8000aea:	433e      	orrs	r6, r7
 8000aec:	e782      	b.n	80009f4 <HAL_GPIO_Init+0x104>
        temp = EXTI->RTSR;
 8000aee:	4e59      	ldr	r6, [pc, #356]	@ (8000c54 <HAL_GPIO_Init+0x364>)
 8000af0:	e04d      	b.n	8000b8e <HAL_GPIO_Init+0x29e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af2:	2c03      	cmp	r4, #3
 8000af4:	f040 8103 	bne.w	8000cfe <HAL_GPIO_Init+0x40e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af8:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8000afa:	6807      	ldr	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000afc:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b00:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b04:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8000b08:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b0a:	d03b      	beq.n	8000b84 <HAL_GPIO_Init+0x294>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0c:	2400      	movs	r4, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4f51      	ldr	r7, [pc, #324]	@ (8000c58 <HAL_GPIO_Init+0x368>)
 8000b14:	9403      	str	r4, [sp, #12]
 8000b16:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b18:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000b20:	647c      	str	r4, [r7, #68]	@ 0x44
 8000b22:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b24:	f002 0703 	and.w	r7, r2, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b28:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000b2c:	9403      	str	r4, [sp, #12]
 8000b2e:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b30:	f022 0403 	bic.w	r4, r2, #3
 8000b34:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8000b38:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b3c:	ea4f 0787 	mov.w	r7, r7, lsl #2
 8000b40:	fa0e f707 	lsl.w	r7, lr, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b44:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b48:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b4c:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR;
 8000b4e:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(iocurrent);
 8000b50:	ea6f 070c 	mvn.w	r7, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b54:	f040 80a4 	bne.w	8000ca0 <HAL_GPIO_Init+0x3b0>
        temp &= ~(iocurrent);
 8000b58:	403c      	ands	r4, r7
        EXTI->RTSR = temp;
 8000b5a:	60b4      	str	r4, [r6, #8]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b5c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp = EXTI->FTSR;
 8000b60:	68f4      	ldr	r4, [r6, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b62:	f040 808b 	bne.w	8000c7c <HAL_GPIO_Init+0x38c>
        temp &= ~(iocurrent);
 8000b66:	403c      	ands	r4, r7
        EXTI->FTSR = temp;
 8000b68:	60f4      	str	r4, [r6, #12]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b6a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp = EXTI->EMR;
 8000b6e:	6874      	ldr	r4, [r6, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b70:	f040 808c 	bne.w	8000c8c <HAL_GPIO_Init+0x39c>
        temp &= ~(iocurrent);
 8000b74:	403c      	ands	r4, r7
        EXTI->EMR = temp;
 8000b76:	6074      	str	r4, [r6, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b78:	03ed      	lsls	r5, r5, #15
        temp = EXTI->IMR;
 8000b7a:	6834      	ldr	r4, [r6, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b7c:	f100 808d 	bmi.w	8000c9a <HAL_GPIO_Init+0x3aa>
        temp &= ~(iocurrent);
 8000b80:	403c      	ands	r4, r7
        EXTI->IMR = temp;
 8000b82:	6034      	str	r4, [r6, #0]
    position++;
 8000b84:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b86:	fa33 f402 	lsrs.w	r4, r3, r2
 8000b8a:	f43f af5f 	beq.w	8000a4c <HAL_GPIO_Init+0x15c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b8e:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8000b92:	ea13 0c0e 	ands.w	ip, r3, lr
 8000b96:	d0f5      	beq.n	8000b84 <HAL_GPIO_Init+0x294>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b98:	f04f 0803 	mov.w	r8, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b9c:	684d      	ldr	r5, [r1, #4]
 8000b9e:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ba0:	fa08 f807 	lsl.w	r8, r8, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ba8:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bac:	f104 38ff 	add.w	r8, r4, #4294967295
 8000bb0:	f1b8 0f01 	cmp.w	r8, #1
 8000bb4:	d89d      	bhi.n	8000af2 <HAL_GPIO_Init+0x202>
        temp = GPIOx->OSPEEDR;
 8000bb6:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bba:	f8d1 800c 	ldr.w	r8, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bbe:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc2:	fa08 f807 	lsl.w	r8, r8, r7
 8000bc6:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8000bca:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bce:	f8d0 8004 	ldr.w	r8, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd2:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bd4:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd8:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8000bdc:	fa0e fe02 	lsl.w	lr, lr, r2
 8000be0:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8000be4:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8000be8:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bec:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bf0:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bf4:	fa0e fe07 	lsl.w	lr, lr, r7
 8000bf8:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8000bfc:	f8c0 e00c 	str.w	lr, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c00:	f47f af7a 	bne.w	8000af8 <HAL_GPIO_Init+0x208>
        temp = GPIOx->AFR[position >> 3u];
 8000c04:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 8000c08:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c0c:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 8000c10:	f50e 3e00 	add.w	lr, lr, #131072	@ 0x20000
 8000c14:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c18:	f002 0807 	and.w	r8, r2, #7
        temp = GPIOx->AFR[position >> 3u];
 8000c1c:	f8cd 9000 	str.w	r9, [sp]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c20:	f8d1 9010 	ldr.w	r9, [r1, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c24:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c28:	fa09 f908 	lsl.w	r9, r9, r8
 8000c2c:	f8cd 9004 	str.w	r9, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c30:	f04f 090f 	mov.w	r9, #15
 8000c34:	fa09 f808 	lsl.w	r8, r9, r8
 8000c38:	f8dd 9000 	ldr.w	r9, [sp]
 8000c3c:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000c44:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->AFR[position >> 3u] = temp;
 8000c48:	f8ce 8020 	str.w	r8, [lr, #32]
 8000c4c:	e754      	b.n	8000af8 <HAL_GPIO_Init+0x208>
 8000c4e:	bf00      	nop
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40013c00 	.word	0x40013c00
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020c00 	.word	0x40020c00
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40021800 	.word	0x40021800
 8000c74:	40021c00 	.word	0x40021c00
 8000c78:	40022000 	.word	0x40022000
          temp |= iocurrent;
 8000c7c:	ea4c 0404 	orr.w	r4, ip, r4
        EXTI->FTSR = temp;
 8000c80:	60f4      	str	r4, [r6, #12]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c82:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp = EXTI->EMR;
 8000c86:	6874      	ldr	r4, [r6, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c88:	f43f af74 	beq.w	8000b74 <HAL_GPIO_Init+0x284>
          temp |= iocurrent;
 8000c8c:	ea44 040c 	orr.w	r4, r4, ip
        EXTI->EMR = temp;
 8000c90:	6074      	str	r4, [r6, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c92:	03ed      	lsls	r5, r5, #15
        temp = EXTI->IMR;
 8000c94:	6834      	ldr	r4, [r6, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c96:	f57f af73 	bpl.w	8000b80 <HAL_GPIO_Init+0x290>
          temp |= iocurrent;
 8000c9a:	ea44 040c 	orr.w	r4, r4, ip
 8000c9e:	e770      	b.n	8000b82 <HAL_GPIO_Init+0x292>
          temp |= iocurrent;
 8000ca0:	ea4c 0404 	orr.w	r4, ip, r4
 8000ca4:	e759      	b.n	8000b5a <HAL_GPIO_Init+0x26a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ca6:	f04f 0c05 	mov.w	ip, #5
 8000caa:	fa0c f707 	lsl.w	r7, ip, r7
 8000cae:	433e      	orrs	r6, r7
 8000cb0:	e6a0      	b.n	80009f4 <HAL_GPIO_Init+0x104>
 8000cb2:	f04f 0c03 	mov.w	ip, #3
 8000cb6:	fa0c f707 	lsl.w	r7, ip, r7
 8000cba:	433e      	orrs	r6, r7
 8000cbc:	e69a      	b.n	80009f4 <HAL_GPIO_Init+0x104>
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0c04 	mov.w	ip, #4
 8000cc4:	fa0c f707 	lsl.w	r7, ip, r7
 8000cc8:	433e      	orrs	r6, r7
 8000cca:	e693      	b.n	80009f4 <HAL_GPIO_Init+0x104>
 8000ccc:	f04f 0c06 	mov.w	ip, #6
 8000cd0:	fa0c f707 	lsl.w	r7, ip, r7
 8000cd4:	433e      	orrs	r6, r7
 8000cd6:	e68d      	b.n	80009f4 <HAL_GPIO_Init+0x104>
 8000cd8:	f04f 0c07 	mov.w	ip, #7
 8000cdc:	fa0c f707 	lsl.w	r7, ip, r7
 8000ce0:	433e      	orrs	r6, r7
 8000ce2:	e687      	b.n	80009f4 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8000ce4:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ce8:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cec:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cf0:	fa0c fc04 	lsl.w	ip, ip, r4
 8000cf4:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8000cf8:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfc:	e620      	b.n	8000940 <HAL_GPIO_Init+0x50>
        temp = GPIOx->PUPDR;
 8000cfe:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8000d1c <HAL_GPIO_Init+0x42c>
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d02:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp = GPIOx->PUPDR;
 8000d06:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d0a:	fa0e fe07 	lsl.w	lr, lr, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d0e:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d12:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 8000d16:	f8c8 e00c 	str.w	lr, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1a:	e6ed      	b.n	8000af8 <HAL_GPIO_Init+0x208>
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d20:	b902      	cbnz	r2, 8000d24 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d22:	0409      	lsls	r1, r1, #16
 8000d24:	6181      	str	r1, [r0, #24]
  }
}
 8000d26:	4770      	bx	lr

08000d28 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d28:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d2a:	ea01 0203 	and.w	r2, r1, r3
 8000d2e:	ea21 0103 	bic.w	r1, r1, r3
 8000d32:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d36:	6181      	str	r1, [r0, #24]
}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	f000 81b0 	beq.w	80010a2 <HAL_RCC_OscConfig+0x366>
{
 8000d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d46:	6803      	ldr	r3, [r0, #0]
 8000d48:	4604      	mov	r4, r0
 8000d4a:	07dd      	lsls	r5, r3, #31
{
 8000d4c:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4e:	d521      	bpl.n	8000d94 <HAL_RCC_OscConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d50:	49a0      	ldr	r1, [pc, #640]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000d52:	688a      	ldr	r2, [r1, #8]
 8000d54:	f002 020c 	and.w	r2, r2, #12
 8000d58:	2a04      	cmp	r2, #4
 8000d5a:	f000 80e8 	beq.w	8000f2e <HAL_RCC_OscConfig+0x1f2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d5e:	688a      	ldr	r2, [r1, #8]
 8000d60:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d64:	2a08      	cmp	r2, #8
 8000d66:	f000 80de 	beq.w	8000f26 <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6a:	7923      	ldrb	r3, [r4, #4]
 8000d6c:	4d99      	ldr	r5, [pc, #612]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000d6e:	70ab      	strb	r3, [r5, #2]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d70:	6863      	ldr	r3, [r4, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 80c8 	beq.w	8000f08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fd4e 	bl	8000818 <HAL_GetTick>
 8000d7c:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7e:	e005      	b.n	8000d8c <HAL_RCC_OscConfig+0x50>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d80:	f7ff fd4a 	bl	8000818 <HAL_GetTick>
 8000d84:	1b80      	subs	r0, r0, r6
 8000d86:	2864      	cmp	r0, #100	@ 0x64
 8000d88:	f200 80fc 	bhi.w	8000f84 <HAL_RCC_OscConfig+0x248>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	039b      	lsls	r3, r3, #14
 8000d90:	d5f6      	bpl.n	8000d80 <HAL_RCC_OscConfig+0x44>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	079d      	lsls	r5, r3, #30
 8000d96:	d52d      	bpl.n	8000df4 <HAL_RCC_OscConfig+0xb8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d98:	4a8e      	ldr	r2, [pc, #568]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000d9a:	6891      	ldr	r1, [r2, #8]
 8000d9c:	f011 0f0c 	tst.w	r1, #12
 8000da0:	f000 8098 	beq.w	8000ed4 <HAL_RCC_OscConfig+0x198>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da4:	6891      	ldr	r1, [r2, #8]
 8000da6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000daa:	2908      	cmp	r1, #8
 8000dac:	f000 808e 	beq.w	8000ecc <HAL_RCC_OscConfig+0x190>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000db0:	68e3      	ldr	r3, [r4, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 80fc 	beq.w	8000fb0 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db8:	2201      	movs	r2, #1
 8000dba:	4b87      	ldr	r3, [pc, #540]	@ (8000fd8 <HAL_RCC_OscConfig+0x29c>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbc:	4e85      	ldr	r6, [pc, #532]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_ENABLE();
 8000dbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fd2a 	bl	8000818 <HAL_GetTick>
 8000dc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc6:	e005      	b.n	8000dd4 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc8:	f7ff fd26 	bl	8000818 <HAL_GetTick>
 8000dcc:	1b40      	subs	r0, r0, r5
 8000dce:	2802      	cmp	r0, #2
 8000dd0:	f200 80d8 	bhi.w	8000f84 <HAL_RCC_OscConfig+0x248>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd4:	6833      	ldr	r3, [r6, #0]
 8000dd6:	079f      	lsls	r7, r3, #30
 8000dd8:	d5f6      	bpl.n	8000dc8 <HAL_RCC_OscConfig+0x8c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dda:	22f8      	movs	r2, #248	@ 0xf8
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ddc:	6831      	ldr	r1, [r6, #0]
 8000dde:	fa92 f2a2 	rbit	r2, r2
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	6923      	ldr	r3, [r4, #16]
 8000de8:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 8000dec:	4093      	lsls	r3, r2
 8000dee:	430b      	orrs	r3, r1
 8000df0:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	071a      	lsls	r2, r3, #28
 8000df6:	d454      	bmi.n	8000ea2 <HAL_RCC_OscConfig+0x166>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df8:	075d      	lsls	r5, r3, #29
 8000dfa:	d533      	bpl.n	8000e64 <HAL_RCC_OscConfig+0x128>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfc:	4a75      	ldr	r2, [pc, #468]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000dfe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000e00:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	f040 808d 	bne.w	8000f22 <HAL_RCC_OscConfig+0x1e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000e08:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	9b01      	ldr	r3, [sp, #4]
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000e1e:	4e6f      	ldr	r6, [pc, #444]	@ (8000fdc <HAL_RCC_OscConfig+0x2a0>)
 8000e20:	6833      	ldr	r3, [r6, #0]
 8000e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e26:	6033      	str	r3, [r6, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e28:	6833      	ldr	r3, [r6, #0]
 8000e2a:	05d8      	lsls	r0, r3, #23
 8000e2c:	f140 809a 	bpl.w	8000f64 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e30:	7a23      	ldrb	r3, [r4, #8]
 8000e32:	4e68      	ldr	r6, [pc, #416]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000e34:	f886 3070 	strb.w	r3, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e38:	68a3      	ldr	r3, [r4, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80a6 	beq.w	8000f8c <HAL_RCC_OscConfig+0x250>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e40:	f7ff fcea 	bl	8000818 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e44:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8000e48:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e4a:	e005      	b.n	8000e58 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fce4 	bl	8000818 <HAL_GetTick>
 8000e50:	1bc0      	subs	r0, r0, r7
 8000e52:	4540      	cmp	r0, r8
 8000e54:	f200 8096 	bhi.w	8000f84 <HAL_RCC_OscConfig+0x248>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e58:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8000e5a:	079a      	lsls	r2, r3, #30
 8000e5c:	d5f6      	bpl.n	8000e4c <HAL_RCC_OscConfig+0x110>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f040 80e8 	bne.w	8001034 <HAL_RCC_OscConfig+0x2f8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e64:	69a3      	ldr	r3, [r4, #24]
 8000e66:	b1c3      	cbz	r3, 8000e9a <HAL_RCC_OscConfig+0x15e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e68:	4d5a      	ldr	r5, [pc, #360]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000e6a:	68aa      	ldr	r2, [r5, #8]
 8000e6c:	f002 020c 	and.w	r2, r2, #12
 8000e70:	2a08      	cmp	r2, #8
 8000e72:	f000 80b5 	beq.w	8000fe0 <HAL_RCC_OscConfig+0x2a4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e76:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e78:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000e7a:	4b57      	ldr	r3, [pc, #348]	@ (8000fd8 <HAL_RCC_OscConfig+0x29c>)
 8000e7c:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e7e:	f000 80df 	beq.w	8001040 <HAL_RCC_OscConfig+0x304>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fcc9 	bl	8000818 <HAL_GetTick>
 8000e86:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e88:	e004      	b.n	8000e94 <HAL_RCC_OscConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fcc5 	bl	8000818 <HAL_GetTick>
 8000e8e:	1b00      	subs	r0, r0, r4
 8000e90:	2864      	cmp	r0, #100	@ 0x64
 8000e92:	d877      	bhi.n	8000f84 <HAL_RCC_OscConfig+0x248>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	d4f7      	bmi.n	8000e8a <HAL_RCC_OscConfig+0x14e>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000e9a:	2000      	movs	r0, #0
}
 8000e9c:	b002      	add	sp, #8
 8000e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ea2:	6963      	ldr	r3, [r4, #20]
 8000ea4:	b1fb      	cbz	r3, 8000ee6 <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8000fd8 <HAL_RCC_OscConfig+0x29c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eaa:	4e4a      	ldr	r6, [pc, #296]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
      __HAL_RCC_LSI_ENABLE();
 8000eac:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fcb2 	bl	8000818 <HAL_GetTick>
 8000eb4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb6:	e004      	b.n	8000ec2 <HAL_RCC_OscConfig+0x186>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fcae 	bl	8000818 <HAL_GetTick>
 8000ebc:	1b40      	subs	r0, r0, r5
 8000ebe:	2802      	cmp	r0, #2
 8000ec0:	d860      	bhi.n	8000f84 <HAL_RCC_OscConfig+0x248>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec2:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8000ec4:	079b      	lsls	r3, r3, #30
 8000ec6:	d5f7      	bpl.n	8000eb8 <HAL_RCC_OscConfig+0x17c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	e795      	b.n	8000df8 <HAL_RCC_OscConfig+0xbc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ecc:	6852      	ldr	r2, [r2, #4]
 8000ece:	0251      	lsls	r1, r2, #9
 8000ed0:	f53f af6e 	bmi.w	8000db0 <HAL_RCC_OscConfig+0x74>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed4:	4a3f      	ldr	r2, [pc, #252]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	0792      	lsls	r2, r2, #30
 8000eda:	d532      	bpl.n	8000f42 <HAL_RCC_OscConfig+0x206>
 8000edc:	68e2      	ldr	r2, [r4, #12]
 8000ede:	2a01      	cmp	r2, #1
 8000ee0:	d02f      	beq.n	8000f42 <HAL_RCC_OscConfig+0x206>
    return HAL_ERROR;
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	e7da      	b.n	8000e9c <HAL_RCC_OscConfig+0x160>
      __HAL_RCC_LSI_DISABLE();
 8000ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8000fd8 <HAL_RCC_OscConfig+0x29c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee8:	4e3a      	ldr	r6, [pc, #232]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
      __HAL_RCC_LSI_DISABLE();
 8000eea:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000eee:	f7ff fc93 	bl	8000818 <HAL_GetTick>
 8000ef2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef4:	e004      	b.n	8000f00 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef6:	f7ff fc8f 	bl	8000818 <HAL_GetTick>
 8000efa:	1b40      	subs	r0, r0, r5
 8000efc:	2802      	cmp	r0, #2
 8000efe:	d841      	bhi.n	8000f84 <HAL_RCC_OscConfig+0x248>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f00:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8000f02:	079f      	lsls	r7, r3, #30
 8000f04:	d4f7      	bmi.n	8000ef6 <HAL_RCC_OscConfig+0x1ba>
 8000f06:	e7df      	b.n	8000ec8 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc86 	bl	8000818 <HAL_GetTick>
 8000f0c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0e:	e004      	b.n	8000f1a <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fc82 	bl	8000818 <HAL_GetTick>
 8000f14:	1b80      	subs	r0, r0, r6
 8000f16:	2864      	cmp	r0, #100	@ 0x64
 8000f18:	d834      	bhi.n	8000f84 <HAL_RCC_OscConfig+0x248>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	039f      	lsls	r7, r3, #14
 8000f1e:	d4f7      	bmi.n	8000f10 <HAL_RCC_OscConfig+0x1d4>
 8000f20:	e737      	b.n	8000d92 <HAL_RCC_OscConfig+0x56>
    FlagStatus       pwrclkchanged = RESET;
 8000f22:	2500      	movs	r5, #0
 8000f24:	e77b      	b.n	8000e1e <HAL_RCC_OscConfig+0xe2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f26:	684a      	ldr	r2, [r1, #4]
 8000f28:	0251      	lsls	r1, r2, #9
 8000f2a:	f57f af1e 	bpl.w	8000d6a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2e:	4a29      	ldr	r2, [pc, #164]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	0392      	lsls	r2, r2, #14
 8000f34:	f57f af2e 	bpl.w	8000d94 <HAL_RCC_OscConfig+0x58>
 8000f38:	6862      	ldr	r2, [r4, #4]
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	f47f af2a 	bne.w	8000d94 <HAL_RCC_OscConfig+0x58>
 8000f40:	e7cf      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f42:	4d24      	ldr	r5, [pc, #144]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
 8000f44:	21f8      	movs	r1, #248	@ 0xf8
 8000f46:	6828      	ldr	r0, [r5, #0]
 8000f48:	fa91 f1a1 	rbit	r1, r1
 8000f4c:	fab1 f181 	clz	r1, r1
 8000f50:	6922      	ldr	r2, [r4, #16]
 8000f52:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 8000f56:	408a      	lsls	r2, r1
 8000f58:	4302      	orrs	r2, r0
 8000f5a:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5c:	071a      	lsls	r2, r3, #28
 8000f5e:	f57f af4b 	bpl.w	8000df8 <HAL_RCC_OscConfig+0xbc>
 8000f62:	e79e      	b.n	8000ea2 <HAL_RCC_OscConfig+0x166>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f64:	6833      	ldr	r3, [r6, #0]
 8000f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f6a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fc54 	bl	8000818 <HAL_GetTick>
 8000f70:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f72:	6833      	ldr	r3, [r6, #0]
 8000f74:	05d9      	lsls	r1, r3, #23
 8000f76:	f53f af5b 	bmi.w	8000e30 <HAL_RCC_OscConfig+0xf4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f7a:	f7ff fc4d 	bl	8000818 <HAL_GetTick>
 8000f7e:	1bc0      	subs	r0, r0, r7
 8000f80:	2802      	cmp	r0, #2
 8000f82:	d9f6      	bls.n	8000f72 <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8000f84:	2003      	movs	r0, #3
}
 8000f86:	b002      	add	sp, #8
 8000f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fc44 	bl	8000818 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f90:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8000f94:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f96:	e004      	b.n	8000fa2 <HAL_RCC_OscConfig+0x266>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f98:	f7ff fc3e 	bl	8000818 <HAL_GetTick>
 8000f9c:	1bc0      	subs	r0, r0, r7
 8000f9e:	4540      	cmp	r0, r8
 8000fa0:	d8f0      	bhi.n	8000f84 <HAL_RCC_OscConfig+0x248>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa2:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8000fa4:	079b      	lsls	r3, r3, #30
 8000fa6:	d4f7      	bmi.n	8000f98 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	f43f af5b 	beq.w	8000e64 <HAL_RCC_OscConfig+0x128>
 8000fae:	e041      	b.n	8001034 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_HSI_DISABLE();
 8000fb0:	4a09      	ldr	r2, [pc, #36]	@ (8000fd8 <HAL_RCC_OscConfig+0x29c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4e08      	ldr	r6, [pc, #32]	@ (8000fd4 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 8000fb4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fc2f 	bl	8000818 <HAL_GetTick>
 8000fba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbc:	e004      	b.n	8000fc8 <HAL_RCC_OscConfig+0x28c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fc2b 	bl	8000818 <HAL_GetTick>
 8000fc2:	1b40      	subs	r0, r0, r5
 8000fc4:	2802      	cmp	r0, #2
 8000fc6:	d8dd      	bhi.n	8000f84 <HAL_RCC_OscConfig+0x248>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc8:	6833      	ldr	r3, [r6, #0]
 8000fca:	0799      	lsls	r1, r3, #30
 8000fcc:	d4f7      	bmi.n	8000fbe <HAL_RCC_OscConfig+0x282>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	e710      	b.n	8000df4 <HAL_RCC_OscConfig+0xb8>
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	42470000 	.word	0x42470000
 8000fdc:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f43f af7e 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x1a6>
        uint32_t pllcfgr = RCC->PLLCFGR;
 8000fe6:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe8:	69e2      	ldr	r2, [r4, #28]
 8000fea:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	f47f af77 	bne.w	8000ee2 <HAL_RCC_OscConfig+0x1a6>
 8000ff4:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ff6:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ffa:	4291      	cmp	r1, r2
 8000ffc:	f47f af71 	bne.w	8000ee2 <HAL_RCC_OscConfig+0x1a6>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001000:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001004:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001006:	401a      	ands	r2, r3
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001008:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800100c:	f47f af69 	bne.w	8000ee2 <HAL_RCC_OscConfig+0x1a6>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001010:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001012:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001016:	0852      	lsrs	r2, r2, #1
 8001018:	3a01      	subs	r2, #1
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800101a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800101e:	f47f af60 	bne.w	8000ee2 <HAL_RCC_OscConfig+0x1a6>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001022:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001024:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001028:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800102c:	bf14      	ite	ne
 800102e:	2001      	movne	r0, #1
 8001030:	2000      	moveq	r0, #0
 8001032:	e733      	b.n	8000e9c <HAL_RCC_OscConfig+0x160>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <HAL_RCC_OscConfig+0x36c>)
 8001036:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	@ 0x40
 800103e:	e711      	b.n	8000e64 <HAL_RCC_OscConfig+0x128>
        tickstart = HAL_GetTick();
 8001040:	f7ff fbea 	bl	8000818 <HAL_GetTick>
 8001044:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001046:	e004      	b.n	8001052 <HAL_RCC_OscConfig+0x316>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001048:	f7ff fbe6 	bl	8000818 <HAL_GetTick>
 800104c:	1b80      	subs	r0, r0, r6
 800104e:	2864      	cmp	r0, #100	@ 0x64
 8001050:	d898      	bhi.n	8000f84 <HAL_RCC_OscConfig+0x248>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001052:	682b      	ldr	r3, [r5, #0]
 8001054:	0199      	lsls	r1, r3, #6
 8001056:	d4f7      	bmi.n	8001048 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_ENABLE();
 8001058:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800105a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800105e:	686a      	ldr	r2, [r5, #4]
 8001060:	430b      	orrs	r3, r1
 8001062:	4912      	ldr	r1, [pc, #72]	@ (80010ac <HAL_RCC_OscConfig+0x370>)
 8001064:	400a      	ands	r2, r1
 8001066:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001068:	4313      	orrs	r3, r2
 800106a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800106e:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8001072:	40c2      	lsrs	r2, r0
 8001074:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001078:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800107a:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800107c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001080:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001082:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001084:	f7ff fbc8 	bl	8000818 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001088:	4d07      	ldr	r5, [pc, #28]	@ (80010a8 <HAL_RCC_OscConfig+0x36c>)
        tickstart = HAL_GetTick();
 800108a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108c:	e005      	b.n	800109a <HAL_RCC_OscConfig+0x35e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108e:	f7ff fbc3 	bl	8000818 <HAL_GetTick>
 8001092:	1b00      	subs	r0, r0, r4
 8001094:	2864      	cmp	r0, #100	@ 0x64
 8001096:	f63f af75 	bhi.w	8000f84 <HAL_RCC_OscConfig+0x248>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109a:	682b      	ldr	r3, [r5, #0]
 800109c:	019a      	lsls	r2, r3, #6
 800109e:	d5f6      	bpl.n	800108e <HAL_RCC_OscConfig+0x352>
 80010a0:	e6fb      	b.n	8000e9a <HAL_RCC_OscConfig+0x15e>
    return HAL_ERROR;
 80010a2:	2001      	movs	r0, #1
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	f0bc8000 	.word	0xf0bc8000
 80010b0:	42470000 	.word	0x42470000

080010b4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010b4:	2800      	cmp	r0, #0
 80010b6:	f000 80b5 	beq.w	8001224 <HAL_RCC_ClockConfig+0x170>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ba:	4a62      	ldr	r2, [pc, #392]	@ (8001244 <HAL_RCC_ClockConfig+0x190>)
{
 80010bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010c0:	6813      	ldr	r3, [r2, #0]
 80010c2:	4604      	mov	r4, r0
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	428b      	cmp	r3, r1
 80010ca:	460d      	mov	r5, r1
 80010cc:	d209      	bcs.n	80010e2 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ce:	b2cb      	uxtb	r3, r1
 80010d0:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	428b      	cmp	r3, r1
 80010da:	d002      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80010dc:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80010de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	0798      	lsls	r0, r3, #30
 80010e6:	d514      	bpl.n	8001112 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e8:	0759      	lsls	r1, r3, #29
 80010ea:	d504      	bpl.n	80010f6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ec:	4956      	ldr	r1, [pc, #344]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
 80010ee:	688a      	ldr	r2, [r1, #8]
 80010f0:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80010f4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f6:	071a      	lsls	r2, r3, #28
 80010f8:	d504      	bpl.n	8001104 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80010fa:	4953      	ldr	r1, [pc, #332]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
 80010fc:	688a      	ldr	r2, [r1, #8]
 80010fe:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8001102:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001104:	4950      	ldr	r1, [pc, #320]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
 8001106:	68a0      	ldr	r0, [r4, #8]
 8001108:	688a      	ldr	r2, [r1, #8]
 800110a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800110e:	4302      	orrs	r2, r0
 8001110:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001112:	07df      	lsls	r7, r3, #31
 8001114:	d521      	bpl.n	800115a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001116:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001118:	4b4b      	ldr	r3, [pc, #300]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111e:	f000 8083 	beq.w	8001228 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001122:	2a02      	cmp	r2, #2
 8001124:	d07b      	beq.n	800121e <HAL_RCC_ClockConfig+0x16a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	0799      	lsls	r1, r3, #30
 8001128:	d5d8      	bpl.n	80010dc <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112a:	4e47      	ldr	r6, [pc, #284]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001130:	68b3      	ldr	r3, [r6, #8]
 8001132:	f023 0303 	bic.w	r3, r3, #3
 8001136:	4313      	orrs	r3, r2
 8001138:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800113a:	f7ff fb6d 	bl	8000818 <HAL_GetTick>
 800113e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001140:	e004      	b.n	800114c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001142:	f7ff fb69 	bl	8000818 <HAL_GetTick>
 8001146:	1bc0      	subs	r0, r0, r7
 8001148:	4540      	cmp	r0, r8
 800114a:	d871      	bhi.n	8001230 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114c:	68b3      	ldr	r3, [r6, #8]
 800114e:	6862      	ldr	r2, [r4, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001158:	d1f3      	bne.n	8001142 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800115a:	4a3a      	ldr	r2, [pc, #232]	@ (8001244 <HAL_RCC_ClockConfig+0x190>)
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	42ab      	cmp	r3, r5
 8001164:	d906      	bls.n	8001174 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	b2eb      	uxtb	r3, r5
 8001168:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	6813      	ldr	r3, [r2, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	42ab      	cmp	r3, r5
 8001172:	d1b3      	bne.n	80010dc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	075a      	lsls	r2, r3, #29
 8001178:	d506      	bpl.n	8001188 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800117a:	4933      	ldr	r1, [pc, #204]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
 800117c:	68e0      	ldr	r0, [r4, #12]
 800117e:	688a      	ldr	r2, [r1, #8]
 8001180:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8001184:	4302      	orrs	r2, r0
 8001186:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001188:	071b      	lsls	r3, r3, #28
 800118a:	d436      	bmi.n	80011fa <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800118c:	492e      	ldr	r1, [pc, #184]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
 800118e:	688b      	ldr	r3, [r1, #8]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b04      	cmp	r3, #4
 8001196:	d03e      	beq.n	8001216 <HAL_RCC_ClockConfig+0x162>
 8001198:	2b08      	cmp	r3, #8
 800119a:	d13e      	bne.n	800121a <HAL_RCC_ClockConfig+0x166>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800119c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800119e:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011a4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011aa:	d043      	beq.n	8001234 <HAL_RCC_ClockConfig+0x180>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ac:	4827      	ldr	r0, [pc, #156]	@ (800124c <HAL_RCC_ClockConfig+0x198>)
 80011ae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011b2:	2300      	movs	r3, #0
 80011b4:	fba1 0100 	umull	r0, r1, r1, r0
 80011b8:	f7ff f804 	bl	80001c4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011bc:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011c4:	3301      	adds	r3, #1
 80011c6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80011c8:	fbb0 f1f3 	udiv	r1, r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80011cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
 80011ce:	22f0      	movs	r2, #240	@ 0xf0
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	fa92 f2a2 	rbit	r2, r2
 80011d6:	fab2 f282 	clz	r2, r2
 80011da:	4d1d      	ldr	r5, [pc, #116]	@ (8001250 <HAL_RCC_ClockConfig+0x19c>)
 80011dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011e0:	40d3      	lsrs	r3, r2
 80011e2:	5ceb      	ldrb	r3, [r5, r3]
  HAL_InitTick (uwTickPrio);
 80011e4:	481b      	ldr	r0, [pc, #108]	@ (8001254 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80011e6:	4c1c      	ldr	r4, [pc, #112]	@ (8001258 <HAL_RCC_ClockConfig+0x1a4>)
 80011e8:	fa21 f303 	lsr.w	r3, r1, r3
  HAL_InitTick (uwTickPrio);
 80011ec:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80011ee:	6023      	str	r3, [r4, #0]
  HAL_InitTick (uwTickPrio);
 80011f0:	f7ff fad4 	bl	800079c <HAL_InitTick>
  return HAL_OK;
 80011f4:	2000      	movs	r0, #0
}
 80011f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011fa:	4a13      	ldr	r2, [pc, #76]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
 80011fc:	6921      	ldr	r1, [r4, #16]
 80011fe:	6893      	ldr	r3, [r2, #8]
 8001200:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001204:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001208:	490f      	ldr	r1, [pc, #60]	@ (8001248 <HAL_RCC_ClockConfig+0x194>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800120a:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800120c:	688b      	ldr	r3, [r1, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b04      	cmp	r3, #4
 8001214:	d1c0      	bne.n	8001198 <HAL_RCC_ClockConfig+0xe4>
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <HAL_RCC_ClockConfig+0x198>)
 8001218:	e7d8      	b.n	80011cc <HAL_RCC_ClockConfig+0x118>
      sysclockfreq = HSI_VALUE;
 800121a:	4910      	ldr	r1, [pc, #64]	@ (800125c <HAL_RCC_ClockConfig+0x1a8>)
 800121c:	e7d6      	b.n	80011cc <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121e:	0198      	lsls	r0, r3, #6
 8001220:	d483      	bmi.n	800112a <HAL_RCC_ClockConfig+0x76>
 8001222:	e75b      	b.n	80010dc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001224:	2001      	movs	r0, #1
}
 8001226:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001228:	039e      	lsls	r6, r3, #14
 800122a:	f53f af7e 	bmi.w	800112a <HAL_RCC_ClockConfig+0x76>
 800122e:	e755      	b.n	80010dc <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8001230:	2003      	movs	r0, #3
 8001232:	e754      	b.n	80010de <HAL_RCC_ClockConfig+0x2a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001234:	4809      	ldr	r0, [pc, #36]	@ (800125c <HAL_RCC_ClockConfig+0x1a8>)
 8001236:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800123a:	fba1 0100 	umull	r0, r1, r1, r0
 800123e:	f7fe ffc1 	bl	80001c4 <__aeabi_uldivmod>
 8001242:	e7bb      	b.n	80011bc <HAL_RCC_ClockConfig+0x108>
 8001244:	40023c00 	.word	0x40023c00
 8001248:	40023800 	.word	0x40023800
 800124c:	007a1200 	.word	0x007a1200
 8001250:	080020f4 	.word	0x080020f4
 8001254:	20000008 	.word	0x20000008
 8001258:	20000000 	.word	0x20000000
 800125c:	00f42400 	.word	0x00f42400

08001260 <std>:
 8001260:	2300      	movs	r3, #0
 8001262:	b510      	push	{r4, lr}
 8001264:	4604      	mov	r4, r0
 8001266:	e9c0 3300 	strd	r3, r3, [r0]
 800126a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800126e:	6083      	str	r3, [r0, #8]
 8001270:	8181      	strh	r1, [r0, #12]
 8001272:	6643      	str	r3, [r0, #100]	@ 0x64
 8001274:	81c2      	strh	r2, [r0, #14]
 8001276:	6183      	str	r3, [r0, #24]
 8001278:	4619      	mov	r1, r3
 800127a:	2208      	movs	r2, #8
 800127c:	305c      	adds	r0, #92	@ 0x5c
 800127e:	f000 f906 	bl	800148e <memset>
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <std+0x58>)
 8001284:	6224      	str	r4, [r4, #32]
 8001286:	6263      	str	r3, [r4, #36]	@ 0x24
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <std+0x5c>)
 800128a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <std+0x60>)
 800128e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <std+0x64>)
 8001292:	6323      	str	r3, [r4, #48]	@ 0x30
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <std+0x68>)
 8001296:	429c      	cmp	r4, r3
 8001298:	d006      	beq.n	80012a8 <std+0x48>
 800129a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800129e:	4294      	cmp	r4, r2
 80012a0:	d002      	beq.n	80012a8 <std+0x48>
 80012a2:	33d0      	adds	r3, #208	@ 0xd0
 80012a4:	429c      	cmp	r4, r3
 80012a6:	d105      	bne.n	80012b4 <std+0x54>
 80012a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80012ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012b0:	f000 b966 	b.w	8001580 <__retarget_lock_init_recursive>
 80012b4:	bd10      	pop	{r4, pc}
 80012b6:	bf00      	nop
 80012b8:	08001409 	.word	0x08001409
 80012bc:	0800142b 	.word	0x0800142b
 80012c0:	08001463 	.word	0x08001463
 80012c4:	08001487 	.word	0x08001487
 80012c8:	20000098 	.word	0x20000098

080012cc <stdio_exit_handler>:
 80012cc:	4a02      	ldr	r2, [pc, #8]	@ (80012d8 <stdio_exit_handler+0xc>)
 80012ce:	4903      	ldr	r1, [pc, #12]	@ (80012dc <stdio_exit_handler+0x10>)
 80012d0:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <stdio_exit_handler+0x14>)
 80012d2:	f000 b869 	b.w	80013a8 <_fwalk_sglue>
 80012d6:	bf00      	nop
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	08001e15 	.word	0x08001e15
 80012e0:	2000001c 	.word	0x2000001c

080012e4 <cleanup_stdio>:
 80012e4:	6841      	ldr	r1, [r0, #4]
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <cleanup_stdio+0x34>)
 80012e8:	b510      	push	{r4, lr}
 80012ea:	4299      	cmp	r1, r3
 80012ec:	4604      	mov	r4, r0
 80012ee:	d001      	beq.n	80012f4 <cleanup_stdio+0x10>
 80012f0:	f000 fd90 	bl	8001e14 <_fflush_r>
 80012f4:	68a1      	ldr	r1, [r4, #8]
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <cleanup_stdio+0x38>)
 80012f8:	4299      	cmp	r1, r3
 80012fa:	d002      	beq.n	8001302 <cleanup_stdio+0x1e>
 80012fc:	4620      	mov	r0, r4
 80012fe:	f000 fd89 	bl	8001e14 <_fflush_r>
 8001302:	68e1      	ldr	r1, [r4, #12]
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <cleanup_stdio+0x3c>)
 8001306:	4299      	cmp	r1, r3
 8001308:	d004      	beq.n	8001314 <cleanup_stdio+0x30>
 800130a:	4620      	mov	r0, r4
 800130c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001310:	f000 bd80 	b.w	8001e14 <_fflush_r>
 8001314:	bd10      	pop	{r4, pc}
 8001316:	bf00      	nop
 8001318:	20000098 	.word	0x20000098
 800131c:	20000100 	.word	0x20000100
 8001320:	20000168 	.word	0x20000168

08001324 <global_stdio_init.part.0>:
 8001324:	b510      	push	{r4, lr}
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <global_stdio_init.part.0+0x30>)
 8001328:	4c0b      	ldr	r4, [pc, #44]	@ (8001358 <global_stdio_init.part.0+0x34>)
 800132a:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <global_stdio_init.part.0+0x38>)
 800132c:	4620      	mov	r0, r4
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	2104      	movs	r1, #4
 8001332:	2200      	movs	r2, #0
 8001334:	f7ff ff94 	bl	8001260 <std>
 8001338:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800133c:	2201      	movs	r2, #1
 800133e:	2109      	movs	r1, #9
 8001340:	f7ff ff8e 	bl	8001260 <std>
 8001344:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001348:	2202      	movs	r2, #2
 800134a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800134e:	2112      	movs	r1, #18
 8001350:	f7ff bf86 	b.w	8001260 <std>
 8001354:	200001d0 	.word	0x200001d0
 8001358:	20000098 	.word	0x20000098
 800135c:	080012cd 	.word	0x080012cd

08001360 <__sfp_lock_acquire>:
 8001360:	4801      	ldr	r0, [pc, #4]	@ (8001368 <__sfp_lock_acquire+0x8>)
 8001362:	f000 b90e 	b.w	8001582 <__retarget_lock_acquire_recursive>
 8001366:	bf00      	nop
 8001368:	200001d9 	.word	0x200001d9

0800136c <__sfp_lock_release>:
 800136c:	4801      	ldr	r0, [pc, #4]	@ (8001374 <__sfp_lock_release+0x8>)
 800136e:	f000 b909 	b.w	8001584 <__retarget_lock_release_recursive>
 8001372:	bf00      	nop
 8001374:	200001d9 	.word	0x200001d9

08001378 <__sinit>:
 8001378:	b510      	push	{r4, lr}
 800137a:	4604      	mov	r4, r0
 800137c:	f7ff fff0 	bl	8001360 <__sfp_lock_acquire>
 8001380:	6a23      	ldr	r3, [r4, #32]
 8001382:	b11b      	cbz	r3, 800138c <__sinit+0x14>
 8001384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001388:	f7ff bff0 	b.w	800136c <__sfp_lock_release>
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__sinit+0x28>)
 800138e:	6223      	str	r3, [r4, #32]
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__sinit+0x2c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f5      	bne.n	8001384 <__sinit+0xc>
 8001398:	f7ff ffc4 	bl	8001324 <global_stdio_init.part.0>
 800139c:	e7f2      	b.n	8001384 <__sinit+0xc>
 800139e:	bf00      	nop
 80013a0:	080012e5 	.word	0x080012e5
 80013a4:	200001d0 	.word	0x200001d0

080013a8 <_fwalk_sglue>:
 80013a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013ac:	4607      	mov	r7, r0
 80013ae:	4688      	mov	r8, r1
 80013b0:	4614      	mov	r4, r2
 80013b2:	2600      	movs	r6, #0
 80013b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80013b8:	f1b9 0901 	subs.w	r9, r9, #1
 80013bc:	d505      	bpl.n	80013ca <_fwalk_sglue+0x22>
 80013be:	6824      	ldr	r4, [r4, #0]
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d1f7      	bne.n	80013b4 <_fwalk_sglue+0xc>
 80013c4:	4630      	mov	r0, r6
 80013c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013ca:	89ab      	ldrh	r3, [r5, #12]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d907      	bls.n	80013e0 <_fwalk_sglue+0x38>
 80013d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013d4:	3301      	adds	r3, #1
 80013d6:	d003      	beq.n	80013e0 <_fwalk_sglue+0x38>
 80013d8:	4629      	mov	r1, r5
 80013da:	4638      	mov	r0, r7
 80013dc:	47c0      	blx	r8
 80013de:	4306      	orrs	r6, r0
 80013e0:	3568      	adds	r5, #104	@ 0x68
 80013e2:	e7e9      	b.n	80013b8 <_fwalk_sglue+0x10>

080013e4 <iprintf>:
 80013e4:	b40f      	push	{r0, r1, r2, r3}
 80013e6:	b507      	push	{r0, r1, r2, lr}
 80013e8:	4906      	ldr	r1, [pc, #24]	@ (8001404 <iprintf+0x20>)
 80013ea:	ab04      	add	r3, sp, #16
 80013ec:	6808      	ldr	r0, [r1, #0]
 80013ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80013f2:	6881      	ldr	r1, [r0, #8]
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	f000 f9e5 	bl	80017c4 <_vfiprintf_r>
 80013fa:	b003      	add	sp, #12
 80013fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001400:	b004      	add	sp, #16
 8001402:	4770      	bx	lr
 8001404:	20000018 	.word	0x20000018

08001408 <__sread>:
 8001408:	b510      	push	{r4, lr}
 800140a:	460c      	mov	r4, r1
 800140c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001410:	f000 f868 	bl	80014e4 <_read_r>
 8001414:	2800      	cmp	r0, #0
 8001416:	bfab      	itete	ge
 8001418:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800141a:	89a3      	ldrhlt	r3, [r4, #12]
 800141c:	181b      	addge	r3, r3, r0
 800141e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001422:	bfac      	ite	ge
 8001424:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001426:	81a3      	strhlt	r3, [r4, #12]
 8001428:	bd10      	pop	{r4, pc}

0800142a <__swrite>:
 800142a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142e:	461f      	mov	r7, r3
 8001430:	898b      	ldrh	r3, [r1, #12]
 8001432:	4605      	mov	r5, r0
 8001434:	05db      	lsls	r3, r3, #23
 8001436:	460c      	mov	r4, r1
 8001438:	4616      	mov	r6, r2
 800143a:	d505      	bpl.n	8001448 <__swrite+0x1e>
 800143c:	2302      	movs	r3, #2
 800143e:	2200      	movs	r2, #0
 8001440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001444:	f000 f83c 	bl	80014c0 <_lseek_r>
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	4632      	mov	r2, r6
 800144c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001450:	81a3      	strh	r3, [r4, #12]
 8001452:	4628      	mov	r0, r5
 8001454:	463b      	mov	r3, r7
 8001456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800145a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800145e:	f000 b853 	b.w	8001508 <_write_r>

08001462 <__sseek>:
 8001462:	b510      	push	{r4, lr}
 8001464:	460c      	mov	r4, r1
 8001466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800146a:	f000 f829 	bl	80014c0 <_lseek_r>
 800146e:	1c43      	adds	r3, r0, #1
 8001470:	89a3      	ldrh	r3, [r4, #12]
 8001472:	bf15      	itete	ne
 8001474:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001476:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800147a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800147e:	81a3      	strheq	r3, [r4, #12]
 8001480:	bf18      	it	ne
 8001482:	81a3      	strhne	r3, [r4, #12]
 8001484:	bd10      	pop	{r4, pc}

08001486 <__sclose>:
 8001486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800148a:	f000 b809 	b.w	80014a0 <_close_r>

0800148e <memset>:
 800148e:	4603      	mov	r3, r0
 8001490:	4402      	add	r2, r0
 8001492:	4293      	cmp	r3, r2
 8001494:	d100      	bne.n	8001498 <memset+0xa>
 8001496:	4770      	bx	lr
 8001498:	f803 1b01 	strb.w	r1, [r3], #1
 800149c:	e7f9      	b.n	8001492 <memset+0x4>
	...

080014a0 <_close_r>:
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	2300      	movs	r3, #0
 80014a4:	4d05      	ldr	r5, [pc, #20]	@ (80014bc <_close_r+0x1c>)
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	602b      	str	r3, [r5, #0]
 80014ac:	f7ff f918 	bl	80006e0 <_close>
 80014b0:	1c43      	adds	r3, r0, #1
 80014b2:	d102      	bne.n	80014ba <_close_r+0x1a>
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	b103      	cbz	r3, 80014ba <_close_r+0x1a>
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	bd38      	pop	{r3, r4, r5, pc}
 80014bc:	200001d4 	.word	0x200001d4

080014c0 <_lseek_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	4604      	mov	r4, r0
 80014c4:	4608      	mov	r0, r1
 80014c6:	4611      	mov	r1, r2
 80014c8:	2200      	movs	r2, #0
 80014ca:	4d05      	ldr	r5, [pc, #20]	@ (80014e0 <_lseek_r+0x20>)
 80014cc:	602a      	str	r2, [r5, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	f7ff f912 	bl	80006f8 <_lseek>
 80014d4:	1c43      	adds	r3, r0, #1
 80014d6:	d102      	bne.n	80014de <_lseek_r+0x1e>
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	b103      	cbz	r3, 80014de <_lseek_r+0x1e>
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	bd38      	pop	{r3, r4, r5, pc}
 80014e0:	200001d4 	.word	0x200001d4

080014e4 <_read_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4604      	mov	r4, r0
 80014e8:	4608      	mov	r0, r1
 80014ea:	4611      	mov	r1, r2
 80014ec:	2200      	movs	r2, #0
 80014ee:	4d05      	ldr	r5, [pc, #20]	@ (8001504 <_read_r+0x20>)
 80014f0:	602a      	str	r2, [r5, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	f7ff f8d8 	bl	80006a8 <_read>
 80014f8:	1c43      	adds	r3, r0, #1
 80014fa:	d102      	bne.n	8001502 <_read_r+0x1e>
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	b103      	cbz	r3, 8001502 <_read_r+0x1e>
 8001500:	6023      	str	r3, [r4, #0]
 8001502:	bd38      	pop	{r3, r4, r5, pc}
 8001504:	200001d4 	.word	0x200001d4

08001508 <_write_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4604      	mov	r4, r0
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	2200      	movs	r2, #0
 8001512:	4d05      	ldr	r5, [pc, #20]	@ (8001528 <_write_r+0x20>)
 8001514:	602a      	str	r2, [r5, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	f7ff f8d4 	bl	80006c4 <_write>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d102      	bne.n	8001526 <_write_r+0x1e>
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	b103      	cbz	r3, 8001526 <_write_r+0x1e>
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	bd38      	pop	{r3, r4, r5, pc}
 8001528:	200001d4 	.word	0x200001d4

0800152c <__errno>:
 800152c:	4b01      	ldr	r3, [pc, #4]	@ (8001534 <__errno+0x8>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000018 	.word	0x20000018

08001538 <__libc_init_array>:
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	2600      	movs	r6, #0
 800153c:	4d0c      	ldr	r5, [pc, #48]	@ (8001570 <__libc_init_array+0x38>)
 800153e:	4c0d      	ldr	r4, [pc, #52]	@ (8001574 <__libc_init_array+0x3c>)
 8001540:	1b64      	subs	r4, r4, r5
 8001542:	10a4      	asrs	r4, r4, #2
 8001544:	42a6      	cmp	r6, r4
 8001546:	d109      	bne.n	800155c <__libc_init_array+0x24>
 8001548:	f000 fdc2 	bl	80020d0 <_init>
 800154c:	2600      	movs	r6, #0
 800154e:	4d0a      	ldr	r5, [pc, #40]	@ (8001578 <__libc_init_array+0x40>)
 8001550:	4c0a      	ldr	r4, [pc, #40]	@ (800157c <__libc_init_array+0x44>)
 8001552:	1b64      	subs	r4, r4, r5
 8001554:	10a4      	asrs	r4, r4, #2
 8001556:	42a6      	cmp	r6, r4
 8001558:	d105      	bne.n	8001566 <__libc_init_array+0x2e>
 800155a:	bd70      	pop	{r4, r5, r6, pc}
 800155c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001560:	4798      	blx	r3
 8001562:	3601      	adds	r6, #1
 8001564:	e7ee      	b.n	8001544 <__libc_init_array+0xc>
 8001566:	f855 3b04 	ldr.w	r3, [r5], #4
 800156a:	4798      	blx	r3
 800156c:	3601      	adds	r6, #1
 800156e:	e7f2      	b.n	8001556 <__libc_init_array+0x1e>
 8001570:	08002140 	.word	0x08002140
 8001574:	08002140 	.word	0x08002140
 8001578:	08002140 	.word	0x08002140
 800157c:	08002144 	.word	0x08002144

08001580 <__retarget_lock_init_recursive>:
 8001580:	4770      	bx	lr

08001582 <__retarget_lock_acquire_recursive>:
 8001582:	4770      	bx	lr

08001584 <__retarget_lock_release_recursive>:
 8001584:	4770      	bx	lr
	...

08001588 <_free_r>:
 8001588:	b538      	push	{r3, r4, r5, lr}
 800158a:	4605      	mov	r5, r0
 800158c:	2900      	cmp	r1, #0
 800158e:	d040      	beq.n	8001612 <_free_r+0x8a>
 8001590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001594:	1f0c      	subs	r4, r1, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	bfb8      	it	lt
 800159a:	18e4      	addlt	r4, r4, r3
 800159c:	f000 f8de 	bl	800175c <__malloc_lock>
 80015a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <_free_r+0x8c>)
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	b933      	cbnz	r3, 80015b4 <_free_r+0x2c>
 80015a6:	6063      	str	r3, [r4, #4]
 80015a8:	6014      	str	r4, [r2, #0]
 80015aa:	4628      	mov	r0, r5
 80015ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015b0:	f000 b8da 	b.w	8001768 <__malloc_unlock>
 80015b4:	42a3      	cmp	r3, r4
 80015b6:	d908      	bls.n	80015ca <_free_r+0x42>
 80015b8:	6820      	ldr	r0, [r4, #0]
 80015ba:	1821      	adds	r1, r4, r0
 80015bc:	428b      	cmp	r3, r1
 80015be:	bf01      	itttt	eq
 80015c0:	6819      	ldreq	r1, [r3, #0]
 80015c2:	685b      	ldreq	r3, [r3, #4]
 80015c4:	1809      	addeq	r1, r1, r0
 80015c6:	6021      	streq	r1, [r4, #0]
 80015c8:	e7ed      	b.n	80015a6 <_free_r+0x1e>
 80015ca:	461a      	mov	r2, r3
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	b10b      	cbz	r3, 80015d4 <_free_r+0x4c>
 80015d0:	42a3      	cmp	r3, r4
 80015d2:	d9fa      	bls.n	80015ca <_free_r+0x42>
 80015d4:	6811      	ldr	r1, [r2, #0]
 80015d6:	1850      	adds	r0, r2, r1
 80015d8:	42a0      	cmp	r0, r4
 80015da:	d10b      	bne.n	80015f4 <_free_r+0x6c>
 80015dc:	6820      	ldr	r0, [r4, #0]
 80015de:	4401      	add	r1, r0
 80015e0:	1850      	adds	r0, r2, r1
 80015e2:	4283      	cmp	r3, r0
 80015e4:	6011      	str	r1, [r2, #0]
 80015e6:	d1e0      	bne.n	80015aa <_free_r+0x22>
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4408      	add	r0, r1
 80015ee:	6010      	str	r0, [r2, #0]
 80015f0:	6053      	str	r3, [r2, #4]
 80015f2:	e7da      	b.n	80015aa <_free_r+0x22>
 80015f4:	d902      	bls.n	80015fc <_free_r+0x74>
 80015f6:	230c      	movs	r3, #12
 80015f8:	602b      	str	r3, [r5, #0]
 80015fa:	e7d6      	b.n	80015aa <_free_r+0x22>
 80015fc:	6820      	ldr	r0, [r4, #0]
 80015fe:	1821      	adds	r1, r4, r0
 8001600:	428b      	cmp	r3, r1
 8001602:	bf01      	itttt	eq
 8001604:	6819      	ldreq	r1, [r3, #0]
 8001606:	685b      	ldreq	r3, [r3, #4]
 8001608:	1809      	addeq	r1, r1, r0
 800160a:	6021      	streq	r1, [r4, #0]
 800160c:	6063      	str	r3, [r4, #4]
 800160e:	6054      	str	r4, [r2, #4]
 8001610:	e7cb      	b.n	80015aa <_free_r+0x22>
 8001612:	bd38      	pop	{r3, r4, r5, pc}
 8001614:	200001e0 	.word	0x200001e0

08001618 <sbrk_aligned>:
 8001618:	b570      	push	{r4, r5, r6, lr}
 800161a:	4e0f      	ldr	r6, [pc, #60]	@ (8001658 <sbrk_aligned+0x40>)
 800161c:	460c      	mov	r4, r1
 800161e:	6831      	ldr	r1, [r6, #0]
 8001620:	4605      	mov	r5, r0
 8001622:	b911      	cbnz	r1, 800162a <sbrk_aligned+0x12>
 8001624:	f000 fcb2 	bl	8001f8c <_sbrk_r>
 8001628:	6030      	str	r0, [r6, #0]
 800162a:	4621      	mov	r1, r4
 800162c:	4628      	mov	r0, r5
 800162e:	f000 fcad 	bl	8001f8c <_sbrk_r>
 8001632:	1c43      	adds	r3, r0, #1
 8001634:	d103      	bne.n	800163e <sbrk_aligned+0x26>
 8001636:	f04f 34ff 	mov.w	r4, #4294967295
 800163a:	4620      	mov	r0, r4
 800163c:	bd70      	pop	{r4, r5, r6, pc}
 800163e:	1cc4      	adds	r4, r0, #3
 8001640:	f024 0403 	bic.w	r4, r4, #3
 8001644:	42a0      	cmp	r0, r4
 8001646:	d0f8      	beq.n	800163a <sbrk_aligned+0x22>
 8001648:	1a21      	subs	r1, r4, r0
 800164a:	4628      	mov	r0, r5
 800164c:	f000 fc9e 	bl	8001f8c <_sbrk_r>
 8001650:	3001      	adds	r0, #1
 8001652:	d1f2      	bne.n	800163a <sbrk_aligned+0x22>
 8001654:	e7ef      	b.n	8001636 <sbrk_aligned+0x1e>
 8001656:	bf00      	nop
 8001658:	200001dc 	.word	0x200001dc

0800165c <_malloc_r>:
 800165c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001660:	1ccd      	adds	r5, r1, #3
 8001662:	f025 0503 	bic.w	r5, r5, #3
 8001666:	3508      	adds	r5, #8
 8001668:	2d0c      	cmp	r5, #12
 800166a:	bf38      	it	cc
 800166c:	250c      	movcc	r5, #12
 800166e:	2d00      	cmp	r5, #0
 8001670:	4606      	mov	r6, r0
 8001672:	db01      	blt.n	8001678 <_malloc_r+0x1c>
 8001674:	42a9      	cmp	r1, r5
 8001676:	d904      	bls.n	8001682 <_malloc_r+0x26>
 8001678:	230c      	movs	r3, #12
 800167a:	6033      	str	r3, [r6, #0]
 800167c:	2000      	movs	r0, #0
 800167e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001758 <_malloc_r+0xfc>
 8001686:	f000 f869 	bl	800175c <__malloc_lock>
 800168a:	f8d8 3000 	ldr.w	r3, [r8]
 800168e:	461c      	mov	r4, r3
 8001690:	bb44      	cbnz	r4, 80016e4 <_malloc_r+0x88>
 8001692:	4629      	mov	r1, r5
 8001694:	4630      	mov	r0, r6
 8001696:	f7ff ffbf 	bl	8001618 <sbrk_aligned>
 800169a:	1c43      	adds	r3, r0, #1
 800169c:	4604      	mov	r4, r0
 800169e:	d158      	bne.n	8001752 <_malloc_r+0xf6>
 80016a0:	f8d8 4000 	ldr.w	r4, [r8]
 80016a4:	4627      	mov	r7, r4
 80016a6:	2f00      	cmp	r7, #0
 80016a8:	d143      	bne.n	8001732 <_malloc_r+0xd6>
 80016aa:	2c00      	cmp	r4, #0
 80016ac:	d04b      	beq.n	8001746 <_malloc_r+0xea>
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	4639      	mov	r1, r7
 80016b2:	4630      	mov	r0, r6
 80016b4:	eb04 0903 	add.w	r9, r4, r3
 80016b8:	f000 fc68 	bl	8001f8c <_sbrk_r>
 80016bc:	4581      	cmp	r9, r0
 80016be:	d142      	bne.n	8001746 <_malloc_r+0xea>
 80016c0:	6821      	ldr	r1, [r4, #0]
 80016c2:	4630      	mov	r0, r6
 80016c4:	1a6d      	subs	r5, r5, r1
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7ff ffa6 	bl	8001618 <sbrk_aligned>
 80016cc:	3001      	adds	r0, #1
 80016ce:	d03a      	beq.n	8001746 <_malloc_r+0xea>
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	442b      	add	r3, r5
 80016d4:	6023      	str	r3, [r4, #0]
 80016d6:	f8d8 3000 	ldr.w	r3, [r8]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	bb62      	cbnz	r2, 8001738 <_malloc_r+0xdc>
 80016de:	f8c8 7000 	str.w	r7, [r8]
 80016e2:	e00f      	b.n	8001704 <_malloc_r+0xa8>
 80016e4:	6822      	ldr	r2, [r4, #0]
 80016e6:	1b52      	subs	r2, r2, r5
 80016e8:	d420      	bmi.n	800172c <_malloc_r+0xd0>
 80016ea:	2a0b      	cmp	r2, #11
 80016ec:	d917      	bls.n	800171e <_malloc_r+0xc2>
 80016ee:	1961      	adds	r1, r4, r5
 80016f0:	42a3      	cmp	r3, r4
 80016f2:	6025      	str	r5, [r4, #0]
 80016f4:	bf18      	it	ne
 80016f6:	6059      	strne	r1, [r3, #4]
 80016f8:	6863      	ldr	r3, [r4, #4]
 80016fa:	bf08      	it	eq
 80016fc:	f8c8 1000 	streq.w	r1, [r8]
 8001700:	5162      	str	r2, [r4, r5]
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	4630      	mov	r0, r6
 8001706:	f000 f82f 	bl	8001768 <__malloc_unlock>
 800170a:	f104 000b 	add.w	r0, r4, #11
 800170e:	1d23      	adds	r3, r4, #4
 8001710:	f020 0007 	bic.w	r0, r0, #7
 8001714:	1ac2      	subs	r2, r0, r3
 8001716:	bf1c      	itt	ne
 8001718:	1a1b      	subne	r3, r3, r0
 800171a:	50a3      	strne	r3, [r4, r2]
 800171c:	e7af      	b.n	800167e <_malloc_r+0x22>
 800171e:	6862      	ldr	r2, [r4, #4]
 8001720:	42a3      	cmp	r3, r4
 8001722:	bf0c      	ite	eq
 8001724:	f8c8 2000 	streq.w	r2, [r8]
 8001728:	605a      	strne	r2, [r3, #4]
 800172a:	e7eb      	b.n	8001704 <_malloc_r+0xa8>
 800172c:	4623      	mov	r3, r4
 800172e:	6864      	ldr	r4, [r4, #4]
 8001730:	e7ae      	b.n	8001690 <_malloc_r+0x34>
 8001732:	463c      	mov	r4, r7
 8001734:	687f      	ldr	r7, [r7, #4]
 8001736:	e7b6      	b.n	80016a6 <_malloc_r+0x4a>
 8001738:	461a      	mov	r2, r3
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	42a3      	cmp	r3, r4
 800173e:	d1fb      	bne.n	8001738 <_malloc_r+0xdc>
 8001740:	2300      	movs	r3, #0
 8001742:	6053      	str	r3, [r2, #4]
 8001744:	e7de      	b.n	8001704 <_malloc_r+0xa8>
 8001746:	230c      	movs	r3, #12
 8001748:	4630      	mov	r0, r6
 800174a:	6033      	str	r3, [r6, #0]
 800174c:	f000 f80c 	bl	8001768 <__malloc_unlock>
 8001750:	e794      	b.n	800167c <_malloc_r+0x20>
 8001752:	6005      	str	r5, [r0, #0]
 8001754:	e7d6      	b.n	8001704 <_malloc_r+0xa8>
 8001756:	bf00      	nop
 8001758:	200001e0 	.word	0x200001e0

0800175c <__malloc_lock>:
 800175c:	4801      	ldr	r0, [pc, #4]	@ (8001764 <__malloc_lock+0x8>)
 800175e:	f7ff bf10 	b.w	8001582 <__retarget_lock_acquire_recursive>
 8001762:	bf00      	nop
 8001764:	200001d8 	.word	0x200001d8

08001768 <__malloc_unlock>:
 8001768:	4801      	ldr	r0, [pc, #4]	@ (8001770 <__malloc_unlock+0x8>)
 800176a:	f7ff bf0b 	b.w	8001584 <__retarget_lock_release_recursive>
 800176e:	bf00      	nop
 8001770:	200001d8 	.word	0x200001d8

08001774 <__sfputc_r>:
 8001774:	6893      	ldr	r3, [r2, #8]
 8001776:	b410      	push	{r4}
 8001778:	3b01      	subs	r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	6093      	str	r3, [r2, #8]
 800177e:	da07      	bge.n	8001790 <__sfputc_r+0x1c>
 8001780:	6994      	ldr	r4, [r2, #24]
 8001782:	42a3      	cmp	r3, r4
 8001784:	db01      	blt.n	800178a <__sfputc_r+0x16>
 8001786:	290a      	cmp	r1, #10
 8001788:	d102      	bne.n	8001790 <__sfputc_r+0x1c>
 800178a:	bc10      	pop	{r4}
 800178c:	f000 bb6a 	b.w	8001e64 <__swbuf_r>
 8001790:	6813      	ldr	r3, [r2, #0]
 8001792:	1c58      	adds	r0, r3, #1
 8001794:	6010      	str	r0, [r2, #0]
 8001796:	7019      	strb	r1, [r3, #0]
 8001798:	4608      	mov	r0, r1
 800179a:	bc10      	pop	{r4}
 800179c:	4770      	bx	lr

0800179e <__sfputs_r>:
 800179e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a0:	4606      	mov	r6, r0
 80017a2:	460f      	mov	r7, r1
 80017a4:	4614      	mov	r4, r2
 80017a6:	18d5      	adds	r5, r2, r3
 80017a8:	42ac      	cmp	r4, r5
 80017aa:	d101      	bne.n	80017b0 <__sfputs_r+0x12>
 80017ac:	2000      	movs	r0, #0
 80017ae:	e007      	b.n	80017c0 <__sfputs_r+0x22>
 80017b0:	463a      	mov	r2, r7
 80017b2:	4630      	mov	r0, r6
 80017b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017b8:	f7ff ffdc 	bl	8001774 <__sfputc_r>
 80017bc:	1c43      	adds	r3, r0, #1
 80017be:	d1f3      	bne.n	80017a8 <__sfputs_r+0xa>
 80017c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017c4 <_vfiprintf_r>:
 80017c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c8:	460d      	mov	r5, r1
 80017ca:	4614      	mov	r4, r2
 80017cc:	4698      	mov	r8, r3
 80017ce:	4606      	mov	r6, r0
 80017d0:	b09d      	sub	sp, #116	@ 0x74
 80017d2:	b118      	cbz	r0, 80017dc <_vfiprintf_r+0x18>
 80017d4:	6a03      	ldr	r3, [r0, #32]
 80017d6:	b90b      	cbnz	r3, 80017dc <_vfiprintf_r+0x18>
 80017d8:	f7ff fdce 	bl	8001378 <__sinit>
 80017dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017de:	07d9      	lsls	r1, r3, #31
 80017e0:	d405      	bmi.n	80017ee <_vfiprintf_r+0x2a>
 80017e2:	89ab      	ldrh	r3, [r5, #12]
 80017e4:	059a      	lsls	r2, r3, #22
 80017e6:	d402      	bmi.n	80017ee <_vfiprintf_r+0x2a>
 80017e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80017ea:	f7ff feca 	bl	8001582 <__retarget_lock_acquire_recursive>
 80017ee:	89ab      	ldrh	r3, [r5, #12]
 80017f0:	071b      	lsls	r3, r3, #28
 80017f2:	d501      	bpl.n	80017f8 <_vfiprintf_r+0x34>
 80017f4:	692b      	ldr	r3, [r5, #16]
 80017f6:	b99b      	cbnz	r3, 8001820 <_vfiprintf_r+0x5c>
 80017f8:	4629      	mov	r1, r5
 80017fa:	4630      	mov	r0, r6
 80017fc:	f000 fb70 	bl	8001ee0 <__swsetup_r>
 8001800:	b170      	cbz	r0, 8001820 <_vfiprintf_r+0x5c>
 8001802:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001804:	07dc      	lsls	r4, r3, #31
 8001806:	d504      	bpl.n	8001812 <_vfiprintf_r+0x4e>
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	b01d      	add	sp, #116	@ 0x74
 800180e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001812:	89ab      	ldrh	r3, [r5, #12]
 8001814:	0598      	lsls	r0, r3, #22
 8001816:	d4f7      	bmi.n	8001808 <_vfiprintf_r+0x44>
 8001818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800181a:	f7ff feb3 	bl	8001584 <__retarget_lock_release_recursive>
 800181e:	e7f3      	b.n	8001808 <_vfiprintf_r+0x44>
 8001820:	2300      	movs	r3, #0
 8001822:	9309      	str	r3, [sp, #36]	@ 0x24
 8001824:	2320      	movs	r3, #32
 8001826:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800182a:	2330      	movs	r3, #48	@ 0x30
 800182c:	f04f 0901 	mov.w	r9, #1
 8001830:	f8cd 800c 	str.w	r8, [sp, #12]
 8001834:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80019e0 <_vfiprintf_r+0x21c>
 8001838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800183c:	4623      	mov	r3, r4
 800183e:	469a      	mov	sl, r3
 8001840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001844:	b10a      	cbz	r2, 800184a <_vfiprintf_r+0x86>
 8001846:	2a25      	cmp	r2, #37	@ 0x25
 8001848:	d1f9      	bne.n	800183e <_vfiprintf_r+0x7a>
 800184a:	ebba 0b04 	subs.w	fp, sl, r4
 800184e:	d00b      	beq.n	8001868 <_vfiprintf_r+0xa4>
 8001850:	465b      	mov	r3, fp
 8001852:	4622      	mov	r2, r4
 8001854:	4629      	mov	r1, r5
 8001856:	4630      	mov	r0, r6
 8001858:	f7ff ffa1 	bl	800179e <__sfputs_r>
 800185c:	3001      	adds	r0, #1
 800185e:	f000 80a7 	beq.w	80019b0 <_vfiprintf_r+0x1ec>
 8001862:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001864:	445a      	add	r2, fp
 8001866:	9209      	str	r2, [sp, #36]	@ 0x24
 8001868:	f89a 3000 	ldrb.w	r3, [sl]
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 809f 	beq.w	80019b0 <_vfiprintf_r+0x1ec>
 8001872:	2300      	movs	r3, #0
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800187c:	f10a 0a01 	add.w	sl, sl, #1
 8001880:	9304      	str	r3, [sp, #16]
 8001882:	9307      	str	r3, [sp, #28]
 8001884:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001888:	931a      	str	r3, [sp, #104]	@ 0x68
 800188a:	4654      	mov	r4, sl
 800188c:	2205      	movs	r2, #5
 800188e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001892:	4853      	ldr	r0, [pc, #332]	@ (80019e0 <_vfiprintf_r+0x21c>)
 8001894:	f000 fb8a 	bl	8001fac <memchr>
 8001898:	9a04      	ldr	r2, [sp, #16]
 800189a:	b9d8      	cbnz	r0, 80018d4 <_vfiprintf_r+0x110>
 800189c:	06d1      	lsls	r1, r2, #27
 800189e:	bf44      	itt	mi
 80018a0:	2320      	movmi	r3, #32
 80018a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018a6:	0713      	lsls	r3, r2, #28
 80018a8:	bf44      	itt	mi
 80018aa:	232b      	movmi	r3, #43	@ 0x2b
 80018ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018b0:	f89a 3000 	ldrb.w	r3, [sl]
 80018b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80018b6:	d015      	beq.n	80018e4 <_vfiprintf_r+0x120>
 80018b8:	4654      	mov	r4, sl
 80018ba:	2000      	movs	r0, #0
 80018bc:	f04f 0c0a 	mov.w	ip, #10
 80018c0:	9a07      	ldr	r2, [sp, #28]
 80018c2:	4621      	mov	r1, r4
 80018c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018c8:	3b30      	subs	r3, #48	@ 0x30
 80018ca:	2b09      	cmp	r3, #9
 80018cc:	d94b      	bls.n	8001966 <_vfiprintf_r+0x1a2>
 80018ce:	b1b0      	cbz	r0, 80018fe <_vfiprintf_r+0x13a>
 80018d0:	9207      	str	r2, [sp, #28]
 80018d2:	e014      	b.n	80018fe <_vfiprintf_r+0x13a>
 80018d4:	eba0 0308 	sub.w	r3, r0, r8
 80018d8:	fa09 f303 	lsl.w	r3, r9, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	46a2      	mov	sl, r4
 80018e0:	9304      	str	r3, [sp, #16]
 80018e2:	e7d2      	b.n	800188a <_vfiprintf_r+0xc6>
 80018e4:	9b03      	ldr	r3, [sp, #12]
 80018e6:	1d19      	adds	r1, r3, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	9103      	str	r1, [sp, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bfbb      	ittet	lt
 80018f0:	425b      	neglt	r3, r3
 80018f2:	f042 0202 	orrlt.w	r2, r2, #2
 80018f6:	9307      	strge	r3, [sp, #28]
 80018f8:	9307      	strlt	r3, [sp, #28]
 80018fa:	bfb8      	it	lt
 80018fc:	9204      	strlt	r2, [sp, #16]
 80018fe:	7823      	ldrb	r3, [r4, #0]
 8001900:	2b2e      	cmp	r3, #46	@ 0x2e
 8001902:	d10a      	bne.n	800191a <_vfiprintf_r+0x156>
 8001904:	7863      	ldrb	r3, [r4, #1]
 8001906:	2b2a      	cmp	r3, #42	@ 0x2a
 8001908:	d132      	bne.n	8001970 <_vfiprintf_r+0x1ac>
 800190a:	9b03      	ldr	r3, [sp, #12]
 800190c:	3402      	adds	r4, #2
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	9203      	str	r2, [sp, #12]
 8001914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001918:	9305      	str	r3, [sp, #20]
 800191a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80019e4 <_vfiprintf_r+0x220>
 800191e:	2203      	movs	r2, #3
 8001920:	4650      	mov	r0, sl
 8001922:	7821      	ldrb	r1, [r4, #0]
 8001924:	f000 fb42 	bl	8001fac <memchr>
 8001928:	b138      	cbz	r0, 800193a <_vfiprintf_r+0x176>
 800192a:	2240      	movs	r2, #64	@ 0x40
 800192c:	9b04      	ldr	r3, [sp, #16]
 800192e:	eba0 000a 	sub.w	r0, r0, sl
 8001932:	4082      	lsls	r2, r0
 8001934:	4313      	orrs	r3, r2
 8001936:	3401      	adds	r4, #1
 8001938:	9304      	str	r3, [sp, #16]
 800193a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800193e:	2206      	movs	r2, #6
 8001940:	4829      	ldr	r0, [pc, #164]	@ (80019e8 <_vfiprintf_r+0x224>)
 8001942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001946:	f000 fb31 	bl	8001fac <memchr>
 800194a:	2800      	cmp	r0, #0
 800194c:	d03f      	beq.n	80019ce <_vfiprintf_r+0x20a>
 800194e:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <_vfiprintf_r+0x228>)
 8001950:	bb1b      	cbnz	r3, 800199a <_vfiprintf_r+0x1d6>
 8001952:	9b03      	ldr	r3, [sp, #12]
 8001954:	3307      	adds	r3, #7
 8001956:	f023 0307 	bic.w	r3, r3, #7
 800195a:	3308      	adds	r3, #8
 800195c:	9303      	str	r3, [sp, #12]
 800195e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001960:	443b      	add	r3, r7
 8001962:	9309      	str	r3, [sp, #36]	@ 0x24
 8001964:	e76a      	b.n	800183c <_vfiprintf_r+0x78>
 8001966:	460c      	mov	r4, r1
 8001968:	2001      	movs	r0, #1
 800196a:	fb0c 3202 	mla	r2, ip, r2, r3
 800196e:	e7a8      	b.n	80018c2 <_vfiprintf_r+0xfe>
 8001970:	2300      	movs	r3, #0
 8001972:	f04f 0c0a 	mov.w	ip, #10
 8001976:	4619      	mov	r1, r3
 8001978:	3401      	adds	r4, #1
 800197a:	9305      	str	r3, [sp, #20]
 800197c:	4620      	mov	r0, r4
 800197e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001982:	3a30      	subs	r2, #48	@ 0x30
 8001984:	2a09      	cmp	r2, #9
 8001986:	d903      	bls.n	8001990 <_vfiprintf_r+0x1cc>
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0c6      	beq.n	800191a <_vfiprintf_r+0x156>
 800198c:	9105      	str	r1, [sp, #20]
 800198e:	e7c4      	b.n	800191a <_vfiprintf_r+0x156>
 8001990:	4604      	mov	r4, r0
 8001992:	2301      	movs	r3, #1
 8001994:	fb0c 2101 	mla	r1, ip, r1, r2
 8001998:	e7f0      	b.n	800197c <_vfiprintf_r+0x1b8>
 800199a:	ab03      	add	r3, sp, #12
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	462a      	mov	r2, r5
 80019a0:	4630      	mov	r0, r6
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <_vfiprintf_r+0x22c>)
 80019a4:	a904      	add	r1, sp, #16
 80019a6:	f3af 8000 	nop.w
 80019aa:	4607      	mov	r7, r0
 80019ac:	1c78      	adds	r0, r7, #1
 80019ae:	d1d6      	bne.n	800195e <_vfiprintf_r+0x19a>
 80019b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80019b2:	07d9      	lsls	r1, r3, #31
 80019b4:	d405      	bmi.n	80019c2 <_vfiprintf_r+0x1fe>
 80019b6:	89ab      	ldrh	r3, [r5, #12]
 80019b8:	059a      	lsls	r2, r3, #22
 80019ba:	d402      	bmi.n	80019c2 <_vfiprintf_r+0x1fe>
 80019bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80019be:	f7ff fde1 	bl	8001584 <__retarget_lock_release_recursive>
 80019c2:	89ab      	ldrh	r3, [r5, #12]
 80019c4:	065b      	lsls	r3, r3, #25
 80019c6:	f53f af1f 	bmi.w	8001808 <_vfiprintf_r+0x44>
 80019ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80019cc:	e71e      	b.n	800180c <_vfiprintf_r+0x48>
 80019ce:	ab03      	add	r3, sp, #12
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	462a      	mov	r2, r5
 80019d4:	4630      	mov	r0, r6
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <_vfiprintf_r+0x22c>)
 80019d8:	a904      	add	r1, sp, #16
 80019da:	f000 f87d 	bl	8001ad8 <_printf_i>
 80019de:	e7e4      	b.n	80019aa <_vfiprintf_r+0x1e6>
 80019e0:	08002104 	.word	0x08002104
 80019e4:	0800210a 	.word	0x0800210a
 80019e8:	0800210e 	.word	0x0800210e
 80019ec:	00000000 	.word	0x00000000
 80019f0:	0800179f 	.word	0x0800179f

080019f4 <_printf_common>:
 80019f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019f8:	4616      	mov	r6, r2
 80019fa:	4698      	mov	r8, r3
 80019fc:	688a      	ldr	r2, [r1, #8]
 80019fe:	690b      	ldr	r3, [r1, #16]
 8001a00:	4607      	mov	r7, r0
 8001a02:	4293      	cmp	r3, r2
 8001a04:	bfb8      	it	lt
 8001a06:	4613      	movlt	r3, r2
 8001a08:	6033      	str	r3, [r6, #0]
 8001a0a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a0e:	460c      	mov	r4, r1
 8001a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a14:	b10a      	cbz	r2, 8001a1a <_printf_common+0x26>
 8001a16:	3301      	adds	r3, #1
 8001a18:	6033      	str	r3, [r6, #0]
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	0699      	lsls	r1, r3, #26
 8001a1e:	bf42      	ittt	mi
 8001a20:	6833      	ldrmi	r3, [r6, #0]
 8001a22:	3302      	addmi	r3, #2
 8001a24:	6033      	strmi	r3, [r6, #0]
 8001a26:	6825      	ldr	r5, [r4, #0]
 8001a28:	f015 0506 	ands.w	r5, r5, #6
 8001a2c:	d106      	bne.n	8001a3c <_printf_common+0x48>
 8001a2e:	f104 0a19 	add.w	sl, r4, #25
 8001a32:	68e3      	ldr	r3, [r4, #12]
 8001a34:	6832      	ldr	r2, [r6, #0]
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	42ab      	cmp	r3, r5
 8001a3a:	dc2b      	bgt.n	8001a94 <_printf_common+0xa0>
 8001a3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a40:	6822      	ldr	r2, [r4, #0]
 8001a42:	3b00      	subs	r3, #0
 8001a44:	bf18      	it	ne
 8001a46:	2301      	movne	r3, #1
 8001a48:	0692      	lsls	r2, r2, #26
 8001a4a:	d430      	bmi.n	8001aae <_printf_common+0xba>
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	4638      	mov	r0, r7
 8001a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001a54:	47c8      	blx	r9
 8001a56:	3001      	adds	r0, #1
 8001a58:	d023      	beq.n	8001aa2 <_printf_common+0xae>
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	6922      	ldr	r2, [r4, #16]
 8001a5e:	f003 0306 	and.w	r3, r3, #6
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf14      	ite	ne
 8001a66:	2500      	movne	r5, #0
 8001a68:	6833      	ldreq	r3, [r6, #0]
 8001a6a:	f04f 0600 	mov.w	r6, #0
 8001a6e:	bf08      	it	eq
 8001a70:	68e5      	ldreq	r5, [r4, #12]
 8001a72:	f104 041a 	add.w	r4, r4, #26
 8001a76:	bf08      	it	eq
 8001a78:	1aed      	subeq	r5, r5, r3
 8001a7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001a7e:	bf08      	it	eq
 8001a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a84:	4293      	cmp	r3, r2
 8001a86:	bfc4      	itt	gt
 8001a88:	1a9b      	subgt	r3, r3, r2
 8001a8a:	18ed      	addgt	r5, r5, r3
 8001a8c:	42b5      	cmp	r5, r6
 8001a8e:	d11a      	bne.n	8001ac6 <_printf_common+0xd2>
 8001a90:	2000      	movs	r0, #0
 8001a92:	e008      	b.n	8001aa6 <_printf_common+0xb2>
 8001a94:	2301      	movs	r3, #1
 8001a96:	4652      	mov	r2, sl
 8001a98:	4641      	mov	r1, r8
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	47c8      	blx	r9
 8001a9e:	3001      	adds	r0, #1
 8001aa0:	d103      	bne.n	8001aaa <_printf_common+0xb6>
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aaa:	3501      	adds	r5, #1
 8001aac:	e7c1      	b.n	8001a32 <_printf_common+0x3e>
 8001aae:	2030      	movs	r0, #48	@ 0x30
 8001ab0:	18e1      	adds	r1, r4, r3
 8001ab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001abc:	4422      	add	r2, r4
 8001abe:	3302      	adds	r3, #2
 8001ac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ac4:	e7c2      	b.n	8001a4c <_printf_common+0x58>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4622      	mov	r2, r4
 8001aca:	4641      	mov	r1, r8
 8001acc:	4638      	mov	r0, r7
 8001ace:	47c8      	blx	r9
 8001ad0:	3001      	adds	r0, #1
 8001ad2:	d0e6      	beq.n	8001aa2 <_printf_common+0xae>
 8001ad4:	3601      	adds	r6, #1
 8001ad6:	e7d9      	b.n	8001a8c <_printf_common+0x98>

08001ad8 <_printf_i>:
 8001ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001adc:	7e0f      	ldrb	r7, [r1, #24]
 8001ade:	4691      	mov	r9, r2
 8001ae0:	2f78      	cmp	r7, #120	@ 0x78
 8001ae2:	4680      	mov	r8, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	469a      	mov	sl, r3
 8001ae8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001aea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001aee:	d807      	bhi.n	8001b00 <_printf_i+0x28>
 8001af0:	2f62      	cmp	r7, #98	@ 0x62
 8001af2:	d80a      	bhi.n	8001b0a <_printf_i+0x32>
 8001af4:	2f00      	cmp	r7, #0
 8001af6:	f000 80d1 	beq.w	8001c9c <_printf_i+0x1c4>
 8001afa:	2f58      	cmp	r7, #88	@ 0x58
 8001afc:	f000 80b8 	beq.w	8001c70 <_printf_i+0x198>
 8001b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b08:	e03a      	b.n	8001b80 <_printf_i+0xa8>
 8001b0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b0e:	2b15      	cmp	r3, #21
 8001b10:	d8f6      	bhi.n	8001b00 <_printf_i+0x28>
 8001b12:	a101      	add	r1, pc, #4	@ (adr r1, 8001b18 <_printf_i+0x40>)
 8001b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b18:	08001b71 	.word	0x08001b71
 8001b1c:	08001b85 	.word	0x08001b85
 8001b20:	08001b01 	.word	0x08001b01
 8001b24:	08001b01 	.word	0x08001b01
 8001b28:	08001b01 	.word	0x08001b01
 8001b2c:	08001b01 	.word	0x08001b01
 8001b30:	08001b85 	.word	0x08001b85
 8001b34:	08001b01 	.word	0x08001b01
 8001b38:	08001b01 	.word	0x08001b01
 8001b3c:	08001b01 	.word	0x08001b01
 8001b40:	08001b01 	.word	0x08001b01
 8001b44:	08001c83 	.word	0x08001c83
 8001b48:	08001baf 	.word	0x08001baf
 8001b4c:	08001c3d 	.word	0x08001c3d
 8001b50:	08001b01 	.word	0x08001b01
 8001b54:	08001b01 	.word	0x08001b01
 8001b58:	08001ca5 	.word	0x08001ca5
 8001b5c:	08001b01 	.word	0x08001b01
 8001b60:	08001baf 	.word	0x08001baf
 8001b64:	08001b01 	.word	0x08001b01
 8001b68:	08001b01 	.word	0x08001b01
 8001b6c:	08001c45 	.word	0x08001c45
 8001b70:	6833      	ldr	r3, [r6, #0]
 8001b72:	1d1a      	adds	r2, r3, #4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6032      	str	r2, [r6, #0]
 8001b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001b80:	2301      	movs	r3, #1
 8001b82:	e09c      	b.n	8001cbe <_printf_i+0x1e6>
 8001b84:	6833      	ldr	r3, [r6, #0]
 8001b86:	6820      	ldr	r0, [r4, #0]
 8001b88:	1d19      	adds	r1, r3, #4
 8001b8a:	6031      	str	r1, [r6, #0]
 8001b8c:	0606      	lsls	r6, r0, #24
 8001b8e:	d501      	bpl.n	8001b94 <_printf_i+0xbc>
 8001b90:	681d      	ldr	r5, [r3, #0]
 8001b92:	e003      	b.n	8001b9c <_printf_i+0xc4>
 8001b94:	0645      	lsls	r5, r0, #25
 8001b96:	d5fb      	bpl.n	8001b90 <_printf_i+0xb8>
 8001b98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001b9c:	2d00      	cmp	r5, #0
 8001b9e:	da03      	bge.n	8001ba8 <_printf_i+0xd0>
 8001ba0:	232d      	movs	r3, #45	@ 0x2d
 8001ba2:	426d      	negs	r5, r5
 8001ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ba8:	230a      	movs	r3, #10
 8001baa:	4858      	ldr	r0, [pc, #352]	@ (8001d0c <_printf_i+0x234>)
 8001bac:	e011      	b.n	8001bd2 <_printf_i+0xfa>
 8001bae:	6821      	ldr	r1, [r4, #0]
 8001bb0:	6833      	ldr	r3, [r6, #0]
 8001bb2:	0608      	lsls	r0, r1, #24
 8001bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001bb8:	d402      	bmi.n	8001bc0 <_printf_i+0xe8>
 8001bba:	0649      	lsls	r1, r1, #25
 8001bbc:	bf48      	it	mi
 8001bbe:	b2ad      	uxthmi	r5, r5
 8001bc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001bc2:	6033      	str	r3, [r6, #0]
 8001bc4:	bf14      	ite	ne
 8001bc6:	230a      	movne	r3, #10
 8001bc8:	2308      	moveq	r3, #8
 8001bca:	4850      	ldr	r0, [pc, #320]	@ (8001d0c <_printf_i+0x234>)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001bd2:	6866      	ldr	r6, [r4, #4]
 8001bd4:	2e00      	cmp	r6, #0
 8001bd6:	60a6      	str	r6, [r4, #8]
 8001bd8:	db05      	blt.n	8001be6 <_printf_i+0x10e>
 8001bda:	6821      	ldr	r1, [r4, #0]
 8001bdc:	432e      	orrs	r6, r5
 8001bde:	f021 0104 	bic.w	r1, r1, #4
 8001be2:	6021      	str	r1, [r4, #0]
 8001be4:	d04b      	beq.n	8001c7e <_printf_i+0x1a6>
 8001be6:	4616      	mov	r6, r2
 8001be8:	fbb5 f1f3 	udiv	r1, r5, r3
 8001bec:	fb03 5711 	mls	r7, r3, r1, r5
 8001bf0:	5dc7      	ldrb	r7, [r0, r7]
 8001bf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001bf6:	462f      	mov	r7, r5
 8001bf8:	42bb      	cmp	r3, r7
 8001bfa:	460d      	mov	r5, r1
 8001bfc:	d9f4      	bls.n	8001be8 <_printf_i+0x110>
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d10b      	bne.n	8001c1a <_printf_i+0x142>
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	07df      	lsls	r7, r3, #31
 8001c06:	d508      	bpl.n	8001c1a <_printf_i+0x142>
 8001c08:	6923      	ldr	r3, [r4, #16]
 8001c0a:	6861      	ldr	r1, [r4, #4]
 8001c0c:	4299      	cmp	r1, r3
 8001c0e:	bfde      	ittt	le
 8001c10:	2330      	movle	r3, #48	@ 0x30
 8001c12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c1a:	1b92      	subs	r2, r2, r6
 8001c1c:	6122      	str	r2, [r4, #16]
 8001c1e:	464b      	mov	r3, r9
 8001c20:	4621      	mov	r1, r4
 8001c22:	4640      	mov	r0, r8
 8001c24:	f8cd a000 	str.w	sl, [sp]
 8001c28:	aa03      	add	r2, sp, #12
 8001c2a:	f7ff fee3 	bl	80019f4 <_printf_common>
 8001c2e:	3001      	adds	r0, #1
 8001c30:	d14a      	bne.n	8001cc8 <_printf_i+0x1f0>
 8001c32:	f04f 30ff 	mov.w	r0, #4294967295
 8001c36:	b004      	add	sp, #16
 8001c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	f043 0320 	orr.w	r3, r3, #32
 8001c42:	6023      	str	r3, [r4, #0]
 8001c44:	2778      	movs	r7, #120	@ 0x78
 8001c46:	4832      	ldr	r0, [pc, #200]	@ (8001d10 <_printf_i+0x238>)
 8001c48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	6831      	ldr	r1, [r6, #0]
 8001c50:	061f      	lsls	r7, r3, #24
 8001c52:	f851 5b04 	ldr.w	r5, [r1], #4
 8001c56:	d402      	bmi.n	8001c5e <_printf_i+0x186>
 8001c58:	065f      	lsls	r7, r3, #25
 8001c5a:	bf48      	it	mi
 8001c5c:	b2ad      	uxthmi	r5, r5
 8001c5e:	6031      	str	r1, [r6, #0]
 8001c60:	07d9      	lsls	r1, r3, #31
 8001c62:	bf44      	itt	mi
 8001c64:	f043 0320 	orrmi.w	r3, r3, #32
 8001c68:	6023      	strmi	r3, [r4, #0]
 8001c6a:	b11d      	cbz	r5, 8001c74 <_printf_i+0x19c>
 8001c6c:	2310      	movs	r3, #16
 8001c6e:	e7ad      	b.n	8001bcc <_printf_i+0xf4>
 8001c70:	4826      	ldr	r0, [pc, #152]	@ (8001d0c <_printf_i+0x234>)
 8001c72:	e7e9      	b.n	8001c48 <_printf_i+0x170>
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	f023 0320 	bic.w	r3, r3, #32
 8001c7a:	6023      	str	r3, [r4, #0]
 8001c7c:	e7f6      	b.n	8001c6c <_printf_i+0x194>
 8001c7e:	4616      	mov	r6, r2
 8001c80:	e7bd      	b.n	8001bfe <_printf_i+0x126>
 8001c82:	6833      	ldr	r3, [r6, #0]
 8001c84:	6825      	ldr	r5, [r4, #0]
 8001c86:	1d18      	adds	r0, r3, #4
 8001c88:	6961      	ldr	r1, [r4, #20]
 8001c8a:	6030      	str	r0, [r6, #0]
 8001c8c:	062e      	lsls	r6, r5, #24
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	d501      	bpl.n	8001c96 <_printf_i+0x1be>
 8001c92:	6019      	str	r1, [r3, #0]
 8001c94:	e002      	b.n	8001c9c <_printf_i+0x1c4>
 8001c96:	0668      	lsls	r0, r5, #25
 8001c98:	d5fb      	bpl.n	8001c92 <_printf_i+0x1ba>
 8001c9a:	8019      	strh	r1, [r3, #0]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4616      	mov	r6, r2
 8001ca0:	6123      	str	r3, [r4, #16]
 8001ca2:	e7bc      	b.n	8001c1e <_printf_i+0x146>
 8001ca4:	6833      	ldr	r3, [r6, #0]
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	1d1a      	adds	r2, r3, #4
 8001caa:	6032      	str	r2, [r6, #0]
 8001cac:	681e      	ldr	r6, [r3, #0]
 8001cae:	6862      	ldr	r2, [r4, #4]
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	f000 f97b 	bl	8001fac <memchr>
 8001cb6:	b108      	cbz	r0, 8001cbc <_printf_i+0x1e4>
 8001cb8:	1b80      	subs	r0, r0, r6
 8001cba:	6060      	str	r0, [r4, #4]
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	6123      	str	r3, [r4, #16]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cc6:	e7aa      	b.n	8001c1e <_printf_i+0x146>
 8001cc8:	4632      	mov	r2, r6
 8001cca:	4649      	mov	r1, r9
 8001ccc:	4640      	mov	r0, r8
 8001cce:	6923      	ldr	r3, [r4, #16]
 8001cd0:	47d0      	blx	sl
 8001cd2:	3001      	adds	r0, #1
 8001cd4:	d0ad      	beq.n	8001c32 <_printf_i+0x15a>
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	079b      	lsls	r3, r3, #30
 8001cda:	d413      	bmi.n	8001d04 <_printf_i+0x22c>
 8001cdc:	68e0      	ldr	r0, [r4, #12]
 8001cde:	9b03      	ldr	r3, [sp, #12]
 8001ce0:	4298      	cmp	r0, r3
 8001ce2:	bfb8      	it	lt
 8001ce4:	4618      	movlt	r0, r3
 8001ce6:	e7a6      	b.n	8001c36 <_printf_i+0x15e>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	4632      	mov	r2, r6
 8001cec:	4649      	mov	r1, r9
 8001cee:	4640      	mov	r0, r8
 8001cf0:	47d0      	blx	sl
 8001cf2:	3001      	adds	r0, #1
 8001cf4:	d09d      	beq.n	8001c32 <_printf_i+0x15a>
 8001cf6:	3501      	adds	r5, #1
 8001cf8:	68e3      	ldr	r3, [r4, #12]
 8001cfa:	9903      	ldr	r1, [sp, #12]
 8001cfc:	1a5b      	subs	r3, r3, r1
 8001cfe:	42ab      	cmp	r3, r5
 8001d00:	dcf2      	bgt.n	8001ce8 <_printf_i+0x210>
 8001d02:	e7eb      	b.n	8001cdc <_printf_i+0x204>
 8001d04:	2500      	movs	r5, #0
 8001d06:	f104 0619 	add.w	r6, r4, #25
 8001d0a:	e7f5      	b.n	8001cf8 <_printf_i+0x220>
 8001d0c:	08002115 	.word	0x08002115
 8001d10:	08002126 	.word	0x08002126

08001d14 <__sflush_r>:
 8001d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	0716      	lsls	r6, r2, #28
 8001d1c:	4605      	mov	r5, r0
 8001d1e:	460c      	mov	r4, r1
 8001d20:	d454      	bmi.n	8001dcc <__sflush_r+0xb8>
 8001d22:	684b      	ldr	r3, [r1, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	dc02      	bgt.n	8001d2e <__sflush_r+0x1a>
 8001d28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	dd48      	ble.n	8001dc0 <__sflush_r+0xac>
 8001d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d30:	2e00      	cmp	r6, #0
 8001d32:	d045      	beq.n	8001dc0 <__sflush_r+0xac>
 8001d34:	2300      	movs	r3, #0
 8001d36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001d3a:	682f      	ldr	r7, [r5, #0]
 8001d3c:	6a21      	ldr	r1, [r4, #32]
 8001d3e:	602b      	str	r3, [r5, #0]
 8001d40:	d030      	beq.n	8001da4 <__sflush_r+0x90>
 8001d42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d44:	89a3      	ldrh	r3, [r4, #12]
 8001d46:	0759      	lsls	r1, r3, #29
 8001d48:	d505      	bpl.n	8001d56 <__sflush_r+0x42>
 8001d4a:	6863      	ldr	r3, [r4, #4]
 8001d4c:	1ad2      	subs	r2, r2, r3
 8001d4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d50:	b10b      	cbz	r3, 8001d56 <__sflush_r+0x42>
 8001d52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d54:	1ad2      	subs	r2, r2, r3
 8001d56:	2300      	movs	r3, #0
 8001d58:	4628      	mov	r0, r5
 8001d5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d5c:	6a21      	ldr	r1, [r4, #32]
 8001d5e:	47b0      	blx	r6
 8001d60:	1c43      	adds	r3, r0, #1
 8001d62:	89a3      	ldrh	r3, [r4, #12]
 8001d64:	d106      	bne.n	8001d74 <__sflush_r+0x60>
 8001d66:	6829      	ldr	r1, [r5, #0]
 8001d68:	291d      	cmp	r1, #29
 8001d6a:	d82b      	bhi.n	8001dc4 <__sflush_r+0xb0>
 8001d6c:	4a28      	ldr	r2, [pc, #160]	@ (8001e10 <__sflush_r+0xfc>)
 8001d6e:	40ca      	lsrs	r2, r1
 8001d70:	07d6      	lsls	r6, r2, #31
 8001d72:	d527      	bpl.n	8001dc4 <__sflush_r+0xb0>
 8001d74:	2200      	movs	r2, #0
 8001d76:	6062      	str	r2, [r4, #4]
 8001d78:	6922      	ldr	r2, [r4, #16]
 8001d7a:	04d9      	lsls	r1, r3, #19
 8001d7c:	6022      	str	r2, [r4, #0]
 8001d7e:	d504      	bpl.n	8001d8a <__sflush_r+0x76>
 8001d80:	1c42      	adds	r2, r0, #1
 8001d82:	d101      	bne.n	8001d88 <__sflush_r+0x74>
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	b903      	cbnz	r3, 8001d8a <__sflush_r+0x76>
 8001d88:	6560      	str	r0, [r4, #84]	@ 0x54
 8001d8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d8c:	602f      	str	r7, [r5, #0]
 8001d8e:	b1b9      	cbz	r1, 8001dc0 <__sflush_r+0xac>
 8001d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d94:	4299      	cmp	r1, r3
 8001d96:	d002      	beq.n	8001d9e <__sflush_r+0x8a>
 8001d98:	4628      	mov	r0, r5
 8001d9a:	f7ff fbf5 	bl	8001588 <_free_r>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001da2:	e00d      	b.n	8001dc0 <__sflush_r+0xac>
 8001da4:	2301      	movs	r3, #1
 8001da6:	4628      	mov	r0, r5
 8001da8:	47b0      	blx	r6
 8001daa:	4602      	mov	r2, r0
 8001dac:	1c50      	adds	r0, r2, #1
 8001dae:	d1c9      	bne.n	8001d44 <__sflush_r+0x30>
 8001db0:	682b      	ldr	r3, [r5, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0c6      	beq.n	8001d44 <__sflush_r+0x30>
 8001db6:	2b1d      	cmp	r3, #29
 8001db8:	d001      	beq.n	8001dbe <__sflush_r+0xaa>
 8001dba:	2b16      	cmp	r3, #22
 8001dbc:	d11d      	bne.n	8001dfa <__sflush_r+0xe6>
 8001dbe:	602f      	str	r7, [r5, #0]
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	e021      	b.n	8001e08 <__sflush_r+0xf4>
 8001dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	e01a      	b.n	8001e02 <__sflush_r+0xee>
 8001dcc:	690f      	ldr	r7, [r1, #16]
 8001dce:	2f00      	cmp	r7, #0
 8001dd0:	d0f6      	beq.n	8001dc0 <__sflush_r+0xac>
 8001dd2:	0793      	lsls	r3, r2, #30
 8001dd4:	bf18      	it	ne
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	680e      	ldr	r6, [r1, #0]
 8001dda:	bf08      	it	eq
 8001ddc:	694b      	ldreq	r3, [r1, #20]
 8001dde:	1bf6      	subs	r6, r6, r7
 8001de0:	600f      	str	r7, [r1, #0]
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	2e00      	cmp	r6, #0
 8001de6:	ddeb      	ble.n	8001dc0 <__sflush_r+0xac>
 8001de8:	4633      	mov	r3, r6
 8001dea:	463a      	mov	r2, r7
 8001dec:	4628      	mov	r0, r5
 8001dee:	6a21      	ldr	r1, [r4, #32]
 8001df0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001df4:	47e0      	blx	ip
 8001df6:	2800      	cmp	r0, #0
 8001df8:	dc07      	bgt.n	8001e0a <__sflush_r+0xf6>
 8001dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e02:	f04f 30ff 	mov.w	r0, #4294967295
 8001e06:	81a3      	strh	r3, [r4, #12]
 8001e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e0a:	4407      	add	r7, r0
 8001e0c:	1a36      	subs	r6, r6, r0
 8001e0e:	e7e9      	b.n	8001de4 <__sflush_r+0xd0>
 8001e10:	20400001 	.word	0x20400001

08001e14 <_fflush_r>:
 8001e14:	b538      	push	{r3, r4, r5, lr}
 8001e16:	690b      	ldr	r3, [r1, #16]
 8001e18:	4605      	mov	r5, r0
 8001e1a:	460c      	mov	r4, r1
 8001e1c:	b913      	cbnz	r3, 8001e24 <_fflush_r+0x10>
 8001e1e:	2500      	movs	r5, #0
 8001e20:	4628      	mov	r0, r5
 8001e22:	bd38      	pop	{r3, r4, r5, pc}
 8001e24:	b118      	cbz	r0, 8001e2e <_fflush_r+0x1a>
 8001e26:	6a03      	ldr	r3, [r0, #32]
 8001e28:	b90b      	cbnz	r3, 8001e2e <_fflush_r+0x1a>
 8001e2a:	f7ff faa5 	bl	8001378 <__sinit>
 8001e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f3      	beq.n	8001e1e <_fflush_r+0xa>
 8001e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e38:	07d0      	lsls	r0, r2, #31
 8001e3a:	d404      	bmi.n	8001e46 <_fflush_r+0x32>
 8001e3c:	0599      	lsls	r1, r3, #22
 8001e3e:	d402      	bmi.n	8001e46 <_fflush_r+0x32>
 8001e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e42:	f7ff fb9e 	bl	8001582 <__retarget_lock_acquire_recursive>
 8001e46:	4628      	mov	r0, r5
 8001e48:	4621      	mov	r1, r4
 8001e4a:	f7ff ff63 	bl	8001d14 <__sflush_r>
 8001e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e50:	4605      	mov	r5, r0
 8001e52:	07da      	lsls	r2, r3, #31
 8001e54:	d4e4      	bmi.n	8001e20 <_fflush_r+0xc>
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	059b      	lsls	r3, r3, #22
 8001e5a:	d4e1      	bmi.n	8001e20 <_fflush_r+0xc>
 8001e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e5e:	f7ff fb91 	bl	8001584 <__retarget_lock_release_recursive>
 8001e62:	e7dd      	b.n	8001e20 <_fflush_r+0xc>

08001e64 <__swbuf_r>:
 8001e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e66:	460e      	mov	r6, r1
 8001e68:	4614      	mov	r4, r2
 8001e6a:	4605      	mov	r5, r0
 8001e6c:	b118      	cbz	r0, 8001e76 <__swbuf_r+0x12>
 8001e6e:	6a03      	ldr	r3, [r0, #32]
 8001e70:	b90b      	cbnz	r3, 8001e76 <__swbuf_r+0x12>
 8001e72:	f7ff fa81 	bl	8001378 <__sinit>
 8001e76:	69a3      	ldr	r3, [r4, #24]
 8001e78:	60a3      	str	r3, [r4, #8]
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	071a      	lsls	r2, r3, #28
 8001e7e:	d501      	bpl.n	8001e84 <__swbuf_r+0x20>
 8001e80:	6923      	ldr	r3, [r4, #16]
 8001e82:	b943      	cbnz	r3, 8001e96 <__swbuf_r+0x32>
 8001e84:	4621      	mov	r1, r4
 8001e86:	4628      	mov	r0, r5
 8001e88:	f000 f82a 	bl	8001ee0 <__swsetup_r>
 8001e8c:	b118      	cbz	r0, 8001e96 <__swbuf_r+0x32>
 8001e8e:	f04f 37ff 	mov.w	r7, #4294967295
 8001e92:	4638      	mov	r0, r7
 8001e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	6922      	ldr	r2, [r4, #16]
 8001e9a:	b2f6      	uxtb	r6, r6
 8001e9c:	1a98      	subs	r0, r3, r2
 8001e9e:	6963      	ldr	r3, [r4, #20]
 8001ea0:	4637      	mov	r7, r6
 8001ea2:	4283      	cmp	r3, r0
 8001ea4:	dc05      	bgt.n	8001eb2 <__swbuf_r+0x4e>
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f7ff ffb3 	bl	8001e14 <_fflush_r>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d1ed      	bne.n	8001e8e <__swbuf_r+0x2a>
 8001eb2:	68a3      	ldr	r3, [r4, #8]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60a3      	str	r3, [r4, #8]
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	6022      	str	r2, [r4, #0]
 8001ebe:	701e      	strb	r6, [r3, #0]
 8001ec0:	6962      	ldr	r2, [r4, #20]
 8001ec2:	1c43      	adds	r3, r0, #1
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d004      	beq.n	8001ed2 <__swbuf_r+0x6e>
 8001ec8:	89a3      	ldrh	r3, [r4, #12]
 8001eca:	07db      	lsls	r3, r3, #31
 8001ecc:	d5e1      	bpl.n	8001e92 <__swbuf_r+0x2e>
 8001ece:	2e0a      	cmp	r6, #10
 8001ed0:	d1df      	bne.n	8001e92 <__swbuf_r+0x2e>
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	f7ff ff9d 	bl	8001e14 <_fflush_r>
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d0d9      	beq.n	8001e92 <__swbuf_r+0x2e>
 8001ede:	e7d6      	b.n	8001e8e <__swbuf_r+0x2a>

08001ee0 <__swsetup_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4b29      	ldr	r3, [pc, #164]	@ (8001f88 <__swsetup_r+0xa8>)
 8001ee4:	4605      	mov	r5, r0
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	460c      	mov	r4, r1
 8001eea:	b118      	cbz	r0, 8001ef4 <__swsetup_r+0x14>
 8001eec:	6a03      	ldr	r3, [r0, #32]
 8001eee:	b90b      	cbnz	r3, 8001ef4 <__swsetup_r+0x14>
 8001ef0:	f7ff fa42 	bl	8001378 <__sinit>
 8001ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ef8:	0719      	lsls	r1, r3, #28
 8001efa:	d422      	bmi.n	8001f42 <__swsetup_r+0x62>
 8001efc:	06da      	lsls	r2, r3, #27
 8001efe:	d407      	bmi.n	8001f10 <__swsetup_r+0x30>
 8001f00:	2209      	movs	r2, #9
 8001f02:	602a      	str	r2, [r5, #0]
 8001f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	81a3      	strh	r3, [r4, #12]
 8001f0e:	e033      	b.n	8001f78 <__swsetup_r+0x98>
 8001f10:	0758      	lsls	r0, r3, #29
 8001f12:	d512      	bpl.n	8001f3a <__swsetup_r+0x5a>
 8001f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f16:	b141      	cbz	r1, 8001f2a <__swsetup_r+0x4a>
 8001f18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001f1c:	4299      	cmp	r1, r3
 8001f1e:	d002      	beq.n	8001f26 <__swsetup_r+0x46>
 8001f20:	4628      	mov	r0, r5
 8001f22:	f7ff fb31 	bl	8001588 <_free_r>
 8001f26:	2300      	movs	r3, #0
 8001f28:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001f30:	81a3      	strh	r3, [r4, #12]
 8001f32:	2300      	movs	r3, #0
 8001f34:	6063      	str	r3, [r4, #4]
 8001f36:	6923      	ldr	r3, [r4, #16]
 8001f38:	6023      	str	r3, [r4, #0]
 8001f3a:	89a3      	ldrh	r3, [r4, #12]
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	81a3      	strh	r3, [r4, #12]
 8001f42:	6923      	ldr	r3, [r4, #16]
 8001f44:	b94b      	cbnz	r3, 8001f5a <__swsetup_r+0x7a>
 8001f46:	89a3      	ldrh	r3, [r4, #12]
 8001f48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f50:	d003      	beq.n	8001f5a <__swsetup_r+0x7a>
 8001f52:	4621      	mov	r1, r4
 8001f54:	4628      	mov	r0, r5
 8001f56:	f000 f85c 	bl	8002012 <__smakebuf_r>
 8001f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f5e:	f013 0201 	ands.w	r2, r3, #1
 8001f62:	d00a      	beq.n	8001f7a <__swsetup_r+0x9a>
 8001f64:	2200      	movs	r2, #0
 8001f66:	60a2      	str	r2, [r4, #8]
 8001f68:	6962      	ldr	r2, [r4, #20]
 8001f6a:	4252      	negs	r2, r2
 8001f6c:	61a2      	str	r2, [r4, #24]
 8001f6e:	6922      	ldr	r2, [r4, #16]
 8001f70:	b942      	cbnz	r2, 8001f84 <__swsetup_r+0xa4>
 8001f72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001f76:	d1c5      	bne.n	8001f04 <__swsetup_r+0x24>
 8001f78:	bd38      	pop	{r3, r4, r5, pc}
 8001f7a:	0799      	lsls	r1, r3, #30
 8001f7c:	bf58      	it	pl
 8001f7e:	6962      	ldrpl	r2, [r4, #20]
 8001f80:	60a2      	str	r2, [r4, #8]
 8001f82:	e7f4      	b.n	8001f6e <__swsetup_r+0x8e>
 8001f84:	2000      	movs	r0, #0
 8001f86:	e7f7      	b.n	8001f78 <__swsetup_r+0x98>
 8001f88:	20000018 	.word	0x20000018

08001f8c <_sbrk_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	2300      	movs	r3, #0
 8001f90:	4d05      	ldr	r5, [pc, #20]	@ (8001fa8 <_sbrk_r+0x1c>)
 8001f92:	4604      	mov	r4, r0
 8001f94:	4608      	mov	r0, r1
 8001f96:	602b      	str	r3, [r5, #0]
 8001f98:	f7fe fbb0 	bl	80006fc <_sbrk>
 8001f9c:	1c43      	adds	r3, r0, #1
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk_r+0x1a>
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	b103      	cbz	r3, 8001fa6 <_sbrk_r+0x1a>
 8001fa4:	6023      	str	r3, [r4, #0]
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	200001d4 	.word	0x200001d4

08001fac <memchr>:
 8001fac:	4603      	mov	r3, r0
 8001fae:	b510      	push	{r4, lr}
 8001fb0:	b2c9      	uxtb	r1, r1
 8001fb2:	4402      	add	r2, r0
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	d101      	bne.n	8001fbe <memchr+0x12>
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e003      	b.n	8001fc6 <memchr+0x1a>
 8001fbe:	7804      	ldrb	r4, [r0, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	428c      	cmp	r4, r1
 8001fc4:	d1f6      	bne.n	8001fb4 <memchr+0x8>
 8001fc6:	bd10      	pop	{r4, pc}

08001fc8 <__swhatbuf_r>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	460c      	mov	r4, r1
 8001fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fd0:	4615      	mov	r5, r2
 8001fd2:	2900      	cmp	r1, #0
 8001fd4:	461e      	mov	r6, r3
 8001fd6:	b096      	sub	sp, #88	@ 0x58
 8001fd8:	da0c      	bge.n	8001ff4 <__swhatbuf_r+0x2c>
 8001fda:	89a3      	ldrh	r3, [r4, #12]
 8001fdc:	2100      	movs	r1, #0
 8001fde:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001fe2:	bf14      	ite	ne
 8001fe4:	2340      	movne	r3, #64	@ 0x40
 8001fe6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001fea:	2000      	movs	r0, #0
 8001fec:	6031      	str	r1, [r6, #0]
 8001fee:	602b      	str	r3, [r5, #0]
 8001ff0:	b016      	add	sp, #88	@ 0x58
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
 8001ff4:	466a      	mov	r2, sp
 8001ff6:	f000 f849 	bl	800208c <_fstat_r>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	dbed      	blt.n	8001fda <__swhatbuf_r+0x12>
 8001ffe:	9901      	ldr	r1, [sp, #4]
 8002000:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002004:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002008:	4259      	negs	r1, r3
 800200a:	4159      	adcs	r1, r3
 800200c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002010:	e7eb      	b.n	8001fea <__swhatbuf_r+0x22>

08002012 <__smakebuf_r>:
 8002012:	898b      	ldrh	r3, [r1, #12]
 8002014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002016:	079d      	lsls	r5, r3, #30
 8002018:	4606      	mov	r6, r0
 800201a:	460c      	mov	r4, r1
 800201c:	d507      	bpl.n	800202e <__smakebuf_r+0x1c>
 800201e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	6123      	str	r3, [r4, #16]
 8002026:	2301      	movs	r3, #1
 8002028:	6163      	str	r3, [r4, #20]
 800202a:	b003      	add	sp, #12
 800202c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800202e:	466a      	mov	r2, sp
 8002030:	ab01      	add	r3, sp, #4
 8002032:	f7ff ffc9 	bl	8001fc8 <__swhatbuf_r>
 8002036:	9f00      	ldr	r7, [sp, #0]
 8002038:	4605      	mov	r5, r0
 800203a:	4639      	mov	r1, r7
 800203c:	4630      	mov	r0, r6
 800203e:	f7ff fb0d 	bl	800165c <_malloc_r>
 8002042:	b948      	cbnz	r0, 8002058 <__smakebuf_r+0x46>
 8002044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002048:	059a      	lsls	r2, r3, #22
 800204a:	d4ee      	bmi.n	800202a <__smakebuf_r+0x18>
 800204c:	f023 0303 	bic.w	r3, r3, #3
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	81a3      	strh	r3, [r4, #12]
 8002056:	e7e2      	b.n	800201e <__smakebuf_r+0xc>
 8002058:	89a3      	ldrh	r3, [r4, #12]
 800205a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800205e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002062:	81a3      	strh	r3, [r4, #12]
 8002064:	9b01      	ldr	r3, [sp, #4]
 8002066:	6020      	str	r0, [r4, #0]
 8002068:	b15b      	cbz	r3, 8002082 <__smakebuf_r+0x70>
 800206a:	4630      	mov	r0, r6
 800206c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002070:	f000 f81e 	bl	80020b0 <_isatty_r>
 8002074:	b128      	cbz	r0, 8002082 <__smakebuf_r+0x70>
 8002076:	89a3      	ldrh	r3, [r4, #12]
 8002078:	f023 0303 	bic.w	r3, r3, #3
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	81a3      	strh	r3, [r4, #12]
 8002082:	89a3      	ldrh	r3, [r4, #12]
 8002084:	431d      	orrs	r5, r3
 8002086:	81a5      	strh	r5, [r4, #12]
 8002088:	e7cf      	b.n	800202a <__smakebuf_r+0x18>
	...

0800208c <_fstat_r>:
 800208c:	b538      	push	{r3, r4, r5, lr}
 800208e:	2300      	movs	r3, #0
 8002090:	4d06      	ldr	r5, [pc, #24]	@ (80020ac <_fstat_r+0x20>)
 8002092:	4604      	mov	r4, r0
 8002094:	4608      	mov	r0, r1
 8002096:	4611      	mov	r1, r2
 8002098:	602b      	str	r3, [r5, #0]
 800209a:	f7fe fb25 	bl	80006e8 <_fstat>
 800209e:	1c43      	adds	r3, r0, #1
 80020a0:	d102      	bne.n	80020a8 <_fstat_r+0x1c>
 80020a2:	682b      	ldr	r3, [r5, #0]
 80020a4:	b103      	cbz	r3, 80020a8 <_fstat_r+0x1c>
 80020a6:	6023      	str	r3, [r4, #0]
 80020a8:	bd38      	pop	{r3, r4, r5, pc}
 80020aa:	bf00      	nop
 80020ac:	200001d4 	.word	0x200001d4

080020b0 <_isatty_r>:
 80020b0:	b538      	push	{r3, r4, r5, lr}
 80020b2:	2300      	movs	r3, #0
 80020b4:	4d05      	ldr	r5, [pc, #20]	@ (80020cc <_isatty_r+0x1c>)
 80020b6:	4604      	mov	r4, r0
 80020b8:	4608      	mov	r0, r1
 80020ba:	602b      	str	r3, [r5, #0]
 80020bc:	f7fe fb1a 	bl	80006f4 <_isatty>
 80020c0:	1c43      	adds	r3, r0, #1
 80020c2:	d102      	bne.n	80020ca <_isatty_r+0x1a>
 80020c4:	682b      	ldr	r3, [r5, #0]
 80020c6:	b103      	cbz	r3, 80020ca <_isatty_r+0x1a>
 80020c8:	6023      	str	r3, [r4, #0]
 80020ca:	bd38      	pop	{r3, r4, r5, pc}
 80020cc:	200001d4 	.word	0x200001d4

080020d0 <_init>:
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	bf00      	nop
 80020d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d6:	bc08      	pop	{r3}
 80020d8:	469e      	mov	lr, r3
 80020da:	4770      	bx	lr

080020dc <_fini>:
 80020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020de:	bf00      	nop
 80020e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e2:	bc08      	pop	{r3}
 80020e4:	469e      	mov	lr, r3
 80020e6:	4770      	bx	lr
